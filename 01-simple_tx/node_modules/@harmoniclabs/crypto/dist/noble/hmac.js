"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.hmac = exports.HMAC = void 0;
var _assert_1 = require("./_assert.js");
var utils_1 = require("./utils.js");
// HMAC (RFC 2104)
var HMAC = /** @class */ (function (_super) {
    __extends(HMAC, _super);
    function HMAC(hash, _key) {
        var _this = _super.call(this) || this;
        _this.finished = false;
        _this.destroyed = false;
        (0, _assert_1.hash)(hash);
        var key = (0, utils_1.toBytes)(_key);
        _this.iHash = hash.create();
        if (typeof _this.iHash.update !== 'function')
            throw new Error('Expected instance of class which extends utils.Hash');
        _this.blockLen = _this.iHash.blockLen;
        _this.outputLen = _this.iHash.outputLen;
        var blockLen = _this.blockLen;
        var pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (var i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        _this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        _this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (var i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        _this.oHash.update(pad);
        pad.fill(0);
        return _this;
    }
    HMAC.prototype.update = function (buf) {
        (0, _assert_1.exists)(this);
        this.iHash.update(buf);
        return this;
    };
    HMAC.prototype.digestInto = function (out) {
        (0, _assert_1.exists)(this);
        (0, _assert_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    };
    HMAC.prototype.digest = function () {
        var out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    };
    HMAC.prototype._cloneInto = function (to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        var _a = this, oHash = _a.oHash, iHash = _a.iHash, finished = _a.finished, destroyed = _a.destroyed, blockLen = _a.blockLen, outputLen = _a.outputLen;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    };
    HMAC.prototype.destroy = function () {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    };
    return HMAC;
}(utils_1.Hash));
exports.HMAC = HMAC;
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 */
var hmac = function (hash, key, message) {
    return new HMAC(hash, key).update(message).digest();
};
exports.hmac = hmac;
exports.hmac.create = function (hash, key) { return new HMAC(hash, key); };
