"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
var _md_1 = require("./_md.js");
var u64 = __importStar(require("./_u64.js"));
var utils_1 = require("./utils.js");
// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
var _a = __read(/* @__PURE__ */ (function () { return u64.split([
    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
].map(function (n) { return BigInt(n); })); })(), 2), SHA512_Kh = _a[0], SHA512_Kl = _a[1];
// Temporary buffer, not used to store anything between runs
var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
var SHA512 = /** @class */ (function (_super) {
    __extends(SHA512, _super);
    function SHA512() {
        var _this = _super.call(this, 128, 64, 16, false) || this;
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        _this.Ah = 0x6a09e667 | 0;
        _this.Al = 0xf3bcc908 | 0;
        _this.Bh = 0xbb67ae85 | 0;
        _this.Bl = 0x84caa73b | 0;
        _this.Ch = 0x3c6ef372 | 0;
        _this.Cl = 0xfe94f82b | 0;
        _this.Dh = 0xa54ff53a | 0;
        _this.Dl = 0x5f1d36f1 | 0;
        _this.Eh = 0x510e527f | 0;
        _this.El = 0xade682d1 | 0;
        _this.Fh = 0x9b05688c | 0;
        _this.Fl = 0x2b3e6c1f | 0;
        _this.Gh = 0x1f83d9ab | 0;
        _this.Gl = 0xfb41bd6b | 0;
        _this.Hh = 0x5be0cd19 | 0;
        _this.Hl = 0x137e2179 | 0;
        return _this;
    }
    // prettier-ignore
    SHA512.prototype.get = function () {
        var _a = this, Ah = _a.Ah, Al = _a.Al, Bh = _a.Bh, Bl = _a.Bl, Ch = _a.Ch, Cl = _a.Cl, Dh = _a.Dh, Dl = _a.Dl, Eh = _a.Eh, El = _a.El, Fh = _a.Fh, Fl = _a.Fl, Gh = _a.Gh, Gl = _a.Gl, Hh = _a.Hh, Hl = _a.Hl;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    };
    // prettier-ignore
    SHA512.prototype.set = function (Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    };
    SHA512.prototype.process = function (view, offset) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (var i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (var i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            var W15h = SHA512_W_H[i - 15] | 0;
            var W15l = SHA512_W_L[i - 15] | 0;
            var s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);
            var s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            var W2h = SHA512_W_H[i - 2] | 0;
            var W2l = SHA512_W_L[i - 2] | 0;
            var s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);
            var s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            var SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            var SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        var _k = this, Ah = _k.Ah, Al = _k.Al, Bh = _k.Bh, Bl = _k.Bl, Ch = _k.Ch, Cl = _k.Cl, Dh = _k.Dh, Dl = _k.Dl, Eh = _k.Eh, El = _k.El, Fh = _k.Fh, Fl = _k.Fl, Gh = _k.Gh, Gl = _k.Gl, Hh = _k.Hh, Hl = _k.Hl;
        // Compression function main loop, 80 rounds
        for (var i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            var sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);
            var sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            var CHIh = (Eh & Fh) ^ (~Eh & Gh);
            var CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            var T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            var T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            var T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            var sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);
            var sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);
            var MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            var MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            (_a = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0), Eh = _a.h, El = _a.l);
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            var All = u64.add3L(T1l, sigma0l, MAJl);
            Ah = u64.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        (_b = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0), Ah = _b.h, Al = _b.l);
        (_c = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0), Bh = _c.h, Bl = _c.l);
        (_d = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0), Ch = _d.h, Cl = _d.l);
        (_e = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0), Dh = _e.h, Dl = _e.l);
        (_f = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0), Eh = _f.h, El = _f.l);
        (_g = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0), Fh = _g.h, Fl = _g.l);
        (_h = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0), Gh = _h.h, Gl = _h.l);
        (_j = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0), Hh = _j.h, Hl = _j.l);
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    };
    SHA512.prototype.roundClean = function () {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    };
    SHA512.prototype.destroy = function () {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    };
    return SHA512;
}(_md_1.HashMD));
exports.SHA512 = SHA512;
var SHA512_224 = /** @class */ (function (_super) {
    __extends(SHA512_224, _super);
    function SHA512_224() {
        var _this = _super.call(this) || this;
        // h -- high 32 bits, l -- low 32 bits
        _this.Ah = 0x8c3d37c8 | 0;
        _this.Al = 0x19544da2 | 0;
        _this.Bh = 0x73e19966 | 0;
        _this.Bl = 0x89dcd4d6 | 0;
        _this.Ch = 0x1dfab7ae | 0;
        _this.Cl = 0x32ff9c82 | 0;
        _this.Dh = 0x679dd514 | 0;
        _this.Dl = 0x582f9fcf | 0;
        _this.Eh = 0x0f6d2b69 | 0;
        _this.El = 0x7bd44da8 | 0;
        _this.Fh = 0x77e36f73 | 0;
        _this.Fl = 0x04c48942 | 0;
        _this.Gh = 0x3f9d85a8 | 0;
        _this.Gl = 0x6a1d36c8 | 0;
        _this.Hh = 0x1112e6ad | 0;
        _this.Hl = 0x91d692a1 | 0;
        _this.outputLen = 28;
        return _this;
    }
    return SHA512_224;
}(SHA512));
var SHA512_256 = /** @class */ (function (_super) {
    __extends(SHA512_256, _super);
    function SHA512_256() {
        var _this = _super.call(this) || this;
        // h -- high 32 bits, l -- low 32 bits
        _this.Ah = 0x22312194 | 0;
        _this.Al = 0xfc2bf72c | 0;
        _this.Bh = 0x9f555fa3 | 0;
        _this.Bl = 0xc84c64c2 | 0;
        _this.Ch = 0x2393b86b | 0;
        _this.Cl = 0x6f53b151 | 0;
        _this.Dh = 0x96387719 | 0;
        _this.Dl = 0x5940eabd | 0;
        _this.Eh = 0x96283ee2 | 0;
        _this.El = 0xa88effe3 | 0;
        _this.Fh = 0xbe5e1e25 | 0;
        _this.Fl = 0x53863992 | 0;
        _this.Gh = 0x2b0199fc | 0;
        _this.Gl = 0x2c85b8aa | 0;
        _this.Hh = 0x0eb72ddc | 0;
        _this.Hl = 0x81c52ca2 | 0;
        _this.outputLen = 32;
        return _this;
    }
    return SHA512_256;
}(SHA512));
var SHA384 = /** @class */ (function (_super) {
    __extends(SHA384, _super);
    function SHA384() {
        var _this = _super.call(this) || this;
        // h -- high 32 bits, l -- low 32 bits
        _this.Ah = 0xcbbb9d5d | 0;
        _this.Al = 0xc1059ed8 | 0;
        _this.Bh = 0x629a292a | 0;
        _this.Bl = 0x367cd507 | 0;
        _this.Ch = 0x9159015a | 0;
        _this.Cl = 0x3070dd17 | 0;
        _this.Dh = 0x152fecd8 | 0;
        _this.Dl = 0xf70e5939 | 0;
        _this.Eh = 0x67332667 | 0;
        _this.El = 0xffc00b31 | 0;
        _this.Fh = 0x8eb44a87 | 0;
        _this.Fl = 0x68581511 | 0;
        _this.Gh = 0xdb0c2e0d | 0;
        _this.Gl = 0x64f98fa7 | 0;
        _this.Hh = 0x47b5481d | 0;
        _this.Hl = 0xbefa4fa4 | 0;
        _this.outputLen = 48;
        return _this;
    }
    return SHA384;
}(SHA512));
exports.sha512 = (0, utils_1.wrapConstructor)(function () { return new SHA512(); });
exports.sha512_224 = (0, utils_1.wrapConstructor)(function () { return new SHA512_224(); });
exports.sha512_256 = (0, utils_1.wrapConstructor)(function () { return new SHA512_256(); });
exports.sha384 = (0, utils_1.wrapConstructor)(function () { return new SHA384(); });
