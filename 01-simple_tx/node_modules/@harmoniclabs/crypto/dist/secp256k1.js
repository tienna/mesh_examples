"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifySchnorrSecp256k1Signature = exports.verifyEcdsaSecp256k1Signature = void 0;
var secp256k1_1 = require("./noble/secp256k1.js");
function verifyEcdsaSecp256k1Signature(vk, // 33 bytes
messageHash, // 32 bytes
signature) {
    if (!(vk instanceof Uint8Array &&
        messageHash instanceof Uint8Array &&
        signature instanceof Uint8Array &&
        vk.length === 33 &&
        messageHash.length === 32 &&
        signature.length === 64))
        throw new TypeError("invalid arguments passed to 'verifyEcdsaSecp256k1Signature'");
    var vkHead = vk[0];
    if (!(vkHead === 0x02 ||
        vkHead === 0x03))
        throw new Error("plutus-machine only supports compressed public keys for 'verifyEcdsaSecp256k1Signature'");
    return (0, secp256k1_1.verifySecp256k1)(signature, messageHash, vk);
}
exports.verifyEcdsaSecp256k1Signature = verifyEcdsaSecp256k1Signature;
function verifySchnorrSecp256k1Signature(pubKey, messageHash, signature) {
    if (!(pubKey instanceof Uint8Array &&
        messageHash instanceof Uint8Array &&
        signature instanceof Uint8Array &&
        pubKey.length === 32 &&
        signature.length === 64))
        throw new TypeError("invalid arguments passed to 'verifyEcdsaSecp256k1Signature'");
    // signature 64
    // pubKey 32
    return (0, secp256k1_1.verifySchnorr)(signature, messageHash, pubKey);
}
exports.verifySchnorrSecp256k1Signature = verifySchnorrSecp256k1Signature;
