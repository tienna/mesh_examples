"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha2_512 = exports._sha2_512_pad = void 0;
var types_1 = require("./types.js");
/**
 * Pad a bytearray so its size is a multiple of 128 (1024 bits).
 * Internal method.
 */
function _sha2_512_pad(src) {
    var nBits = src.length * 8;
    // clone
    var dst = src.slice();
    dst.push(0x80);
    var nZeroes = (128 - dst.length % 128) - 8;
    if (nZeroes < 0) {
        nZeroes += 128;
    }
    for (var i = 0; i < nZeroes; i++) {
        dst.push(0);
    }
    // assume nBits fits in 32 bits
    dst.push(0);
    dst.push(0);
    dst.push(0);
    dst.push(0);
    dst.push(((nBits >> 24) & 0xff));
    dst.push(((nBits >> 16) & 0xff));
    dst.push(((nBits >> 8) & 0xff));
    dst.push(((nBits >> 0) & 0xff));
    return dst;
}
exports._sha2_512_pad = _sha2_512_pad;
var _sha2_512_k = Object.freeze([
    (0, types_1.uint64)("0x428a2f98d728ae22"), (0, types_1.uint64)("0x7137449123ef65cd"),
    (0, types_1.uint64)("0xb5c0fbcfec4d3b2f"), (0, types_1.uint64)("0xe9b5dba58189dbbc"),
    (0, types_1.uint64)("0x3956c25bf348b538"), (0, types_1.uint64)("0x59f111f1b605d019"),
    (0, types_1.uint64)("0x923f82a4af194f9b"), (0, types_1.uint64)("0xab1c5ed5da6d8118"),
    (0, types_1.uint64)("0xd807aa98a3030242"), (0, types_1.uint64)("0x12835b0145706fbe"),
    (0, types_1.uint64)("0x243185be4ee4b28c"), (0, types_1.uint64)("0x550c7dc3d5ffb4e2"),
    (0, types_1.uint64)("0x72be5d74f27b896f"), (0, types_1.uint64)("0x80deb1fe3b1696b1"),
    (0, types_1.uint64)("0x9bdc06a725c71235"), (0, types_1.uint64)("0xc19bf174cf692694"),
    (0, types_1.uint64)("0xe49b69c19ef14ad2"), (0, types_1.uint64)("0xefbe4786384f25e3"),
    (0, types_1.uint64)("0x0fc19dc68b8cd5b5"), (0, types_1.uint64)("0x240ca1cc77ac9c65"),
    (0, types_1.uint64)("0x2de92c6f592b0275"), (0, types_1.uint64)("0x4a7484aa6ea6e483"),
    (0, types_1.uint64)("0x5cb0a9dcbd41fbd4"), (0, types_1.uint64)("0x76f988da831153b5"),
    (0, types_1.uint64)("0x983e5152ee66dfab"), (0, types_1.uint64)("0xa831c66d2db43210"),
    (0, types_1.uint64)("0xb00327c898fb213f"), (0, types_1.uint64)("0xbf597fc7beef0ee4"),
    (0, types_1.uint64)("0xc6e00bf33da88fc2"), (0, types_1.uint64)("0xd5a79147930aa725"),
    (0, types_1.uint64)("0x06ca6351e003826f"), (0, types_1.uint64)("0x142929670a0e6e70"),
    (0, types_1.uint64)("0x27b70a8546d22ffc"), (0, types_1.uint64)("0x2e1b21385c26c926"),
    (0, types_1.uint64)("0x4d2c6dfc5ac42aed"), (0, types_1.uint64)("0x53380d139d95b3df"),
    (0, types_1.uint64)("0x650a73548baf63de"), (0, types_1.uint64)("0x766a0abb3c77b2a8"),
    (0, types_1.uint64)("0x81c2c92e47edaee6"), (0, types_1.uint64)("0x92722c851482353b"),
    (0, types_1.uint64)("0xa2bfe8a14cf10364"), (0, types_1.uint64)("0xa81a664bbc423001"),
    (0, types_1.uint64)("0xc24b8b70d0f89791"), (0, types_1.uint64)("0xc76c51a30654be30"),
    (0, types_1.uint64)("0xd192e819d6ef5218"), (0, types_1.uint64)("0xd69906245565a910"),
    (0, types_1.uint64)("0xf40e35855771202a"), (0, types_1.uint64)("0x106aa07032bbd1b8"),
    (0, types_1.uint64)("0x19a4c116b8d2d0c8"), (0, types_1.uint64)("0x1e376c085141ab53"),
    (0, types_1.uint64)("0x2748774cdf8eeb99"), (0, types_1.uint64)("0x34b0bcb5e19b48a8"),
    (0, types_1.uint64)("0x391c0cb3c5c95a63"), (0, types_1.uint64)("0x4ed8aa4ae3418acb"),
    (0, types_1.uint64)("0x5b9cca4f7763e373"), (0, types_1.uint64)("0x682e6ff3d6b2b8a3"),
    (0, types_1.uint64)("0x748f82ee5defb2fc"), (0, types_1.uint64)("0x78a5636f43172f60"),
    (0, types_1.uint64)("0x84c87814a1f0ab72"), (0, types_1.uint64)("0x8cc702081a6439ec"),
    (0, types_1.uint64)("0x90befffa23631e28"), (0, types_1.uint64)("0xa4506cebde82bde9"),
    (0, types_1.uint64)("0xbef9a3f7b2c67915"), (0, types_1.uint64)("0xc67178f2e372532b"),
    (0, types_1.uint64)("0xca273eceea26619c"), (0, types_1.uint64)("0xd186b8c721c0c207"),
    (0, types_1.uint64)("0xeada7dd6cde0eb1e"), (0, types_1.uint64)("0xf57d4f7fee6ed178"),
    (0, types_1.uint64)("0x06f067aa72176fba"), (0, types_1.uint64)("0x0a637dc5a2c898a6"),
    (0, types_1.uint64)("0x113f9804bef90dae"), (0, types_1.uint64)("0x1b710b35131c471b"),
    (0, types_1.uint64)("0x28db77f523047d84"), (0, types_1.uint64)("0x32caab7b40c72493"),
    (0, types_1.uint64)("0x3c9ebe0a15c9bebc"), (0, types_1.uint64)("0x431d67c49c100d4c"),
    (0, types_1.uint64)("0x4cc5d4becb3e42b6"), (0, types_1.uint64)("0x597f299cfc657e2a"),
    (0, types_1.uint64)("0x5fcb6fab3ad6faec"), (0, types_1.uint64)("0x6c44198c4a475817"),
]);
/**
 * getulates sha2-512 (64bytes) hash of a list of uint8 numbers.
 * Result is also a list of uint8 number.
 * @example
 * bytesToHex(sha2_512([0x61, 0x62, 0x63])) => "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"
 * @example
 * bytesToHex(sha2_512([])) => "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"
 * @param {number[]} bytes - list of uint8 numbers
 * @returns {number[]} - list of uint8 numbers
 */
function sha2_512(bytes) {
    if (bytes instanceof Uint8Array)
        bytes = Array.from(bytes);
    // initial has; updated later
    var hash = [
        (0, types_1.uint64)("0x6a09e667f3bcc908"),
        (0, types_1.uint64)("0xbb67ae8584caa73b"),
        (0, types_1.uint64)("0x3c6ef372fe94f82b"),
        (0, types_1.uint64)("0xa54ff53a5f1d36f1"),
        (0, types_1.uint64)("0x510e527fade682d1"),
        (0, types_1.uint64)("0x9b05688c2b3e6c1f"),
        (0, types_1.uint64)("0x1f83d9abfb41bd6b"),
        (0, types_1.uint64)("0x5be0cd19137e2179"),
    ];
    function sigma0(x) {
        return (0, types_1.forceUint64)(((0, types_1.uint64Rotr)(x, 1) ^ (0, types_1.uint64Rotr)(x, 8)) ^ (x >> BigInt(7)));
    }
    function sigma1(x) {
        return (0, types_1.forceUint64)(((0, types_1.uint64Rotr)(x, 19) ^ (0, types_1.uint64Rotr)(x, 61)) ^ (x >> BigInt(6)));
    }
    bytes = _sha2_512_pad(bytes);
    // break message in successive 64 byte chunks
    for (var chunkStart = 0; chunkStart < bytes.length; chunkStart += 128) {
        var chunk = bytes.slice(chunkStart, chunkStart + 128);
        var w = (new Array(80)).fill(BigInt(0)); // array of 32 bit numbers!
        // copy chunk into first 16 hi/lo positions of w (i.e. into first 32 uint32 positions)
        for (var i = 0; i < 16; i++) {
            w[i] = (0, types_1.uint64)("0x" + (0, types_1.byteArrToHex)(chunk.slice(i * 8, i * 8 + 8)));
        }
        // extends the first 16 positions into the remaining 80 positions
        for (var i = 16; i < 80; i++) {
            w[i] = (0, types_1.forceUint64)(sigma1(w[i - 2]) + w[i - 7] + sigma0(w[i - 15]) + w[i - 16]);
        }
        // intialize working variables to current hash value
        var a = hash[0];
        var b = hash[1];
        var c = hash[2];
        var d = hash[3];
        var e = hash[4];
        var f = hash[5];
        var g = hash[6];
        var h = hash[7];
        // compression function main loop
        for (var i = 0; i < 80; i++) {
            var S1 = (((0, types_1.uint64Rotr)(e, 14) ^ (0, types_1.uint64Rotr)(e, 18)) ^ (0, types_1.uint64Rotr)(e, 41));
            var ch = ((e & f) ^ ((~e) & g));
            var temp1 = (0, types_1.forceUint64)(h + S1 + ch + _sha2_512_k[i] + w[i]);
            var S0 = ((0, types_1.uint64Rotr)(a, 28) ^ (0, types_1.uint64Rotr)(a, 34)) ^ ((0, types_1.uint64Rotr)(a, 39));
            var maj = (((a & b) ^ (a & c)) ^ (b & (c)));
            var temp2 = (0, types_1.forceUint64)(S0 + maj);
            h = g;
            g = f;
            f = e;
            e = (0, types_1.forceUint64)(d + temp1);
            d = c;
            c = b;
            b = a;
            a = (0, types_1.forceUint64)(temp1 + temp2);
        }
        // update the hash
        hash[0] = (0, types_1.forceUint64)(hash[0] + a);
        hash[1] = (0, types_1.forceUint64)(hash[1] + b);
        hash[2] = (0, types_1.forceUint64)(hash[2] + c);
        hash[3] = (0, types_1.forceUint64)(hash[3] + d);
        hash[4] = (0, types_1.forceUint64)(hash[4] + e);
        hash[5] = (0, types_1.forceUint64)(hash[5] + f);
        hash[6] = (0, types_1.forceUint64)(hash[6] + g);
        hash[7] = (0, types_1.forceUint64)(hash[7] + h);
    }
    // produce the final digest of uint8 numbers
    var result = [];
    for (var i = 0; i < 8; i++) {
        result.push.apply(result, __spreadArray([], __read((0, types_1.uint64ToBytesBE)(hash[i])), false));
    }
    return new Uint8Array(result);
}
exports.sha2_512 = sha2_512;
