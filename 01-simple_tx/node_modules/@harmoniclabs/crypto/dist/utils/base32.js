"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeBase32Bech32 = exports.decodeBase32rfc4648 = exports.encodeBase32rfc4648 = exports.BECH32_BASE32_ALPHABET = exports.rfc4648_ALPHABET = void 0;
var types_1 = require("../types.js");
var bitstream_1 = require("@harmoniclabs/bitstream");
exports.rfc4648_ALPHABET = Object.freeze([
    'a', 'b', 'c', 'd', 'e', 'f', 'g',
    'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u',
    'v', 'w', 'x', 'y', 'z', '2', '3',
    '4', '5', '6', '7'
]);
exports.BECH32_BASE32_ALPHABET = Object.freeze([
    'q', 'p', 'z', 'r', 'y', '9', 'x',
    '8', 'g', 'f', '2', 't', 'v', 'd',
    'w', '0', 's', '3', 'j', 'n', '5',
    '4', 'k', 'h', 'c', 'e', '6', 'm',
    'u', 'a', '7', 'l'
]);
function encodeBase32rfc4648(bytes) {
    return (0, types_1.buffToUint5Arr)(bytes).map(function (c) { return exports.rfc4648_ALPHABET[c]; }).join("");
}
exports.encodeBase32rfc4648 = encodeBase32rfc4648;
function decodeBase32(base32Str, alpabeth) {
    if (!Array.from(base32Str).every(function (ch) { return alpabeth.includes(ch); }))
        throw new Error("can't decode base32 a string that is not in base32 (rfc 4648); string was: " + base32Str);
    var len = base32Str.length;
    var bits = '';
    for (var i = 0; i < len - 1; i++) {
        var num_1 = alpabeth.indexOf(base32Str[i].toLowerCase());
        bits += num_1.toString(2).padStart(5, '0');
    }
    // last, make sure we align to byte
    var nCut = len * 5 - 8 * Math.floor(len * 5 / 8);
    var num = alpabeth.indexOf(base32Str[len - 1].toLowerCase());
    var lastbits = num.toString(2).padStart(5, '0');
    bits += lastbits.slice(0, 5 - nCut);
    return bitstream_1.BitStream.fromBinStr(bits).toBuffer().buffer;
}
function decodeBase32rfc4648(base32Str) {
    return decodeBase32(base32Str, exports.rfc4648_ALPHABET);
}
exports.decodeBase32rfc4648 = decodeBase32rfc4648;
function decodeBase32Bech32(base32Str) {
    return decodeBase32(base32Str, exports.BECH32_BASE32_ALPHABET);
}
exports.decodeBase32Bech32 = decodeBase32Bech32;
