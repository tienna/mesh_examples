type Constructable<ReturnT, ConstructorParams extends any[] = any[]> = {
    new (...args: ConstructorParams): ReturnT;
};
/**
 * @static
 */
export default class JsRuntime {
    /**
     * for tests only
     */
    static setSilent(): void;
    /**
     * for tests only
     */
    static unsetSilent(): void;
    private constructor();
    static readonly pleaseOpenAnIssue: Readonly<string>;
    static assert<E extends Error>(condition: boolean, errorMessage: string | E, addInfos?: any, ...args: any[]): void;
    static throw<E extends Error>(errorMessage: string | E, addInfos?: any, ...args: any[]): void;
    static makeNotSupposedToHappenError(prefix: string): Error;
    static objWithUnderscoreAsPrivate<T extends object>(tInstance: T): T;
    static withUnderscoreAsPrivate<T extends Constructable<any>, ConstructorParams extends any[] = any[]>(classConstructor: T): T;
    static objAsReadonly<T extends object>(tInstance: T): Readonly<T>;
}
export {};
