"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * for tests only
 */
var _JsRuntime_silent = false;
/**
 * @static
 */
var JsRuntime = /** @class */ (function () {
    // static class
    function JsRuntime() {
    }
    /**
     * for tests only
     */
    JsRuntime.setSilent = function () {
        _JsRuntime_silent = true;
    };
    /**
     * for tests only
     */
    JsRuntime.unsetSilent = function () {
        _JsRuntime_silent = false;
    };
    JsRuntime.assert = function (condition, errorMessage, addInfos) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            args[_i - 3] = arguments[_i];
        }
        if (condition)
            return;
        !_JsRuntime_silent && args.length > 0 && console.error.apply(console, __spreadArray([], __read(args), false));
        !_JsRuntime_silent && addInfos && console.error(addInfos);
        if (errorMessage instanceof Error) {
            throw errorMessage;
        }
        ;
        throw new Error(errorMessage);
    };
    JsRuntime.throw = function (errorMessage, addInfos) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        !_JsRuntime_silent && args.length > 0 && console.error.apply(console, __spreadArray([], __read(args), false));
        !_JsRuntime_silent && addInfos && console.error(addInfos);
        if (errorMessage instanceof Error) {
            throw errorMessage;
        }
        ;
        throw new Error(errorMessage);
    };
    JsRuntime.makeNotSupposedToHappenError = function (prefix) {
        return new Error(prefix + "\n\n\
        this is not supposed to happen, please open an issue explaining how you got here: \
        https://github.com/HarmonicLabs/plu-ts/issues");
    };
    JsRuntime.objWithUnderscoreAsPrivate = function (tInstance) {
        return new Proxy(tInstance, {
            get: function (instance, property) {
                var other = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    other[_i - 2] = arguments[_i];
                }
                if (typeof property === "symbol" || property.startsWith('_')) {
                    throw new Error("attempt to access a private property");
                }
                var propValue = Reflect.get.apply(Reflect, __spreadArray([instance, property], __read(other), false));
                if (typeof propValue === "function") {
                    // if accessing a method
                    // return the method binded to the pure javascript version
                    // so that ignores the proxy
                    return propValue.bind(instance);
                }
                return propValue;
            },
            set: function (instance, property, value) {
                var other = [];
                for (var _i = 3; _i < arguments.length; _i++) {
                    other[_i - 3] = arguments[_i];
                }
                if (typeof property === "symbol" || property.startsWith('_')) {
                    throw new Error("attempt to set a private property");
                }
                return Reflect.set.apply(Reflect, __spreadArray([instance, property, value], __read(other), false));
            },
            has: function (instance, property) {
                var other = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    other[_i - 2] = arguments[_i];
                }
                if (typeof property === "symbol" || property.startsWith('_')) {
                    return false;
                }
                return Reflect.has.apply(Reflect, __spreadArray([instance, property], __read(other), false));
            },
            ownKeys: function (target) {
                return Reflect.ownKeys(target)
                    // shows only strings, and only those that do not start with an underscore
                    .filter(function (k) { return typeof k === "string" && !k.startsWith('_'); });
            }
        });
    };
    JsRuntime.withUnderscoreAsPrivate = function (classConstructor) {
        return new Proxy(classConstructor, {
            construct: function (originalConstructor, args) {
                return JsRuntime.objWithUnderscoreAsPrivate(Reflect.construct(originalConstructor, args));
            }
        });
    };
    JsRuntime.objAsReadonly = function (tInstance) {
        return new Proxy(tInstance, {
            get: function (instance, property) {
                var other = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    other[_i - 2] = arguments[_i];
                }
                var propValue = Reflect.get.apply(Reflect, __spreadArray([instance, property], __read(other), false));
                if (typeof propValue === "function") {
                    // if accessing a method it should be able to modify the object if needed
                    // return the method binded to the pure javascript version
                    // so that ignores the proxy
                    return propValue.bind(instance);
                }
                if (typeof propValue === "object") {
                    // proxies the sets of the object too,
                    // note this is happens for arrays also
                    return JsRuntime.objAsReadonly(propValue);
                }
                return propValue;
            },
            set: function (_instance, _property, _value) {
                var _other = [];
                for (var _i = 3; _i < arguments.length; _i++) {
                    _other[_i - 3] = arguments[_i];
                }
                throw new Error("object marked as readonly, assigning values is not allowed");
            }
        });
    };
    JsRuntime.pleaseOpenAnIssue = "please open an issue explaining how you got here: https://github.com/HarmonicPool/plu-ts/issues";
    return JsRuntime;
}());
exports.default = JsRuntime;
