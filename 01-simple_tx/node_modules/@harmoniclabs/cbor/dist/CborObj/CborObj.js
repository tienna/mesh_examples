"use strict";
/*
Intermediate data type that allows an easier conversion from (and to) CBOR to (and from) JSON serializables objects
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.cborObjFromRaw = exports.isRawCborObj = exports.isCborObj = void 0;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var CborArray_1 = require("./CborArray.js");
var CborBytes_1 = require("./CborBytes.js");
var CborMap_1 = require("./CborMap.js");
var CborNegInt_1 = require("./CborNegInt.js");
var CborSimple_1 = require("./CborSimple.js");
var CborTag_1 = require("./CborTag.js");
var CborText_1 = require("./CborText.js");
var CborUInt_1 = require("./CborUInt.js");
var errors_1 = require("../errors/index.js");
var assert_1 = require("../utils/assert.js");
function isCborObj(cborObj) {
    var proto = Object.getPrototypeOf(cborObj);
    // only strict instances
    return (proto === CborNegInt_1.CborNegInt.prototype ||
        proto === CborUInt_1.CborUInt.prototype ||
        proto === CborBytes_1.CborBytes.prototype ||
        proto === CborText_1.CborText.prototype ||
        proto === CborArray_1.CborArray.prototype ||
        proto === CborMap_1.CborMap.prototype ||
        proto === CborTag_1.CborTag.prototype ||
        proto === CborSimple_1.CborSimple.prototype);
}
exports.isCborObj = isCborObj;
function isRawCborObj(rawCborObj) {
    if (typeof rawCborObj !== "object" || rawCborObj === null || Array.isArray(rawCborObj))
        return false;
    var keys = Object.keys(rawCborObj);
    if (keys.length <= 0)
        return false;
    if (keys.includes("array")) {
        return Array.isArray(rawCborObj.array) &&
            rawCborObj.array.every(isRawCborObj);
    }
    if (keys.includes("map")) {
        return Array.isArray(rawCborObj.map) &&
            rawCborObj.map.every(function (entry) { return isRawCborObj(entry.k) && isRawCborObj(entry.v); });
    }
    if (keys.includes("tag")) {
        return keys.includes("data") &&
            isRawCborObj(rawCborObj.data);
    }
    var includes = function (k) { return keys.includes(k); };
    return ((includes("neg") &&
        typeof rawCborObj.neg === "bigint" &&
        rawCborObj.neg < 0) ||
        (includes("uint") &&
            typeof rawCborObj.uint === "bigint" &&
            rawCborObj.uint >= 0) ||
        (includes("bytes") && (0, uint8array_utils_1.isUint8Array)(rawCborObj.bytes)) ||
        (includes("text") && typeof rawCborObj.text === "string") ||
        (includes("simple") && (0, CborSimple_1.isSimpleCborValue)(rawCborObj.simple)));
}
exports.isRawCborObj = isRawCborObj;
function cborObjFromRaw(_rawCborObj) {
    (0, assert_1.assert)(isRawCborObj(_rawCborObj), "expected a vaild 'RawCborObj' as input; got: " + Object.keys(_rawCborObj));
    function _cborObjFromRaw(rawCborObj) {
        if ((0, CborNegInt_1.isRawCborNegative)(rawCborObj))
            return new CborNegInt_1.CborNegInt(rawCborObj.neg);
        if ((0, CborUInt_1.isRawCborUnsigned)(rawCborObj))
            return new CborUInt_1.CborUInt(rawCborObj.uint);
        if ((0, CborBytes_1.isRawCborBytes)(rawCborObj))
            return new CborBytes_1.CborBytes(rawCborObj.bytes);
        if ((0, CborText_1.isRawCborText)(rawCborObj))
            return new CborText_1.CborText(rawCborObj.text);
        if ((0, CborArray_1.isRawCborArray)(rawCborObj))
            return new CborArray_1.CborArray(rawCborObj.array
                .map(_cborObjFromRaw), rawCborObj.options);
        if ((0, CborMap_1.isRawCborMap)(rawCborObj))
            return new CborMap_1.CborMap(rawCborObj.map
                .map(function (entry) {
                return {
                    k: _cborObjFromRaw(entry.k),
                    v: _cborObjFromRaw(entry.v)
                };
            }), rawCborObj.options);
        if ((0, CborTag_1.isRawCborTag)(rawCborObj))
            return new CborTag_1.CborTag(rawCborObj.tag, _cborObjFromRaw(rawCborObj.data));
        if ((0, CborSimple_1.isRawCborSimple)(rawCborObj))
            return new CborSimple_1.CborSimple(rawCborObj.simple);
        throw new errors_1.BaseCborError("'cborObjFromRaw' did not match any possible 'RawCborObj'");
    }
    return _cborObjFromRaw(_rawCborObj);
}
exports.cborObjFromRaw = cborObjFromRaw;
