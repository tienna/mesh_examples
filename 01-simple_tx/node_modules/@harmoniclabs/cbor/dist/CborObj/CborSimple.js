"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborSimple = exports.isRawCborSimple = exports.isSimpleCborValue = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var assert_1 = require("../utils/assert.js");
function isSimpleCborValue(v) {
    var t = typeof v;
    return (v === null ||
        t === "boolean" ||
        t === "undefined" ||
        t === "number");
}
exports.isSimpleCborValue = isSimpleCborValue;
function isRawCborSimple(s) {
    if (typeof s !== "object" || s === null)
        return false;
    var keys = Object.keys(s);
    return (keys.includes("simple") &&
        isSimpleCborValue(s.simple));
}
exports.isRawCborSimple = isRawCborSimple;
var CborSimple = /** @class */ (function () {
    function CborSimple(simple, interpretNumAs) {
        if (interpretNumAs === undefined &&
            typeof simple === "number" &&
            simple >= 0 && simple <= 255 &&
            simple === Math.round(simple))
            interpretNumAs = "simple";
        if (interpretNumAs === undefined)
            interpretNumAs = "float";
        if (interpretNumAs === "simple") {
            (0, assert_1.assert)(typeof simple === "number" &&
                simple >= 0 && simple <= 255 &&
                simple === Math.round(simple), "invalid simple value");
        }
        (0, assert_1.assert)(isSimpleCborValue(simple), "invalid cbor simple value; received: " + simple);
        (0, obj_utils_1.defineReadOnlyProperty)(this, "simple", simple);
        (0, obj_utils_1.defineReadOnlyProperty)(this, "numAs", interpretNumAs);
    }
    CborSimple.prototype.toRawObj = function () {
        return {
            simple: this.simple
        };
    };
    CborSimple.prototype.clone = function () {
        return new CborSimple(this.simple, this.numAs);
    };
    Object.defineProperty(CborSimple, "null", {
        get: function () {
            return new CborSimple(null);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CborSimple, "true", {
        get: function () {
            return new CborSimple(true);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CborSimple, "false", {
        get: function () {
            return new CborSimple(false);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CborSimple, "undefined", {
        get: function () {
            return new CborSimple(undefined);
        },
        enumerable: false,
        configurable: true
    });
    CborSimple.simpleNumber = function (n) {
        if (typeof n !== "number")
            n = 0;
        return new CborSimple(n, "simple");
    };
    CborSimple.float = function (n) {
        if (typeof n !== "number")
            n = 0;
        return new CborSimple(n, "float");
    };
    return CborSimple;
}());
exports.CborSimple = CborSimple;
