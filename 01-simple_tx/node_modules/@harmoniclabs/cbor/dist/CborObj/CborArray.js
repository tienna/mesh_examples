"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborArray = exports.isRawCborArray = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var CborObj_1 = require("./CborObj.js");
var assert_1 = require("../utils/assert.js");
function isRawCborArray(arr) {
    if (typeof arr !== "object")
        return false;
    var keys = Object.keys(arr);
    return (keys.includes("array") &&
        Array.isArray(arr.array) &&
        arr.array.every(CborObj_1.isRawCborObj));
}
exports.isRawCborArray = isRawCborArray;
var defaultOpts = Object.freeze({
    indefinite: false
});
var CborArray = /** @class */ (function () {
    function CborArray(array, options) {
        (0, assert_1.assert)(Array.isArray(array) &&
            array.every(CborObj_1.isCborObj), "in 'CborArray' constructor: invalid input; got: " + array);
        var indefinite = (options === null || options === void 0 ? void 0 : options.indefinite) === true ? true : defaultOpts.indefinite;
        (0, obj_utils_1.defineReadOnlyProperty)(this, "array", array);
        (0, obj_utils_1.defineReadOnlyProperty)(this, "indefinite", indefinite === true);
    }
    CborArray.prototype.toRawObj = function () {
        return {
            array: this.array.map(function (cborObj) { return cborObj.toRawObj(); }),
            options: this.indefinite === true ? {
                indefinite: this.indefinite
            } : undefined
        };
    };
    CborArray.prototype.clone = function () {
        return new CborArray(this.array, { indefinite: this.indefinite });
    };
    return CborArray;
}());
exports.CborArray = CborArray;
