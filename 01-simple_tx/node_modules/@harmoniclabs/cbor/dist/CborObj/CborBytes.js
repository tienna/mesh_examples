"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CborBytes = exports.isRawCborBytes = void 0;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var assert_1 = require("../utils/assert.js");
function isRawCborBytes(b) {
    if (typeof b !== "object" || b === null)
        return false;
    var keys = Object.keys(b);
    return (keys.includes("bytes") &&
        (0, uint8array_utils_1.isUint8Array)(b.bytes));
}
exports.isRawCborBytes = isRawCborBytes;
var CborBytes = /** @class */ (function () {
    function CborBytes(bytes, restChunks) {
        if (restChunks === void 0) { restChunks = undefined; }
        (0, assert_1.assert)((0, uint8array_utils_1.isUint8Array)(bytes), "invalid buffer in CborBytes");
        var _originalRestWasEmptyArray = Array.isArray(restChunks) && restChunks.length === 0;
        restChunks = Array.isArray(restChunks) ? restChunks.slice() : [];
        restChunks = restChunks.filter(function (chunk) { return chunk instanceof Uint8Array; });
        var _isDefiniteLength = (!_originalRestWasEmptyArray) && restChunks.length === 0;
        Object.defineProperties(this, {
            bytes: {
                get: _isDefiniteLength ? function () { return bytes; } : function () { return concatBytes(bytes, (restChunks !== null && restChunks !== void 0 ? restChunks : [])); },
                set: function () { },
                enumerable: true,
                configurable: false
            },
            chunks: {
                value: Object.freeze(_isDefiniteLength ? [bytes] : __spreadArray([bytes], __read((restChunks !== null && restChunks !== void 0 ? restChunks : [])), false)),
                writable: false,
                enumerable: true,
                configurable: false
            },
            isDefiniteLength: {
                value: _isDefiniteLength,
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    Object.defineProperty(CborBytes.prototype, "buffer", {
        /** @deprecated use `bytes` instead */
        get: function () { return this.bytes; },
        enumerable: false,
        configurable: true
    });
    CborBytes.prototype.toRawObj = function () {
        return {
            bytes: Uint8Array.prototype.slice.call(this.bytes)
        };
    };
    CborBytes.prototype.clone = function () {
        if (this.isDefiniteLength)
            return new CborBytes(Uint8Array.prototype.slice.call(this.bytes));
        var _a = __read(this.chunks), bytes = _a[0], rest = _a.slice(1);
        return new CborBytes(Uint8Array.prototype.slice.call(bytes), rest.map(function (chunk) { return Uint8Array.prototype.slice.call(chunk); }));
    };
    return CborBytes;
}());
exports.CborBytes = CborBytes;
function concatBytes(fst, rest) {
    // pre allocate resulting byte
    var result = new Uint8Array(rest.reduce(function (a, b) { return a + b.length; }, fst.length));
    var offset = fst.length;
    result.set(fst, 0); // copy first
    var elem;
    for (var i = 0; i < rest.length; i++) {
        elem = rest[i];
        result.set(elem, offset); // copy ith
        offset += elem.length;
    }
    return result;
}
