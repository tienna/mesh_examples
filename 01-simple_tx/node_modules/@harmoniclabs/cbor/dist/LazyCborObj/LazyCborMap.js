"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyCborMap = exports.isLazyCborMapEntry = void 0;
var obj_utils_1 = require("@harmoniclabs/obj-utils");
var assert_1 = require("../utils/assert.js");
var defaultOpts = Object.freeze({
    indefinite: false
});
function isLazyCborMapEntry(thing) {
    return (0, obj_utils_1.isObject)(thing) && ((0, obj_utils_1.hasOwn)(thing, "k") && thing.k instanceof Uint8Array &&
        (0, obj_utils_1.hasOwn)(thing, "v") && thing.v instanceof Uint8Array);
}
exports.isLazyCborMapEntry = isLazyCborMapEntry;
var LazyCborMap = /** @class */ (function () {
    function LazyCborMap(map, options) {
        (0, assert_1.assert)(Array.isArray(map) &&
            map.every(isLazyCborMapEntry), "in 'LazyCborMap' constructor: invalid input; got: " + map);
        var indefinite = __assign(__assign({}, defaultOpts), options).indefinite;
        var _map = map;
        Object.defineProperties(this, {
            array: {
                get: function () { return _map; },
                set: function (newMap) {
                    if (Array.isArray(newMap) &&
                        newMap.every(isLazyCborMapEntry)) {
                        _map = newMap;
                    }
                },
                enumerable: true,
                configurable: false
            },
            indefinite: {
                value: indefinite,
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    LazyCborMap.prototype.clone = function () {
        return new LazyCborMap(this.map.map(function (_a) {
            var k = _a.k, v = _a.v;
            return ({
                k: Uint8Array.prototype.slice.call(k),
                v: Uint8Array.prototype.slice.call(v),
            });
        }), { indefinite: this.indefinite });
    };
    return LazyCborMap;
}());
exports.LazyCborMap = LazyCborMap;
