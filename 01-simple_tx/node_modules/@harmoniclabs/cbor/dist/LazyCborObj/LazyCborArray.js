"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyCborArray = void 0;
var assert_1 = require("../utils/assert.js");
var defaultOpts = Object.freeze({
    indefinite: false
});
var LazyCborArray = /** @class */ (function () {
    function LazyCborArray(array, options) {
        (0, assert_1.assert)(Array.isArray(array) &&
            array.every(function (elem) { return elem instanceof Uint8Array; }), "in 'LazyCborArray' constructor: invalid input; got: " + array);
        var indefinite = __assign(__assign({}, defaultOpts), options).indefinite;
        var _array = array;
        Object.defineProperties(this, {
            array: {
                get: function () { return _array; },
                set: function (arr) {
                    if (Array.isArray(arr) &&
                        arr.every(function (elem) { return elem instanceof Uint8Array; })) {
                        _array = arr;
                    }
                },
                enumerable: true,
                configurable: false
            },
            indefinite: {
                value: indefinite,
                writable: false,
                enumerable: true,
                configurable: false
            }
        });
    }
    LazyCborArray.prototype.clone = function () {
        return new LazyCborArray(this.array.map(function (elem) { return Uint8Array.prototype.slice.call(elem); }), { indefinite: this.indefinite });
    };
    return LazyCborArray;
}());
exports.LazyCborArray = LazyCborArray;
