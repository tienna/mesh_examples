"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyCborTag = void 0;
var assert_1 = require("../utils/assert.js");
var LazyCborObj_1 = require("./LazyCborObj.js");
var LazyCborTag = /** @class */ (function () {
    function LazyCborTag(tag, data) {
        if (typeof tag === "number") {
            tag = BigInt(tag);
        }
        (0, assert_1.assert)(typeof tag === "bigint" &&
            (0, LazyCborObj_1.isLazyCborObj)(data), "using direct value constructor; either 'tag' is not a number or 'data' is not 'LazyCborObj'");
        var _tag = tag;
        var _data = data;
        Object.defineProperties(this, {
            tag: {
                get: function () { return _tag; },
                set: function (val) {
                    if (typeof tag === "number")
                        tag = BigInt(tag);
                    if (typeof tag === "bigint") {
                        _tag = tag;
                    }
                },
                enumerable: true,
                configurable: false
            },
            data: {
                get: function () { return _data; },
                set: function (val) {
                    if ((0, LazyCborObj_1.isLazyCborObj)(val)) {
                        _data = val;
                    }
                },
                enumerable: true,
                configurable: false
            }
        });
    }
    LazyCborTag.prototype.clone = function () {
        return new LazyCborTag(this.tag, this.data.clone());
    };
    return LazyCborTag;
}());
exports.LazyCborTag = LazyCborTag;
