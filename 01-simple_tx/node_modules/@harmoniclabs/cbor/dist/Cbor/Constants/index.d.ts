export declare enum MajorType {
    unsigned = 0,
    negative = 1,
    bytes = 2,
    text = 3,
    array = 4,
    map = 5,
    tag = 6,
    float_or_simple = 7
}
export declare function isMajorTypeTag(majorTag: MajorType): boolean;
export declare enum UInt8MajorType {
    unsigned = 0,
    negative = 32,
    bytes = 64,
    text = 96,
    array = 128,
    map = 160,
    tag = 192,
    float_or_simple = 224
}
export declare function isUInt8MajorType(byte: UInt8MajorType): boolean;
/**
 * @static
 */
declare class AddInfos {
    constructor();
    static Length: Readonly<{
        expect_uint8: 24;
        expect_uint16: 25;
        expect_uint32: 26;
        expect_uint64: 27;
        make_infinite: 31;
    }>;
    static Tag: Readonly<{
        utf8_string: number;
        epoch_datetime: number;
        positive_bignum: number;
        negative_bignum: number;
        decimal_frac_array: number;
        bigfloat: number;
        expect_base64_url: number;
        expect_base64: number;
        expect_base16: number;
        sub_cbor: number;
        uri: number;
        base64_url: number;
        base64: number;
        regexp: number;
        MIME: number;
        self_cbor: number;
    }>;
    static Major7: Readonly<{
        false: 20;
        true: 21;
        null: 22;
        undefined: 23;
        simple_byte: 24;
        float_half: 25;
        float_single: 26;
        float_double: 27;
        infinite_break: 31;
    }>;
}
/**
 * @static
 */
export declare class CborConstants {
    private constructor();
    static MajorTypeMask: number;
    static AdditionalInfosMask: number;
    static AddInfos: typeof AddInfos;
    static MajorType: Readonly<{
        unsigned: MajorType;
        negative: MajorType;
        bytes: MajorType;
        text: MajorType;
        array: MajorType;
        map: MajorType;
        tag: MajorType;
        float_or_simple: MajorType;
    }>;
    static UInt8MajorType: Readonly<{
        unsigned: UInt8MajorType;
        negative: UInt8MajorType;
        bytes: UInt8MajorType;
        text: UInt8MajorType;
        array: UInt8MajorType;
        map: UInt8MajorType;
        tag: UInt8MajorType;
        float_or_simple: UInt8MajorType;
    }>;
    static infinite_break: number;
}
export {};
