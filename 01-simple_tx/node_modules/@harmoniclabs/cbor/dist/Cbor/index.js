"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cbor = void 0;
var CborString_1 = require("../CborString/index.js");
var CborObj_1 = require("../CborObj/index.js");
var Constants_1 = require("./Constants/index.js");
var CborBytes_1 = require("../CborObj/CborBytes.js");
var CborText_1 = require("../CborObj/CborText.js");
var CborArray_1 = require("../CborObj/CborArray.js");
var CborMap_1 = require("../CborObj/CborMap.js");
var CborTag_1 = require("../CborObj/CborTag.js");
var CborSimple_1 = require("../CborObj/CborSimple.js");
var CborUInt_1 = require("../CborObj/CborUInt.js");
var CborNegInt_1 = require("../CborObj/CborNegInt.js");
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
var BaseCborError_1 = require("../errors/BaseCborError/index.js");
var assert_1 = require("../utils/assert.js");
var LazyCborArray_1 = require("../LazyCborObj/LazyCborArray.js");
var LazyCborMap_1 = require("../LazyCborObj/LazyCborMap.js");
var LazyCborTag_1 = require("../LazyCborObj/LazyCborTag.js");
var errors_1 = require("../errors/index.js");
/** Lowest value that can be encoded directly as (negative) integer */
var minBigInt = BigInt("-18446744073709551616"); // -(2n ** 64n)
/** Highest value that can be encoded directly as (positive) integer */
var maxBigInt = BigInt("18446744073709551615"); // (2n ** 64n) - 1n
/**
 * @private to the module; not needed elsewhere
 */
var CborEncoding = /** @class */ (function () {
    function CborEncoding() {
        this._buff = new Uint8Array(256); // (1 << 8) bytes, 1/4 kB
        this._len = 0;
    }
    Object.defineProperty(CborEncoding.prototype, "bytes", {
        get: function () {
            return this._buff.slice(0, this._len);
        },
        enumerable: false,
        configurable: true
    });
    CborEncoding.prototype._prepareAppendOfByteLength = function (l) {
        var requiredLen = this._len + l;
        var newBuffLen = this._buff.byteLength;
        // expand the Uint8Array if needed
        while (newBuffLen < requiredLen) {
            newBuffLen = newBuffLen << 1; // old length * 2
        }
        // copies the old Uint8Array if expanded
        if (newBuffLen !== this._buff.byteLength) {
            var newBuff = new Uint8Array(newBuffLen);
            for (var i = 0; i < this._len; i++) {
                (0, uint8array_utils_1.writeUInt8)(newBuff, (0, uint8array_utils_1.readUInt8)(this._buff, i), i);
            }
            this._buff = newBuff;
        }
    };
    CborEncoding.prototype._commitAppendOfByteLength = function (l) {
        this._len += l;
    };
    CborEncoding.prototype.appendUInt8 = function (uint8) {
        (0, assert_1.assert)(uint8 >= 0 && uint8 <= 255 &&
            uint8 === Math.round(uint8), "expected a byte; got: " + uint8);
        this._prepareAppendOfByteLength(1);
        (0, uint8array_utils_1.writeUInt8)(this._buff, uint8, this._len);
        this._commitAppendOfByteLength(1);
    };
    CborEncoding.prototype.appendUInt16 = function (uint16) {
        (0, assert_1.assert)(uint16 >= 0 && uint16 <= 65535 &&
            uint16 === Math.round(uint16), "expected two bytes; got: " + uint16);
        this._prepareAppendOfByteLength(2);
        (0, uint8array_utils_1.writeUInt16BE)(this._buff, uint16, this._len);
        this._commitAppendOfByteLength(2);
    };
    CborEncoding.prototype.appendUInt32 = function (uint32) {
        (0, assert_1.assert)(uint32 >= 0 && uint32 <= 4294967295 &&
            uint32 === Math.round(uint32), "expected 4 bytes; got: " + uint32);
        this._prepareAppendOfByteLength(4);
        (0, uint8array_utils_1.writeUInt32BE)(this._buff, uint32, this._len);
        this._commitAppendOfByteLength(4);
    };
    CborEncoding.prototype.appendUInt64 = function (uint64) {
        (0, assert_1.assert)(typeof uint64 === "bigint" &&
            uint64 >= BigInt(0) && uint64 <= BigInt("0b" + "11111111".repeat(8)), "expected 8 bytes; got: " + uint64);
        this._prepareAppendOfByteLength(8);
        (0, uint8array_utils_1.writeBigUInt64BE)(this._buff, uint64, this._len);
        this._commitAppendOfByteLength(8);
    };
    CborEncoding.prototype.appendFloat64 = function (float64) {
        (0, assert_1.assert)(typeof float64 === "number", "expected 8 bytes; got: " + float64);
        this._prepareAppendOfByteLength(8);
        (0, uint8array_utils_1.writeFloat64BE)(this._buff, float64, this._len);
        this._commitAppendOfByteLength(8);
    };
    CborEncoding.prototype.appendRawBytes = function (bytes) {
        (0, assert_1.assert)((0, uint8array_utils_1.isUint8Array)(bytes), "invalid bytes passed");
        this._prepareAppendOfByteLength(bytes.length);
        for (var i = 0; i < bytes.length; i++) {
            (0, uint8array_utils_1.writeUInt8)(this._buff, (0, uint8array_utils_1.readUInt8)(bytes, i), this._len + i);
        }
        this._commitAppendOfByteLength(bytes.length);
    };
    CborEncoding.prototype.appendTypeAndLength = function (cborType, length) {
        (0, assert_1.assert)((0, Constants_1.isMajorTypeTag)(cborType), "passed tag is not a valid major cbor type");
        (0, assert_1.assert)((typeof length === "number" || typeof length === "bigint") &&
            length >= 0, "invalid length");
        if (length > 4294967295) {
            if (typeof length === "number")
                length = BigInt(length);
            this.appendUInt8((cborType << 5) | 27 /*expect_uint64*/);
            this.appendUInt64(length);
            return;
        }
        if (typeof length === "bigint")
            length = Number(length);
        if (length < 24) {
            this.appendUInt8((cborType << 5) | length);
        }
        else if (length < 0x100) {
            this.appendUInt8((cborType << 5) | 24);
            this.appendUInt8(length);
        }
        else if (length < 0x10000) {
            this.appendUInt8((cborType << 5) | 25);
            this.appendUInt16(length);
        }
        else /* if (length < 0x100000000) */ {
            this.appendUInt8((cborType << 5) | 26);
            this.appendUInt32(length);
        }
    };
    CborEncoding.prototype.appendCborObjEncoding = function (cObj) {
        (0, assert_1.assert)((0, CborObj_1.isCborObj)(cObj), "expected 'CborObj' strict instance; got: " + cObj);
        if (cObj instanceof CborUInt_1.CborUInt) {
            (0, assert_1.assert)(cObj.num >= BigInt(0), "encoding invalid unsigned integer as CBOR");
            var n = cObj.num;
            // https://www.rfc-editor.org/rfc/rfc8949.html#name-bignums
            if (n > maxBigInt) {
                var hex = n.toString(16);
                if ((hex.length % 2) === 1)
                    hex = "0" + hex;
                this.appendCborObjEncoding(new CborTag_1.CborTag(2, new CborBytes_1.CborBytes((0, uint8array_utils_1.fromHex)(hex))));
                return;
            }
            // else
            this.appendTypeAndLength(Constants_1.MajorType.unsigned, cObj.num);
            return;
        }
        if (cObj instanceof CborNegInt_1.CborNegInt) {
            (0, assert_1.assert)(cObj.num < BigInt(0), "encoding invalid negative integer as CBOR");
            var n = cObj.num;
            // https://www.rfc-editor.org/rfc/rfc8949.html#name-bignums
            if (n < minBigInt) {
                n = BigInt(-1) - n;
                var hex = n.toString(16);
                if ((hex.length % 2) === 1)
                    hex = "0" + hex;
                this.appendCborObjEncoding(new CborTag_1.CborTag(3, new CborBytes_1.CborBytes((0, uint8array_utils_1.fromHex)(hex))));
                return;
            }
            // else
            this.appendTypeAndLength(Constants_1.MajorType.negative, -(n + BigInt(1)));
            return;
        }
        if (cObj instanceof CborBytes_1.CborBytes) {
            if (cObj.isDefiniteLength) {
                var bs = cObj.bytes;
                this.appendTypeAndLength(Constants_1.MajorType.bytes, bs.length);
                this.appendRawBytes(bs);
                return;
            }
            else {
                var chunks = cObj.chunks;
                var nChunks = chunks.length;
                this.appendUInt8((Constants_1.MajorType.bytes << 5) | 31);
                var bs = void 0;
                for (var i = 0; i < nChunks; i++) {
                    bs = chunks[i];
                    this.appendTypeAndLength(Constants_1.MajorType.bytes, bs.length);
                    this.appendRawBytes(bs);
                }
                this.appendUInt8(255); // break
                return;
            }
        }
        if (cObj instanceof CborText_1.CborText) {
            var bs = (0, uint8array_utils_1.fromUtf8)(cObj.text);
            this.appendTypeAndLength(Constants_1.MajorType.text, bs.length);
            this.appendRawBytes(bs);
            return;
        }
        if (cObj instanceof CborArray_1.CborArray) {
            var arr = cObj.array;
            var arrLen = arr.length;
            if (cObj.indefinite)
                this.appendUInt8(0x9f);
            else
                this.appendTypeAndLength(Constants_1.MajorType.array, arrLen);
            for (var i = 0; i < arrLen; i++) {
                this.appendCborObjEncoding(arr[i]);
            }
            if (cObj.indefinite)
                this.appendUInt8(0xff);
            return;
        }
        if (cObj instanceof CborMap_1.CborMap) {
            var map = cObj.map;
            if (cObj.indefinite)
                this.appendUInt8(0xbf);
            else
                this.appendTypeAndLength(Constants_1.MajorType.map, map.length);
            for (var i = 0; i < map.length; i++) {
                this.appendCborObjEncoding(map[i].k);
                this.appendCborObjEncoding(map[i].v);
            }
            if (cObj.indefinite)
                this.appendUInt8(0xff);
            return;
        }
        if (cObj instanceof CborTag_1.CborTag) {
            this.appendTypeAndLength(Constants_1.MajorType.tag, cObj.tag);
            this.appendCborObjEncoding(cObj.data);
            return;
        }
        if (cObj instanceof CborSimple_1.CborSimple) {
            var simpValue = cObj.simple;
            if (simpValue === false)
                return this.appendUInt8(0xf4); // major type 6 (tag) | 20
            if (simpValue === true)
                return this.appendUInt8(0xf5); // major type 6 (tag) | 21
            if (simpValue === null)
                return this.appendUInt8(0xf6); // major type 6 (tag) | 22
            if (simpValue === undefined)
                return this.appendUInt8(0xf7); // major type 6 (tag) | 23
            if (cObj.numAs === "simple" &&
                simpValue >= 0 && simpValue <= 255 &&
                simpValue === Math.round(simpValue)) {
                this.appendTypeAndLength(Constants_1.MajorType.float_or_simple, simpValue);
                return;
            }
            this.appendUInt8(0xfb); // (MajorType.float_or_simple << 5) | 27 (double precidison float)
            this.appendFloat64(simpValue);
            return;
        }
        throw new BaseCborError_1.BaseCborError("'CborEncoding.appendCborObjEncoding' did not match any possible 'CborObj'");
    };
    return CborEncoding;
}());
/**
 * static class that allows CBOR encoding and decoding
 *
 * >**_NOTE:_** some tags that are not defined in the proper CBOR specification are automaticaly treated as PlutusData
 */
var Cbor = /** @class */ (function () {
    function Cbor() {
    }
    ; // static class, working as namespace
    Cbor.encode = function (cborObj) {
        var encoded = new CborEncoding();
        encoded.appendCborObjEncoding(cborObj);
        return new CborString_1.CborString(encoded.bytes);
    };
    Cbor.parse = function (cbor) {
        return Cbor.parseWithOffset(cbor).parsed;
    };
    Cbor.parseWithOffset = function (cbor) {
        if (typeof cbor === "string")
            cbor = (0, uint8array_utils_1.fromHex)(cbor);
        (0, assert_1.assert)((cbor instanceof Uint8Array) || CborString_1.CborString.isStrictInstance(cbor), "in 'Cbor.parse' expected an instance of 'CborString' or a 'Uint8Array' as input; got: " + cbor);
        var bytes = cbor instanceof CborString_1.CborString ?
            cbor.toBuffer() :
            cbor;
        /**
         * number of bytes red
         * */
        var offset = 0;
        function incrementOffsetBy(l) {
            offset += l;
        }
        function getBytesOfLength(l) {
            if (bytes.length < offset + l)
                throw new errors_1.CborParseError("not enoug bytes; missing at least " +
                    ((offset + l) - bytes.length) + " bytes");
            incrementOffsetBy(l);
            return bytes.slice(offset - l, // offset has been incremented prior reading
            offset);
        }
        function getUInt8() {
            incrementOffsetBy(1);
            return (0, uint8array_utils_1.readUInt8)(bytes, offset - 1 // offset has been incremented prior reading
            );
        }
        ;
        function getUInt16() {
            incrementOffsetBy(2);
            return (0, uint8array_utils_1.readUInt16BE)(bytes, offset - 2 // offset has been incremented prior reading
            );
        }
        ;
        function getUInt32() {
            incrementOffsetBy(4);
            return (0, uint8array_utils_1.readUInt32BE)(bytes, offset - 4 // offset has been incremented prior reading
            );
        }
        ;
        function getUInt64() {
            incrementOffsetBy(8);
            return (0, uint8array_utils_1.readBigUInt64BE)(bytes, offset - 8 // offset has been incremented prior reading
            );
        }
        ;
        function getFloat16() {
            // increments the offset here
            var floatBits = getUInt16();
            var tempArrayBuffer = new ArrayBuffer(4);
            var tempDataView = new DataView(tempArrayBuffer);
            var sign = floatBits & 32768;
            var exponent = floatBits & 31744;
            var fraction = floatBits & 1023;
            if (exponent === 0x7c00)
                exponent = 0xff << 10;
            else if (exponent !== 0)
                exponent += (127 - 15) << 10;
            else if (fraction !== 0)
                return new CborSimple_1.CborSimple((sign !== 0 ? -1 : 1) * fraction * 5.960464477539063e-8, "float");
            tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);
            return new CborSimple_1.CborSimple(tempDataView.getFloat32(0), "float");
        }
        function getFloat32() {
            incrementOffsetBy(4);
            return new CborSimple_1.CborSimple((0, uint8array_utils_1.readFloat32BE)(bytes, offset - 4 // offset has been incremented prior reading
            ), "float");
        }
        function getFloat64() {
            incrementOffsetBy(8);
            return new CborSimple_1.CborSimple((0, uint8array_utils_1.readFloat64BE)(bytes, offset - 8 // offset has been incremented prior reading
            ), "float");
        }
        function incrementIfBreak() {
            if ((0, uint8array_utils_1.readUInt8)(bytes, offset) !== 0xff)
                return false;
            incrementOffsetBy(1);
            return true;
        }
        function getLength(addInfos) {
            if (addInfos < 24)
                return BigInt(addInfos);
            if (addInfos === 24)
                return BigInt(getUInt8());
            if (addInfos === 25)
                return BigInt(getUInt16());
            if (addInfos === 26)
                return BigInt(getUInt32());
            if (addInfos === 27)
                return getUInt64();
            if (addInfos === 31)
                return BigInt(-1); // indefinite length element follows
            throw new BaseCborError_1.BaseCborError("Invalid length encoding while parsing CBOR");
        }
        function getIndefiniteElemLengthOfType(majorType) {
            var headerByte = getUInt8();
            if (headerByte === 0xff) // break indefinite
                return BigInt(-1);
            var elemLength = getLength(headerByte & 31);
            if (elemLength < 0 || (headerByte >> 5 !== majorType))
                throw new BaseCborError_1.BaseCborError("unexpected nested indefinite length element");
            return elemLength;
        }
        function getTextOfLength(l) {
            // increments offset while getting the bytes
            return (0, uint8array_utils_1.toUtf8)(getBytesOfLength(l));
        }
        function parseCborObj() {
            var headerByte = getUInt8();
            var major = headerByte >> 5;
            var addInfos = headerByte & 31;
            if (major === Constants_1.MajorType.float_or_simple) {
                if (addInfos === 25)
                    return getFloat16();
                if (addInfos === 26)
                    return getFloat32();
                if (addInfos === 27)
                    return getFloat64();
            }
            var length = getLength(addInfos);
            if (length < 0 &&
                (major < 2 || major > 6)) {
                throw new BaseCborError_1.BaseCborError("unexpected indefinite length element while parsing CBOR");
            }
            switch (major) {
                case Constants_1.MajorType.unsigned: return new CborUInt_1.CborUInt(length);
                case Constants_1.MajorType.negative: return new CborNegInt_1.CborNegInt(-BigInt(1) - length);
                case Constants_1.MajorType.bytes:
                    if (length < 0) // data in UPLC v1.*.* serializes as indefinite length
                     {
                        var chunks = [];
                        var elementLength = void 0;
                        while ((elementLength = getIndefiniteElemLengthOfType(major)) >= 0) {
                            chunks.push(getBytesOfLength(// increments offset
                            Number(elementLength)));
                        }
                        if (chunks.length === 0)
                            return new CborBytes_1.CborBytes(new Uint8Array([]), []); // empty indefinite length
                        var _a = __read(chunks), fst = _a[0], rest = _a.slice(1);
                        return new CborBytes_1.CborBytes(fst, rest); // indefinte length
                    }
                    // definite length
                    return new CborBytes_1.CborBytes(getBytesOfLength(Number(length)));
                case Constants_1.MajorType.text:
                    if (length < 0) // indefinite length
                     {
                        var str = "";
                        var l = 0;
                        while ((l = Number(getIndefiniteElemLengthOfType(Constants_1.MajorType.text))) >= 0) {
                            str += getTextOfLength(l);
                        }
                        return new CborText_1.CborText(str);
                    }
                    return new CborText_1.CborText(getTextOfLength(Number(length)));
                case Constants_1.MajorType.array:
                    var arrOfCbors = [];
                    if (length < 0) {
                        while (!incrementIfBreak()) {
                            arrOfCbors.push(parseCborObj());
                        }
                    }
                    else {
                        for (var i = 0; i < length; i++) {
                            arrOfCbors.push(parseCborObj());
                        }
                    }
                    return new CborArray_1.CborArray(arrOfCbors, { indefinite: length < 0 });
                case Constants_1.MajorType.map:
                    var entries = [];
                    if (length < 0) {
                        while (!incrementIfBreak()) {
                            entries.push({
                                k: parseCborObj(),
                                v: parseCborObj()
                            });
                        }
                    }
                    else {
                        for (var i = 0; i < length; i++) {
                            entries.push({
                                k: parseCborObj(),
                                v: parseCborObj()
                            });
                        }
                    }
                    return new CborMap_1.CborMap(entries, { indefinite: length < 0 });
                case Constants_1.MajorType.tag: {
                    var l = Number(length);
                    var data = parseCborObj();
                    // https://www.rfc-editor.org/rfc/rfc8949.html#name-bignums
                    if (l === 2 && data instanceof CborBytes_1.CborBytes) {
                        return new CborUInt_1.CborUInt(BigInt("0x" +
                            (0, uint8array_utils_1.toHex)(data.bytes)));
                    }
                    // https://www.rfc-editor.org/rfc/rfc8949.html#name-bignums
                    else if (l === 3 && data instanceof CborBytes_1.CborBytes) {
                        return new CborNegInt_1.CborNegInt(-(BigInt("0x" +
                            (0, uint8array_utils_1.toHex)(data.bytes)) + BigInt(1)));
                    }
                    // else just tag
                    return new CborTag_1.CborTag(l, data);
                }
                case Constants_1.MajorType.float_or_simple:
                    var nLen = Number(length);
                    if (nLen === 20)
                        return new CborSimple_1.CborSimple(false); // 0xf4
                    if (nLen === 21)
                        return new CborSimple_1.CborSimple(true); // 0xf5
                    if (nLen === 22)
                        return new CborSimple_1.CborSimple(null); // 0xf6
                    if (nLen === 23)
                        return new CborSimple_1.CborSimple(undefined); // 0xf7
                    // flaots handled at the beginning of the function
                    // since length isn't required
                    throw new BaseCborError_1.BaseCborError("unrecognized simple value");
                default:
                    throw new BaseCborError_1.BaseCborError("unrecognized majorType: " + major);
            }
        }
        return { parsed: parseCborObj(), offset: offset };
    };
    Cbor.parseLazy = function (cbor) {
        return Cbor.parseLazyWithOffset(cbor).parsed;
    };
    Cbor.parseLazyWithOffset = function (cbor) {
        if (typeof cbor === "string")
            cbor = (0, uint8array_utils_1.fromHex)(cbor);
        (0, assert_1.assert)((cbor instanceof Uint8Array) || CborString_1.CborString.isStrictInstance(cbor), "in 'Cbor.parse' expected an instance of 'CborString' or a 'Uint8Array' as input; got: " + cbor);
        var bytes = cbor instanceof CborString_1.CborString ?
            cbor.toBuffer() :
            cbor;
        /**
         * number of bytes red
         * */
        var offset = 0;
        function incrementOffsetBy(l) {
            offset += l;
        }
        function getBytesOfLength(l) {
            if (bytes.length < offset + l)
                throw new errors_1.CborParseError("not enoug bytes; missing at least " +
                    ((offset + l) - bytes.length) + " bytes");
            incrementOffsetBy(l);
            return bytes.slice(offset - l, // offset has been incremented prior reading
            offset);
        }
        function getUInt8() {
            incrementOffsetBy(1);
            return (0, uint8array_utils_1.readUInt8)(bytes, offset - 1 // offset has been incremented prior reading
            );
        }
        ;
        function getUInt16() {
            incrementOffsetBy(2);
            return (0, uint8array_utils_1.readUInt16BE)(bytes, offset - 2 // offset has been incremented prior reading
            );
        }
        ;
        function getUInt32() {
            incrementOffsetBy(4);
            return (0, uint8array_utils_1.readUInt32BE)(bytes, offset - 4 // offset has been incremented prior reading
            );
        }
        ;
        function getUInt64() {
            incrementOffsetBy(8);
            return (0, uint8array_utils_1.readBigUInt64BE)(bytes, offset - 8 // offset has been incremented prior reading
            );
        }
        ;
        function getFloat16() {
            // increments the offset here
            var floatBits = getUInt16();
            var tempArrayBuffer = new ArrayBuffer(4);
            var tempDataView = new DataView(tempArrayBuffer);
            var sign = floatBits & 32768;
            var exponent = floatBits & 31744;
            var fraction = floatBits & 1023;
            if (exponent === 0x7c00)
                exponent = 0xff << 10;
            else if (exponent !== 0)
                exponent += (127 - 15) << 10;
            else if (fraction !== 0)
                return new CborSimple_1.CborSimple((sign !== 0 ? -1 : 1) * fraction * 5.960464477539063e-8, "float");
            tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);
            return new CborSimple_1.CborSimple(tempDataView.getFloat32(0), "float");
        }
        function getFloat32() {
            incrementOffsetBy(4);
            return new CborSimple_1.CborSimple((0, uint8array_utils_1.readFloat32BE)(bytes, offset - 4 // offset has been incremented prior reading
            ), "float");
        }
        function getFloat64() {
            incrementOffsetBy(8);
            return new CborSimple_1.CborSimple((0, uint8array_utils_1.readFloat64BE)(bytes, offset - 8 // offset has been incremented prior reading
            ), "float");
        }
        function incrementIfBreak() {
            if ((0, uint8array_utils_1.readUInt8)(bytes, offset) !== 0xff)
                return false;
            incrementOffsetBy(1);
            return true;
        }
        function getLength(addInfos) {
            if (addInfos < 24)
                return BigInt(addInfos);
            if (addInfos === 24)
                return BigInt(getUInt8());
            if (addInfos === 25)
                return BigInt(getUInt16());
            if (addInfos === 26)
                return BigInt(getUInt32());
            if (addInfos === 27)
                return getUInt64();
            if (addInfos === 31)
                return BigInt(-1); // indefinite length element follows
            throw new BaseCborError_1.BaseCborError("Invalid length encoding while parsing CBOR");
        }
        function getIndefiniteElemLengthOfType(majorType) {
            var headerByte = getUInt8();
            if (headerByte === 0xff) // break indefinite
                return BigInt(-1);
            var elemLength = getLength(headerByte & 31);
            if (elemLength < 0 || (headerByte >> 5 !== majorType))
                throw new BaseCborError_1.BaseCborError("unexpected nested indefinite length element");
            return elemLength;
        }
        function getTextOfLength(l) {
            // increments offset while getting the bytes
            return (0, uint8array_utils_1.toUtf8)(getBytesOfLength(l));
        }
        function getNextElemBytes() {
            var elemStart = offset;
            var headerByte = getUInt8();
            var major = headerByte >> 5;
            var addInfos = headerByte & 31;
            if (major === Constants_1.MajorType.float_or_simple) {
                if (addInfos === 25)
                    return bytes.slice(elemStart, elemStart + 2);
                if (addInfos === 26)
                    return bytes.slice(elemStart, elemStart + 3);
                if (addInfos === 27)
                    return bytes.slice(elemStart, elemStart + 5);
            }
            var preLenOffset = offset;
            var length = getLength(addInfos);
            var postLenOffset = offset;
            if (length < 0 &&
                (major < 2 || major > 6)) {
                throw new BaseCborError_1.BaseCborError("unexpected indefinite length element while parsing CBOR");
            }
            switch (major) {
                case Constants_1.MajorType.unsigned: return bytes.slice(elemStart, postLenOffset);
                case Constants_1.MajorType.negative: return bytes.slice(elemStart, postLenOffset);
                case Constants_1.MajorType.bytes:
                    if (length < 0) // data in UPLC v1.*.* serializes as indefinite length
                     {
                        var elementLength = void 0;
                        while ((elementLength = getIndefiniteElemLengthOfType(major)) >= 0) {
                            // this operation is done when calling
                            // `getBytesOfLength( Number( elementLength )`
                            /// in the non-lazy verision
                            incrementOffsetBy(Number(elementLength));
                        }
                        return bytes.slice(elemStart, offset);
                    }
                    // definite length
                    // void getBytesOfLength( Number( length ) )
                    incrementOffsetBy(Number(length)); // this is the only part we need of the above function
                    return bytes.slice(elemStart, offset);
                case Constants_1.MajorType.text:
                    if (length < 0) // indefinite length
                     {
                        var str = "";
                        var l = 0;
                        while ((l = Number(getIndefiniteElemLengthOfType(Constants_1.MajorType.text))) >= 0) {
                            // str += getTextOfLength( l );
                            incrementOffsetBy(l);
                        }
                        return bytes.slice(elemStart, offset);
                    }
                    // void getTextOfLength( Number( length ) );
                    incrementOffsetBy(Number(length)); // this is the only part we need of the above function
                    return bytes.slice(elemStart, offset);
                case Constants_1.MajorType.array:
                    if (length < 0) {
                        while (!incrementIfBreak()) {
                            void getNextElemBytes();
                        }
                    }
                    else {
                        for (var i = 0; i < length; i++) {
                            void getNextElemBytes();
                        }
                    }
                    return bytes.slice(elemStart, offset);
                case Constants_1.MajorType.map:
                    if (length < 0) {
                        while (!incrementIfBreak()) {
                            void getNextElemBytes();
                            void getNextElemBytes();
                        }
                    }
                    else {
                        for (var i = 0; i < length; i++) {
                            void getNextElemBytes();
                            void getNextElemBytes();
                        }
                    }
                    return bytes.slice(elemStart, offset);
                case Constants_1.MajorType.tag:
                    void getNextElemBytes();
                    return bytes.slice(elemStart, offset);
                case Constants_1.MajorType.float_or_simple:
                    var nLen = Number(length);
                    if (nLen === 20)
                        return bytes.slice(elemStart, offset); // 0xf4
                    if (nLen === 21)
                        return bytes.slice(elemStart, offset); // 0xf5
                    if (nLen === 22)
                        return bytes.slice(elemStart, offset); // 0xf6
                    if (nLen === 23)
                        return bytes.slice(elemStart, offset); // 0xf7
                    // flaots handled at the beginning of the function
                    // since length isn't required
                    throw new BaseCborError_1.BaseCborError("unrecognized simple value");
                default:
                    throw new BaseCborError_1.BaseCborError("unrecognized majorType: " + major);
            }
        }
        function parseCborObj() {
            var headerByte = getUInt8();
            var major = headerByte >> 5;
            var addInfos = headerByte & 31;
            if (major === Constants_1.MajorType.float_or_simple) {
                if (addInfos === 25)
                    return getFloat16();
                if (addInfos === 26)
                    return getFloat32();
                if (addInfos === 27)
                    return getFloat64();
            }
            var length = getLength(addInfos);
            if (length < 0 &&
                (major < 2 || major > 6)) {
                throw new BaseCborError_1.BaseCborError("unexpected indefinite length element while parsing CBOR");
            }
            switch (major) {
                case Constants_1.MajorType.unsigned: return new CborUInt_1.CborUInt(length);
                case Constants_1.MajorType.negative: return new CborNegInt_1.CborNegInt(-BigInt(1) - length);
                case Constants_1.MajorType.bytes:
                    if (length < 0) // data in UPLC v1.*.* serializes as indefinite length
                     {
                        var chunks = [];
                        var fullUint8ArrayLength = 0;
                        var elementLength = void 0;
                        while ((elementLength = getIndefiniteElemLengthOfType(major)) >= 0) {
                            fullUint8ArrayLength += Number(elementLength);
                            chunks.push(getBytesOfLength(// increments offset
                            Number(elementLength)));
                        }
                        var fullUint8Array = new Uint8Array(fullUint8ArrayLength);
                        var fullUint8ArrayOffset = 0;
                        for (var i = 0; i < chunks.length; ++i) {
                            fullUint8Array.set(chunks[i], fullUint8ArrayOffset);
                            fullUint8ArrayOffset += chunks[i].length;
                        }
                        return new CborBytes_1.CborBytes(Uint8Array.from(fullUint8Array));
                    }
                    // definite length
                    return new CborBytes_1.CborBytes(getBytesOfLength(Number(length)));
                case Constants_1.MajorType.text:
                    if (length < 0) // indefinite length
                     {
                        var str = "";
                        var l = 0;
                        while ((l = Number(getIndefiniteElemLengthOfType(Constants_1.MajorType.text))) >= 0) {
                            str += getTextOfLength(l);
                        }
                        return new CborText_1.CborText(str);
                    }
                    return new CborText_1.CborText(getTextOfLength(Number(length)));
                case Constants_1.MajorType.array:
                    if (length < 0) {
                        var arr = [];
                        while (!incrementIfBreak()) {
                            arr.push(getNextElemBytes());
                        }
                        return new LazyCborArray_1.LazyCborArray(arr, { indefinite: true });
                    }
                    else {
                        var arr = new Array(Number(length));
                        for (var i = 0; i < length; i++) {
                            arr[i] = getNextElemBytes();
                        }
                        return new LazyCborArray_1.LazyCborArray(arr, { indefinite: false });
                    }
                case Constants_1.MajorType.map:
                    if (length < 0) {
                        var entries = [];
                        while (!incrementIfBreak()) {
                            entries.push({
                                k: getNextElemBytes(),
                                v: getNextElemBytes()
                            });
                        }
                        return new LazyCborMap_1.LazyCborMap(entries, { indefinite: true });
                    }
                    else {
                        var entries = new Array(Number(length));
                        for (var i = 0; i < length; i++) {
                            entries[i] = {
                                k: getNextElemBytes(),
                                v: getNextElemBytes()
                            };
                        }
                        return new LazyCborMap_1.LazyCborMap(entries, { indefinite: true });
                    }
                case Constants_1.MajorType.tag:
                    return new LazyCborTag_1.LazyCborTag(Number(length), parseCborObj());
                case Constants_1.MajorType.float_or_simple:
                    var nLen = Number(length);
                    if (nLen === 20)
                        return new CborSimple_1.CborSimple(false); // 0xf4
                    if (nLen === 21)
                        return new CborSimple_1.CborSimple(true); // 0xf5
                    if (nLen === 22)
                        return new CborSimple_1.CborSimple(null); // 0xf6
                    if (nLen === 23)
                        return new CborSimple_1.CborSimple(undefined); // 0xf7
                    // flaots handled at the beginning of the function
                    // since length isn't required
                    throw new BaseCborError_1.BaseCborError("unrecognized simple value");
                default:
                    throw new BaseCborError_1.BaseCborError("unrecognized majorType: " + major);
            }
        }
        return { parsed: parseCborObj(), offset: offset };
    };
    return Cbor;
}());
exports.Cbor = Cbor;
