/**
 * @static
 */
export default class BigIntUtils {
    private constructor();
    /**
     * same as ```Math.abs``` but for bigints
     */
    static abs(n: bigint): bigint;
    /**
     * @returns {bigint} a ```bigint``` between ```0``` and ```Number.MAX_SAFE_INTEGER``` so that is safe to convert to Number for whatever reason
     */
    static random(): bigint;
    static max(...nums: bigint[]): bigint;
    static min(...nums: bigint[]): bigint;
    static log2(num: bigint): bigint;
    /**
     * uses the bytes of the buffer to construct a BigInteger
     * > **IMPORTANT** the bytes are considered in Little Endian order; use ```BigIntUtils.fromBuffer``` for Big Endian
     */
    static fromBufferLE(buffer: Uint8Array): bigint;
    /**
     * converts a Uint8Array to a ```bigint```
     * Big-Endian default
     */
    static fromBuffer(buffer: Uint8Array): bigint;
    /**
     * converts a ```bigint``` to a ```Uint8Array``` of length ```nBytes``` given as second argument
     *
     * if ```nBytes``` is not specified the Uint8Array takes only the bytes needed
     * @param bigint
     * @param nBytes
     * @returns
     */
    static toBuffer(bigint: bigint, nBytes?: number | undefined): Uint8Array;
}
