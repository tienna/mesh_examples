/**
 * @deprecated not sure it has ever made sense to have it
 * @returns a number in range ```[ 0 , 255 ]``` ( ```[ 0b0000_0000, 0b1111_1111 ]``` ) based on the first byte
 */
export declare function getFirstByte(bits: bigint): number;
/**
 * @deprecated use ```andMaskOfLength``` instead
 */
export declare function andMaskOfLengthInt(n: number): bigint;
/**
 * returns a ```bigint``` of that as the last ```n``` bits setted to ones;
 *
 * example
 * ```ts
 * getMaskOfLength( 7 ) === Bigint( 0b0111_1111 ); // true
 * ```
 */
export declare function andMaskOfLength(n: bigint): bigint;
/**
 * @deprecated use ```getNLastBits``` instead
 */
export declare function getNLastBitsInt(fromNuber: number, nBits: number): number;
export declare function getNLastBits(fromNuber: bigint, nBits: bigint): bigint;
/**
 * @returns the number of bits from the first setted to ```1``` on the left up until the end
 */
export declare function getNOfUsedBits(bits: bigint): number;
export declare function minBytesRequired(bigint: bigint): number;
