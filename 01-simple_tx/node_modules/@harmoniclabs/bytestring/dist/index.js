"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ByteString = void 0;
var uint8array_utils_1 = require("@harmoniclabs/uint8array-utils");
function isHex(anyString) {
    // always think in javasript
    if (typeof anyString !== "string")
        return false;
    var str = anyString.toLowerCase();
    var validHex = "987654321abcdef0";
    for (var i = 0; i < str.length; i++) {
        if (!validHex.includes(str[i]))
            return false;
    }
    // if false has not been returned yet, then it must be a valid hex
    return true;
}
function assert(condition, errorMessage, addInfos) {
    var args = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        args[_i - 3] = arguments[_i];
    }
    if (condition)
        return;
    args.length > 0 && console.error.apply(console, __spreadArray([], __read(args), false));
    addInfos && console.error(addInfos);
    if (errorMessage instanceof Error) {
        throw errorMessage;
    }
    ;
    throw new Error(errorMessage);
}
var ByteString = /** @class */ (function () {
    function ByteString(bs) {
        if (typeof bs === "string") {
            // remove spaces
            bs = bs.trim().split(" ").join("");
            assert(isHex(bs), "invalid hex input while constructing a ByteString: " + bs);
            // even length
            bs = (0, uint8array_utils_1.fromHex)((bs.length % 2) === 1 ? "0" + bs : bs);
        }
        if (!(bs instanceof Uint8Array))
            bs = bs.toBuffer();
        assert((0, uint8array_utils_1.isUint8Array)(bs), "invalid Uint8Array input while constructing a ByteString");
        this._bytes = bs;
    }
    ByteString.isStrictInstance = function (bs) {
        return Object.getPrototypeOf(bs) === ByteString.prototype;
    };
    Object.defineProperty(ByteString.prototype, "asString", {
        /**
         * @deprecated use `toString()` instead
         */
        get: function () {
            return (0, uint8array_utils_1.toHex)(this._bytes);
        },
        enumerable: false,
        configurable: true
    });
    ByteString.prototype.toString = function () {
        return (0, uint8array_utils_1.toHex)(this._bytes);
    };
    Object.defineProperty(ByteString.prototype, "asBytes", {
        /**
         * @deprecated use `toBuffer()` instead
         */
        get: function () {
            return this._bytes.slice();
        },
        enumerable: false,
        configurable: true
    });
    ByteString.prototype.toBuffer = function () {
        return this._bytes.slice();
    };
    ByteString.prototype.clone = function () {
        return new ByteString(this._bytes.slice());
    };
    ByteString.fromAscii = function (asciiStr) {
        return new ByteString((0, uint8array_utils_1.fromAscii)(asciiStr));
    };
    ByteString.toAscii = function (bStr) {
        return (0, uint8array_utils_1.toAscii)(bStr.toBuffer());
    };
    ByteString.isValidHexValue = function (str) {
        return (isHex(str) &&
            str.length % 2 === 0);
    };
    return ByteString;
}());
exports.ByteString = ByteString;
