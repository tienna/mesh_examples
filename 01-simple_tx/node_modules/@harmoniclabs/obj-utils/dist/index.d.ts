export interface IObjectUtils {
    isNotArray: () => boolean;
    isObject: () => boolean;
    hasUniqueKey: (key?: string) => boolean;
    hasNKeys: (n: number) => boolean;
    containsKeys: (...keys: string[]) => boolean;
}
export declare function isNotArray(obj: object): boolean;
export declare function isObject(obj: any): boolean;
export declare function hasUniqueKey(obj: object, key?: (string | undefined)): boolean;
export declare function hasNkeys(obj: object, n: number): boolean;
export declare function containsKeys(obj: object, ...keys: string[]): boolean;
export declare function has_n_determined_keys<Keys extends string[]>(obj: object, n: number, ...keys: Keys): boolean;
export declare const hasOwn: <Obj, K extends (string | number | symbol)>(obj: Obj, propName: K) => obj is (Obj & Record<K, any>);
export declare function isSerializable(obj: object): boolean;
export declare function deepEqual(a: any, b: any): boolean;
export declare function jsonClone<T extends any>(obj: T): T;
export declare function deepClone<T extends any = any>(obj: T): T;
export declare function freezeAll<T>(something: T): Readonly<T>;
/**
 *
 * @param obj {object} to define the property on
 * @param name {PropertyKey} name of the property
 * @param value {any} value of the property
 * @param accessLevel writable / enumerable / configurable
 *
 * enumerable   = 0b010, if ```false``` is not showed
 * configurable = 0b100, if ```false``` cannot be deleted or changed
 *
 * 0 -> none // hidden object-specific descriptor
 *
 * 1 -> writable only // hidden, modifiable, non deletable
 *
 * 2 -> enumerable only // showed object-specific descriptor
 *
 * 3 -> writable AND enumerable // non deletable
 *
 * 4 -> configurable only // hidden object-specific deleteable descriptor
 *
 * 5 -> configurable AND writable // hidden, modifiable, deletable
 *
 * 6 -> configurable AND enumerable // showed, non modifiable, deletable
 *
 * 7 -> all // showed, modifiable, deletable
 *
 */
export declare function defineProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT, accessLevel?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7): ObjT & Record<PropKey, ValT>;
export declare function definePropertyIfNotPresent<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, descriptor: Partial<{
    get: () => ValT;
    set: (v: ValT) => void;
    value: ValT;
    writable: boolean;
    enumerable: boolean;
    configurable: boolean;
}>): ObjT & Record<PropKey, ValT>;
export declare function defineReadOnlyHiddenProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT;
export declare function defineGetterOnlyProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, valueGetter: () => ValT): ObjT;
export declare function defineWritableHiddenProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, ValT>;
/**
 * 2 -> enumerable only
 *
 * property is showed and can be accessed trough indexing
 *
 * cannot be modified
 *
 * cannot be deleted
 */
export declare function defineReadOnlyProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, ValT>;
export declare function defineNonDeletableNormalProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, any>;
export declare function defineDeletableDescriptor<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, ValT>;
export declare function defineHiddenNormalProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, ValT>;
export declare function defineFixedDeletableProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, ValT>;
export declare function defineNormalProperty<ObjT extends object, PropKey extends keyof any, ValT>(obj: ObjT, name: PropKey, value: ValT): ObjT & Record<PropKey, ValT>;
