"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataMap = void 0;
var Data_1 = require("./Data.js");
var DataPair_1 = require("./DataPair.js");
var assert_1 = require("./utils/assert.js");
var roDescr_1 = require("./utils/roDescr.js");
var DataMap = /** @class */ (function () {
    function DataMap(map) {
        (0, assert_1.assert)(Array.isArray(map) &&
            map.every(function (entry) {
                return entry instanceof DataPair_1.DataPair &&
                    (0, Data_1.isData)(entry.fst) && (0, Data_1.isData)(entry.snd);
            }), "invalid map passed to 'DataPair' constructor");
        Object.defineProperties(this, {
            map: __assign({ value: map }, roDescr_1.roDescr)
        });
    }
    DataMap.prototype.clone = function () {
        return new DataMap(this.map.map(function (pair) { return pair.clone(); }));
    };
    DataMap.prototype.toJson = function () {
        return {
            map: this.map.map(function (_a) {
                var fst = _a.fst, snd = _a.snd;
                return ({
                    k: fst.toJson(),
                    v: snd.toJson()
                });
            })
        };
    };
    DataMap.prototype.toString = function () {
        return "Map [".concat(this.map.map(function (dataPair) { return dataPair.toString(); }).join(","), "]");
    };
    return DataMap;
}());
exports.DataMap = DataMap;
