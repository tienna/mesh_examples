"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataFromJson = exports.cloneData = exports.eqData = exports.isData = void 0;
var DataB_1 = require("./DataB.js");
var DataConstr_1 = require("./DataConstr.js");
var DataI_1 = require("./DataI.js");
var DataList_1 = require("./DataList.js");
var DataMap_1 = require("./DataMap.js");
var DataPair_1 = require("./DataPair.js");
function isSomething(something) {
    return something !== null && something !== undefined;
}
function isData(something) {
    if (!isSomething(something))
        return false;
    var proto = Object.getPrototypeOf(something);
    return (proto === DataConstr_1.DataConstr.prototype ||
        proto === DataMap_1.DataMap.prototype ||
        proto === DataList_1.DataList.prototype ||
        proto === DataI_1.DataI.prototype ||
        proto === DataB_1.DataB.prototype);
}
exports.isData = isData;
function eqData(a, b) {
    if (!(isSomething(a) &&
        isSomething(b)))
        return false;
    var aProto = Object.getPrototypeOf(a);
    var bProto = Object.getPrototypeOf(b);
    if (aProto !== bProto)
        return false;
    if (aProto === DataConstr_1.DataConstr.prototype) {
        try {
            return (a.constr === b.constr &&
                a.fields.length === b.fields.length &&
                a.fields.every(function (aField, idx) { return eqData(aField, b.fields[idx]); }));
        }
        catch (e) {
            return false;
        }
    }
    if (aProto === DataMap_1.DataMap.prototype) {
        var aMap = a.map;
        var bMap_1 = b.map;
        return (aMap.length === bMap_1.length &&
            aMap.every(function (entry, idx) {
                var bEntry = bMap_1[idx];
                return (eqData(entry.fst, bEntry.fst) &&
                    eqData(entry.snd, bEntry.snd));
            }));
    }
    if (aProto === DataList_1.DataList.prototype) {
        return (a.list.every(function (elem, idx) { return eqData(elem, b.list[idx]); }));
    }
    if (aProto === DataI_1.DataI.prototype) {
        return (a.int === b.int);
    }
    if (aProto === DataB_1.DataB.prototype) {
        return (a.bytes.toString() === b.bytes.toString());
    }
    return false;
}
exports.eqData = eqData;
function cloneData(data) {
    if (!isData(data))
        throw new Error("invalid data while cloning");
    return data.clone();
}
exports.cloneData = cloneData;
/**
 * all data instances (from any version) will have a `toJson` method
 * this function will get back the data of this version if needed
**/
function dataFromJson(json) {
    if (typeof json !== "object")
        throw new TypeError("unexpected input");
    var keys = Object.keys(json);
    if (keys.length <= 0)
        throw new TypeError("unexpected input");
    var k = keys[0];
    if (k === "int")
        return new DataI_1.DataI(json[k]);
    if (k === "bytes")
        return new DataB_1.DataB(json[k]);
    if (k === "list")
        return new DataList_1.DataList(json[k].map(dataFromJson));
    if (k === "map") {
        var jsonMap = json[k];
        return new DataMap_1.DataMap(jsonMap.map(function (_a) {
            var k = _a.k, v = _a.v;
            return new DataPair_1.DataPair(dataFromJson(k), dataFromJson(v));
        }));
    }
    if (keys.includes("constr"))
        return new DataConstr_1.DataConstr(json.constr, json.fields.map(dataFromJson));
    throw new Error("unknown json format");
}
exports.dataFromJson = dataFromJson;
