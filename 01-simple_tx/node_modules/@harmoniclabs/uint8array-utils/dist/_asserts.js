"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkBounds = exports.assertInBound = exports.assertNum = exports.asserValidOffset = void 0;
var errors = __importStar(require("./errors.js"));
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function asserValidOffset(offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0)
        throw new RangeError('offset is not uint');
    if (offset + ext > length)
        throw new RangeError('Trying to access beyond buffer length');
}
exports.asserValidOffset = asserValidOffset;
function assertNum(n) {
    if (typeof n !== "number")
        throw new Error("expected a number");
}
exports.assertNum = assertNum;
function assertInBound(value, length, type) {
    if (Math.floor(value) !== value) {
        assertNum(value);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) {
        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', ">= ".concat(type ? 1 : 0, " and <= ").concat(length), value);
}
exports.assertInBound = assertInBound;
function checkBounds(buf, offset, byteLength) {
    assertNum(offset);
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
        assertInBound(offset, buf.length - (byteLength + 1));
    }
}
exports.checkBounds = checkBounds;
