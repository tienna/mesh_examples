"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERR_OUT_OF_RANGE = exports.ERR_INVALID_ARG_TYPE = exports.ERR_BUFFER_OUT_OF_BOUNDS = void 0;
function addNumericalSeparator(val) {
    var res = '';
    var i = val.length;
    var start = val[0] === '-' ? 1 : 0;
    for (; i >= start + 4; i -= 3) {
        res = "_".concat(val.slice(i - 3, i)).concat(res);
    }
    return "".concat(val.slice(0, i)).concat(res);
}
function E(sym, getMessage, Base) {
    return /** @class */ (function (_super) {
        __extends(Uint8ArrayError, _super);
        function Uint8ArrayError() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, 'message', {
                value: getMessage.apply(_this, args),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            _this.name = "".concat(_this.name, " [").concat(sym, "]");
            // Access the stack to generate the error message including the error code
            // from the name.
            _this.stack; // eslint-disable-line no-unused-expressions
            return _this;
        }
        Object.defineProperty(Uint8ArrayError.prototype, "code", {
            get: function () {
                return sym;
            },
            set: function (value) {
                Object.defineProperty(this, 'code', {
                    configurable: true,
                    enumerable: true,
                    value: value,
                    writable: true
                });
            },
            enumerable: false,
            configurable: true
        });
        Uint8ArrayError.prototype.toString = function () {
            return "".concat(this.name, " [").concat(sym, "]: ").concat(this.message);
        };
        return Uint8ArrayError;
    }(Base));
}
exports.ERR_BUFFER_OUT_OF_BOUNDS = E('ERR_BUFFER_OUT_OF_BOUNDS', function (name) {
    if (name) {
        return "".concat(name, " is outside of buffer bounds");
    }
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
exports.ERR_INVALID_ARG_TYPE = E('ERR_INVALID_ARG_TYPE', function (name, actual) {
    return "The \"".concat(name, "\" argument must be of type number. Received type ").concat(typeof actual);
}, TypeError);
exports.ERR_OUT_OF_RANGE = E('ERR_OUT_OF_RANGE', function (str, range, input) {
    var msg = "The value of \"".concat(str, "\" is out of range.");
    var received = input;
    if (Number.isInteger(input) && Math.abs(input) > Math.pow(2, 32)) {
        received = addNumericalSeparator(String(input));
    }
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > (BigInt(1) << BigInt(32)) || input < -(BigInt(1) << BigInt(32))) {
            received = addNumericalSeparator(received);
        }
        received += 'n';
    }
    msg += " It must be ".concat(range, ". Received ").concat(received);
    return msg;
}, RangeError);
