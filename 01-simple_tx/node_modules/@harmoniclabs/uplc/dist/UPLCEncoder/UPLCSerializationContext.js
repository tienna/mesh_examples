"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UPLCSerializationContex = void 0;
var UPLCVersion_1 = require("../UPLCProgram/UPLCVersion.js");
function isV3Friendly(ctx) {
    // ^1.1.0 || >= 2.*.*
    return ctx.version.major === BigInt(1) ?
        ctx.version.minor >= 1 :
        ctx.version.major > 1;
}
var UPLCSerializationContex = /** @class */ (function () {
    function UPLCSerializationContex(rawCtx) {
        this._rawCtx = __assign({ currLength: 0, version: {
                major: BigInt(1),
                minor: BigInt(1),
                patch: BigInt(0)
            } }, rawCtx);
        this._is_v3_friendly = isV3Friendly(this._rawCtx);
    }
    Object.defineProperty(UPLCSerializationContex.prototype, "is_v3_friendly", {
        get: function () {
            return this._is_v3_friendly;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UPLCSerializationContex.prototype, "currLength", {
        get: function () {
            return this._rawCtx.currLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UPLCSerializationContex.prototype, "version", {
        get: function () {
            return new UPLCVersion_1.UPLCVersion(this._rawCtx.version.major, this._rawCtx.version.minor, this._rawCtx.version.patch);
        },
        enumerable: false,
        configurable: true
    });
    UPLCSerializationContex.prototype.updateVersion = function (uplcVersion) {
        this._rawCtx.version = {
            major: uplcVersion.major,
            minor: uplcVersion.minor,
            patch: uplcVersion.patch,
        };
        this._is_v3_friendly = isV3Friendly(this._rawCtx);
    };
    UPLCSerializationContex.prototype.incrementLengthBy = function (n) {
        this._rawCtx.currLength = this._rawCtx.currLength + n;
    };
    return UPLCSerializationContex;
}());
exports.UPLCSerializationContex = UPLCSerializationContex;
