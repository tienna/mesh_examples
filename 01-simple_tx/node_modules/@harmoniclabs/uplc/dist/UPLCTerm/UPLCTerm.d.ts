import { UPLCVar } from "../UPLCTerms/UPLCVar/index.js";
import { Delay } from "../UPLCTerms/Delay.js";
import { Lambda } from "../UPLCTerms/Lambda.js";
import { Application } from "../UPLCTerms/Application.js";
import { UPLCConst } from "../UPLCTerms/UPLCConst/UPLCConst.js";
import { Force } from "../UPLCTerms/Force.js";
import { ErrorUPLC } from "../UPLCTerms/ErrorUPLC.js";
import { Builtin } from "../UPLCTerms/Builtin/Builtin.js";
import { ConstType } from "../UPLCTerms/UPLCConst/ConstType/index.js";
import { ConstValue } from "../UPLCTerms/UPLCConst/ConstValue/index.js";
import { Constr } from "../UPLCTerms/Constr.js";
import { Case } from "../UPLCTerms/Case.js";
export type UPLCTerm = UPLCVar | Delay | Lambda | Application | UPLCConst | Force | ErrorUPLC | Builtin | Constr | Case;
/**
 * @deprecated alias for `UPLCTerm` use that instead
 */
export type PureUPLCTerm = UPLCTerm;
/**
 * **_O(1)_**
 * @param {UPLCTerm} t ```UPLCTerm``` to check
 * @returns {boolean} ```true``` if the argument is instance of any of the ```UPLCTerm``` constructors, ```false``` otherwise
 */
export declare function isUPLCTerm(t: object): t is UPLCTerm;
/**
 * **_O(n)_**
 * @param {UPLCTerm} t ```UPLCTerm``` to check
 * @returns {boolean} ```true``` if the AST contains only plutus-core terms, ```false``` otherwise
 */
export declare function isPureUPLCTerm(t: UPLCTerm): t is PureUPLCTerm;
export declare function isClosedTerm(term: UPLCTerm): boolean;
export declare function showUPLCConstValue(v: ConstValue): string;
export declare function showConstType(t: ConstType): string;
export declare function showUPLC(term: UPLCTerm): string;
export declare function prettyUPLC(term: UPLCTerm, _indent?: number): string;
/**
 *
 * @param {number | bigint} varDeBruijn ```number | bigint```; debruijn level (at the term level) of the variable to search for
 * @param {UPLCTerm} t ```UPLCTerm``` to search in
 * @returns {boolean} ```true``` if the variable has **at least** 1 or more references; ```false``` otherwise
 */
export declare function hasAnyRefsInTerm(varDeBruijn: number | bigint, t: UPLCTerm): boolean;
/**
 *
 * @param {number | bigint} varDeBruijn ```number | bigint```; debruijn level (at the term level) of the variable to search for
 * @param {UPLCTerm} term ```UPLCTerm``` to search in
 * @returns {boolean} ```true``` if the variable has 2 or more references; ```false``` otherwise
 */
export declare function hasMultipleRefsInTerm(varDeBruijn: number | bigint, t: Readonly<UPLCTerm>): boolean;
/**
 *
 * @param {number | bigint} varDeBruijn ```number | bigint```; debruijn level (at the term level) of the variable to search for
 * @param {UPLCTerm} term ```UPLCTerm``` to search in
 * @returns {number} number of references to the variable
 */
export declare function getUPLCVarRefsInTerm(term: UPLCTerm, varDeBruijn?: number | bigint): number;
export declare function eqUPLCTerm(a: UPLCTerm, b: UPLCTerm): boolean;
