"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUPLCForce = exports.Force = exports.isForceableTerm = void 0;
var UPLCTerm_1 = require("../UPLCTerm/UPLCTerm.js");
var Delay_1 = require("./Delay.js");
var UPLCVar_1 = require("./UPLCVar/index.js");
var Lambda_1 = require("./Lambda.js");
var Application_1 = require("./Application.js");
var UPLCConst_1 = require("./UPLCConst/UPLCConst.js");
var ErrorUPLC_1 = require("./ErrorUPLC.js");
var Builtin_1 = require("./Builtin/Builtin.js");
var bitstream_1 = require("@harmoniclabs/bitstream");
function isForceableTerm(term) {
    if (!(0, UPLCTerm_1.isUPLCTerm)(term))
        return false;
    if (term instanceof UPLCVar_1.UPLCVar)
        return true;
    if (term instanceof Delay_1.Delay)
        return true;
    if (term instanceof Lambda_1.Lambda)
        return false;
    // needs evaluation
    if (term instanceof Application_1.Application)
        return true;
    if (term instanceof UPLCConst_1.UPLCConst)
        return false;
    // needs evaluation
    if (term instanceof Force)
        return true;
    if (term instanceof ErrorUPLC_1.ErrorUPLC)
        return false;
    // builtins that do require forces are handled in UPLC compilation
    // applied builtins are handled in the Applicaiton case
    if (term instanceof Builtin_1.Builtin)
        return false;
    return false;
}
exports.isForceableTerm = isForceableTerm;
var Force = /** @class */ (function () {
    function Force(term) {
        //JsRuntime.assert(
        //    isForceableTerm( term ),
        //    "while constructing 'Force'; UPLCTerm is not Forceable"
        //);
        this.termToForce = term;
    }
    Object.defineProperty(Force, "UPLCTag", {
        get: function () {
            return bitstream_1.BitStream.fromBinStr("0101");
        },
        enumerable: false,
        configurable: true
    });
    Force.prototype.clone = function () {
        return new Force(this.termToForce.clone());
    };
    return Force;
}());
exports.Force = Force;
function isUPLCForce(any) {
    return Object.getPrototypeOf(any) === Force.prototype;
}
exports.isUPLCForce = isUPLCForce;
