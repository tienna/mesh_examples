"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Builtin = void 0;
/**
 * # 5 Built in types, functions, and values
 *
 * Plutus Core comes with a predefined set of built-in types and functions which will be useful
 * for blockchain applications.
 *
 * The set of built-ins is fixed, although in future we may provide a
 * framework to allow customisation for specialised blockchains.
 *
 * There are four basic types: unit, bool, integer, and bytestring (and strings only for debugging purposes)
 *
 * These types are given in Figure 13:
 *
 * for example (con integer) is the type of signed integers.
 *
 * We provide standard arithmetic and comparison operations for integers and a number of list-like functions for bytestrings.
 *
 * The details are given in Figure 14, using a number of abbreviations given in Figure 12.
 *
 * Note the following:
 *
 *  •   Some of the entries in Figure 14 contain success conditions. If a success condition is violated
 *      then the function immediately returns (error).
 *
 *  •   Every built-in function returns either a value or the term (error).
 *
 *  •   The ifThenElse operation is polymorphic and must be instantiated with the type of its
 *      branches before being applied: see the example below.
 *
 *  •   We provide two versions of the division and remainder operations for integers. These differ
 *      in their treatment of negative arguments.
 */
var bitstream_1 = require("@harmoniclabs/bitstream");
var UPLCBuiltinTag_1 = require("./UPLCBuiltinTag.js");
var assert_1 = require("../../utils/assert.js");
var Builtin = /** @class */ (function () {
    function Builtin(tag) {
        (0, assert_1.assert)((0, UPLCBuiltinTag_1.isUPLCBuiltinTag)(tag), "cannot instatinitate a 'Builtin' using tag: " + tag.toString());
        this._tag = tag;
    }
    Object.defineProperty(Builtin, "UPLCTag", {
        get: function () {
            return bitstream_1.BitStream.fromBinStr("0111");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin.prototype, "tag", {
        get: function () {
            return this._tag;
        },
        enumerable: false,
        configurable: true
    });
    Builtin.prototype.clone = function () {
        return new Builtin(this.tag);
    };
    Object.defineProperty(Builtin, "addInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.addInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "subtractInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.subtractInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "multiplyInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.multiplyInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "divideInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.divideInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "quotientInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.quotientInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "remainderInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.remainderInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "modInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.modInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "equalsInteger", {
        // integers comparison operaitons
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.equalsInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "lessThanInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.lessThanInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "lessThanEqualInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.lessThanEqualInteger); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "appendByteString", {
        // bytestring operations
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.appendByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "consByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.consByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "sliceByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.sliceByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "lengthOfByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.lengthOfByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "indexByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.indexByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "equalsByteString", {
        // bytestring comparison operations
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.equalsByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "lessThanByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.lessThanByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "lessThanEqualsByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.lessThanEqualsByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "sha2_256", {
        // hashes
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.sha2_256); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "sha3_256", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.sha3_256); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "blake2b_256", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.blake2b_256); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "verifyEd25519Signature", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.verifyEd25519Signature); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "appendString", {
        // string operations
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.appendString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "equalsString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.equalsString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "encodeUtf8", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.encodeUtf8); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "decodeUtf8", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.decodeUtf8); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "ifThenElse", {
        // control flow
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.ifThenElse); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "chooseUnit", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.chooseUnit); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "trace", {
        // tracing
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.trace); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "fstPair", {
        // data
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.fstPair); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "sndPair", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.sndPair); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "chooseList", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.chooseList); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "mkCons", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.mkCons); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "headList", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.headList); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "tailList", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.tailList); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "nullList", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.nullList); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "chooseData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.chooseData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "constrData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.constrData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "mapData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.mapData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "listData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.listData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "iData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.iData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "unConstrData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.unConstrData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "unMapData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.unMapData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "unListData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.unListData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "unIData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.unIData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "unBData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.unBData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "equalsData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.equalsData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "mkPairData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.mkPairData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "mkNilData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.mkNilData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "mkNilPairData", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.mkNilPairData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "serialiseData", {
        // Vasil (Plutus V2: Builtin)
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.serialiseData); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "verifyEcdsaSecp256k1Signature", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.verifyEcdsaSecp256k1Signature); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "verifySchnorrSecp256k1Signature", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.verifySchnorrSecp256k1Signature); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_add", {
        // PlutusV3
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_add); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_neg", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_neg); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_scalarMul", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_scalarMul); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_equal", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_equal); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_hashToGroup", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_hashToGroup); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_compress", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_compress); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G1_uncompress", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G1_uncompress); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_add", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_add); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_neg", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_neg); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_scalarMul", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_scalarMul); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_equal", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_equal); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_hashToGroup", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_hashToGroup); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_compress", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_compress); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_G2_uncompress", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_G2_uncompress); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_millerLoop", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_millerLoop); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_mulMlResult", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_mulMlResult); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "bls12_381_finalVerify", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.bls12_381_finalVerify); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "keccak_256", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.keccak_256); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "blake2b_224", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.blake2b_224); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "integerToByteString", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.integerToByteString); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Builtin, "byteStringToInteger", {
        get: function () { return new Builtin(UPLCBuiltinTag_1.UPLCBuiltinTag.byteStringToInteger); },
        enumerable: false,
        configurable: true
    });
    return Builtin;
}());
exports.Builtin = Builtin;
