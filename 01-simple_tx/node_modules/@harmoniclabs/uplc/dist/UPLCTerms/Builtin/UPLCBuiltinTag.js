"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.builtinTagFromString = exports.builtinTagToString = exports.isV2Supported = exports.isV1Supported = exports.getNRequiredForces = exports.isUPLCBuiltinTag = exports.UPLCBuiltinTag = void 0;
var assert_1 = require("../../utils/assert.js");
/**
 * to encode as 7-bits
 */
var UPLCBuiltinTag;
(function (UPLCBuiltinTag) {
    // integers monoidal operations
    UPLCBuiltinTag[UPLCBuiltinTag["addInteger"] = 0] = "addInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["subtractInteger"] = 1] = "subtractInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["multiplyInteger"] = 2] = "multiplyInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["divideInteger"] = 3] = "divideInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["quotientInteger"] = 4] = "quotientInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["remainderInteger"] = 5] = "remainderInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["modInteger"] = 6] = "modInteger";
    // integers comparison operaitons
    UPLCBuiltinTag[UPLCBuiltinTag["equalsInteger"] = 7] = "equalsInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["lessThanInteger"] = 8] = "lessThanInteger";
    UPLCBuiltinTag[UPLCBuiltinTag["lessThanEqualInteger"] = 9] = "lessThanEqualInteger";
    // bytestring operations
    UPLCBuiltinTag[UPLCBuiltinTag["appendByteString"] = 10] = "appendByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["consByteString"] = 11] = "consByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["sliceByteString"] = 12] = "sliceByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["lengthOfByteString"] = 13] = "lengthOfByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["indexByteString"] = 14] = "indexByteString";
    // bytestring comparison operations
    UPLCBuiltinTag[UPLCBuiltinTag["equalsByteString"] = 15] = "equalsByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["lessThanByteString"] = 16] = "lessThanByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["lessThanEqualsByteString"] = 17] = "lessThanEqualsByteString";
    // hashes
    UPLCBuiltinTag[UPLCBuiltinTag["sha2_256"] = 18] = "sha2_256";
    UPLCBuiltinTag[UPLCBuiltinTag["sha3_256"] = 19] = "sha3_256";
    UPLCBuiltinTag[UPLCBuiltinTag["blake2b_256"] = 20] = "blake2b_256";
    UPLCBuiltinTag[UPLCBuiltinTag["verifyEd25519Signature"] = 21] = "verifyEd25519Signature";
    // string operations
    UPLCBuiltinTag[UPLCBuiltinTag["appendString"] = 22] = "appendString";
    UPLCBuiltinTag[UPLCBuiltinTag["equalsString"] = 23] = "equalsString";
    UPLCBuiltinTag[UPLCBuiltinTag["encodeUtf8"] = 24] = "encodeUtf8";
    UPLCBuiltinTag[UPLCBuiltinTag["decodeUtf8"] = 25] = "decodeUtf8";
    // control flow
    UPLCBuiltinTag[UPLCBuiltinTag["ifThenElse"] = 26] = "ifThenElse";
    UPLCBuiltinTag[UPLCBuiltinTag["chooseUnit"] = 27] = "chooseUnit";
    // tracing
    UPLCBuiltinTag[UPLCBuiltinTag["trace"] = 28] = "trace";
    // data
    UPLCBuiltinTag[UPLCBuiltinTag["fstPair"] = 29] = "fstPair";
    UPLCBuiltinTag[UPLCBuiltinTag["sndPair"] = 30] = "sndPair";
    UPLCBuiltinTag[UPLCBuiltinTag["chooseList"] = 31] = "chooseList";
    UPLCBuiltinTag[UPLCBuiltinTag["mkCons"] = 32] = "mkCons";
    UPLCBuiltinTag[UPLCBuiltinTag["headList"] = 33] = "headList";
    UPLCBuiltinTag[UPLCBuiltinTag["tailList"] = 34] = "tailList";
    UPLCBuiltinTag[UPLCBuiltinTag["nullList"] = 35] = "nullList";
    UPLCBuiltinTag[UPLCBuiltinTag["chooseData"] = 36] = "chooseData";
    UPLCBuiltinTag[UPLCBuiltinTag["constrData"] = 37] = "constrData";
    UPLCBuiltinTag[UPLCBuiltinTag["mapData"] = 38] = "mapData";
    UPLCBuiltinTag[UPLCBuiltinTag["listData"] = 39] = "listData";
    UPLCBuiltinTag[UPLCBuiltinTag["iData"] = 40] = "iData";
    UPLCBuiltinTag[UPLCBuiltinTag["bData"] = 41] = "bData";
    UPLCBuiltinTag[UPLCBuiltinTag["unConstrData"] = 42] = "unConstrData";
    UPLCBuiltinTag[UPLCBuiltinTag["unMapData"] = 43] = "unMapData";
    UPLCBuiltinTag[UPLCBuiltinTag["unListData"] = 44] = "unListData";
    UPLCBuiltinTag[UPLCBuiltinTag["unIData"] = 45] = "unIData";
    UPLCBuiltinTag[UPLCBuiltinTag["unBData"] = 46] = "unBData";
    UPLCBuiltinTag[UPLCBuiltinTag["equalsData"] = 47] = "equalsData";
    UPLCBuiltinTag[UPLCBuiltinTag["mkPairData"] = 48] = "mkPairData";
    UPLCBuiltinTag[UPLCBuiltinTag["mkNilData"] = 49] = "mkNilData";
    UPLCBuiltinTag[UPLCBuiltinTag["mkNilPairData"] = 50] = "mkNilPairData";
    // Vasil (Plutus V2)
    UPLCBuiltinTag[UPLCBuiltinTag["serialiseData"] = 51] = "serialiseData";
    UPLCBuiltinTag[UPLCBuiltinTag["verifyEcdsaSecp256k1Signature"] = 52] = "verifyEcdsaSecp256k1Signature";
    UPLCBuiltinTag[UPLCBuiltinTag["verifySchnorrSecp256k1Signature"] = 53] = "verifySchnorrSecp256k1Signature";
    // Plutus V3
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_add"] = 54] = "bls12_381_G1_add";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_neg"] = 55] = "bls12_381_G1_neg";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_scalarMul"] = 56] = "bls12_381_G1_scalarMul";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_equal"] = 57] = "bls12_381_G1_equal";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_hashToGroup"] = 58] = "bls12_381_G1_hashToGroup";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_compress"] = 59] = "bls12_381_G1_compress";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G1_uncompress"] = 60] = "bls12_381_G1_uncompress";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_add"] = 61] = "bls12_381_G2_add";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_neg"] = 62] = "bls12_381_G2_neg";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_scalarMul"] = 63] = "bls12_381_G2_scalarMul";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_equal"] = 64] = "bls12_381_G2_equal";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_hashToGroup"] = 65] = "bls12_381_G2_hashToGroup";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_compress"] = 66] = "bls12_381_G2_compress";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_G2_uncompress"] = 67] = "bls12_381_G2_uncompress";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_millerLoop"] = 68] = "bls12_381_millerLoop";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_mulMlResult"] = 69] = "bls12_381_mulMlResult";
    UPLCBuiltinTag[UPLCBuiltinTag["bls12_381_finalVerify"] = 70] = "bls12_381_finalVerify";
    UPLCBuiltinTag[UPLCBuiltinTag["keccak_256"] = 71] = "keccak_256";
    UPLCBuiltinTag[UPLCBuiltinTag["blake2b_224"] = 72] = "blake2b_224";
    // bitwise
    UPLCBuiltinTag[UPLCBuiltinTag["integerToByteString"] = 73] = "integerToByteString";
    UPLCBuiltinTag[UPLCBuiltinTag["byteStringToInteger"] = 74] = "byteStringToInteger";
})(UPLCBuiltinTag = exports.UPLCBuiltinTag || (exports.UPLCBuiltinTag = {}));
function isUPLCBuiltinTag(tag) {
    return (Math.round(Math.abs(tag)) === tag // tag is a non-negative integer
        &&
            (tag >= 0 && tag <= 74));
}
exports.isUPLCBuiltinTag = isUPLCBuiltinTag;
function getNRequiredForces(tag) {
    (0, assert_1.assert)(isUPLCBuiltinTag(tag), "in getNRequiredForces; the function is specific for UPLCBuiltinTags; input was: ".concat(tag));
    // tags from 0 to 25 and from 37 to 53 are all fixed in type; no forces requred
    if (tag <= 25 ||
        // all fixed type after constrData 
        tag >= UPLCBuiltinTag.constrData) {
        return 0;
    }
    // tags that do have one type parameter; 1 force
    if (tag === UPLCBuiltinTag.ifThenElse ||
        tag === UPLCBuiltinTag.chooseUnit ||
        tag === UPLCBuiltinTag.trace ||
        tag === UPLCBuiltinTag.mkCons ||
        tag === UPLCBuiltinTag.headList ||
        tag === UPLCBuiltinTag.tailList ||
        tag === UPLCBuiltinTag.nullList ||
        tag === UPLCBuiltinTag.chooseData) {
        return 1;
    }
    // tags that do have two types paramters; two forces
    if (tag === UPLCBuiltinTag.fstPair ||
        tag === UPLCBuiltinTag.sndPair ||
        tag === UPLCBuiltinTag.chooseList) {
        return 2;
    }
    throw new Error("'getNRequiredForces' did not match any tag; the input was: " + tag);
}
exports.getNRequiredForces = getNRequiredForces;
function isV1Supported(tag) {
    return (isUPLCBuiltinTag(tag) &&
        tag <= 50);
}
exports.isV1Supported = isV1Supported;
function isV2Supported(tag) {
    return (isUPLCBuiltinTag(tag));
}
exports.isV2Supported = isV2Supported;
function builtinTagToString(tag) {
    switch (tag) {
        case UPLCBuiltinTag.addInteger: return "addInteger";
        case UPLCBuiltinTag.subtractInteger: return "subtractInteger";
        case UPLCBuiltinTag.multiplyInteger: return "multiplyInteger";
        case UPLCBuiltinTag.divideInteger: return "divideInteger";
        case UPLCBuiltinTag.quotientInteger: return "quotientInteger";
        case UPLCBuiltinTag.remainderInteger: return "remainderInteger";
        case UPLCBuiltinTag.modInteger: return "modInteger";
        case UPLCBuiltinTag.equalsInteger: return "equalsInteger";
        case UPLCBuiltinTag.lessThanInteger: return "lessThanInteger";
        case UPLCBuiltinTag.lessThanEqualInteger: return "lessThanEqualsInteger";
        case UPLCBuiltinTag.appendByteString: return "appendByteString";
        case UPLCBuiltinTag.consByteString: return "consByteString";
        case UPLCBuiltinTag.sliceByteString: return "sliceByteString";
        case UPLCBuiltinTag.lengthOfByteString: return "lengthOfByteString";
        case UPLCBuiltinTag.indexByteString: return "indexByteString";
        case UPLCBuiltinTag.equalsByteString: return "equalsByteString";
        case UPLCBuiltinTag.lessThanByteString: return "lessThanByteString";
        case UPLCBuiltinTag.lessThanEqualsByteString: return "lessThanEqualsByteString";
        case UPLCBuiltinTag.sha2_256: return "sha2_256";
        case UPLCBuiltinTag.sha3_256: return "sha3_256";
        case UPLCBuiltinTag.blake2b_256: return "blake2b_256";
        case UPLCBuiltinTag.verifyEd25519Signature: return "verifyEd25519Signature";
        case UPLCBuiltinTag.appendString: return "appendString";
        case UPLCBuiltinTag.equalsString: return "equalsString";
        case UPLCBuiltinTag.encodeUtf8: return "encodeUtf8";
        case UPLCBuiltinTag.decodeUtf8: return "decodeUtf8";
        case UPLCBuiltinTag.ifThenElse: return "ifThenElse";
        case UPLCBuiltinTag.chooseUnit: return "chooseUnit";
        case UPLCBuiltinTag.trace: return "trace";
        case UPLCBuiltinTag.fstPair: return "fstPair";
        case UPLCBuiltinTag.sndPair: return "sndPair";
        case UPLCBuiltinTag.chooseList: return "chooseList";
        case UPLCBuiltinTag.mkCons: return "mkCons";
        case UPLCBuiltinTag.headList: return "headList";
        case UPLCBuiltinTag.tailList: return "tailList";
        case UPLCBuiltinTag.nullList: return "nullList";
        case UPLCBuiltinTag.chooseData: return "chooseData";
        case UPLCBuiltinTag.constrData: return "constrData";
        case UPLCBuiltinTag.mapData: return "mapData";
        case UPLCBuiltinTag.listData: return "listData";
        case UPLCBuiltinTag.iData: return "iData";
        case UPLCBuiltinTag.bData: return "bData";
        case UPLCBuiltinTag.unConstrData: return "unConstrData";
        case UPLCBuiltinTag.unMapData: return "unMapData";
        case UPLCBuiltinTag.unListData: return "unListData";
        case UPLCBuiltinTag.unIData: return "unIData";
        case UPLCBuiltinTag.unBData: return "unBData";
        case UPLCBuiltinTag.equalsData: return "equalsData";
        case UPLCBuiltinTag.mkPairData: return "mkPairData";
        case UPLCBuiltinTag.mkNilData: return "mkNilData";
        case UPLCBuiltinTag.mkNilPairData: return "mkNilPairData";
        case UPLCBuiltinTag.serialiseData: return "serialiseData";
        case UPLCBuiltinTag.verifyEcdsaSecp256k1Signature: return "verifyEcdsaSecp256k1Signature";
        case UPLCBuiltinTag.verifySchnorrSecp256k1Signature: return "verifySchnorrSecp256k1Signature";
        case UPLCBuiltinTag.bls12_381_G1_add: return "bls12_381_G1_add";
        case UPLCBuiltinTag.bls12_381_G1_neg: return "bls12_381_G1_neg";
        case UPLCBuiltinTag.bls12_381_G1_scalarMul: return "bls12_381_G1_scalarMul";
        case UPLCBuiltinTag.bls12_381_G1_equal: return "bls12_381_G1_equal";
        case UPLCBuiltinTag.bls12_381_G1_hashToGroup: return "bls12_381_G1_hashToGroup";
        case UPLCBuiltinTag.bls12_381_G1_compress: return "bls12_381_G1_compress";
        case UPLCBuiltinTag.bls12_381_G1_uncompress: return "bls12_381_G1_uncompress";
        case UPLCBuiltinTag.bls12_381_G2_add: return "bls12_381_G2_add";
        case UPLCBuiltinTag.bls12_381_G2_neg: return "bls12_381_G2_neg";
        case UPLCBuiltinTag.bls12_381_G2_scalarMul: return "bls12_381_G2_scalarMul";
        case UPLCBuiltinTag.bls12_381_G2_equal: return "bls12_381_G2_equal";
        case UPLCBuiltinTag.bls12_381_G2_hashToGroup: return "bls12_381_G2_hashToGroup";
        case UPLCBuiltinTag.bls12_381_G2_compress: return "bls12_381_G2_compress";
        case UPLCBuiltinTag.bls12_381_G2_uncompress: return "bls12_381_G2_uncompress";
        case UPLCBuiltinTag.bls12_381_millerLoop: return "bls12_381_millerLoop";
        case UPLCBuiltinTag.bls12_381_mulMlResult: return "bls12_381_mulMlResult";
        case UPLCBuiltinTag.bls12_381_finalVerify: return "bls12_381_finalVerify";
        case UPLCBuiltinTag.keccak_256: return "keccak_256";
        case UPLCBuiltinTag.blake2b_224: return "blake2b_224";
        case UPLCBuiltinTag.integerToByteString: return "integerToByteString";
        case UPLCBuiltinTag.byteStringToInteger: return "byteStringToInteger";
        default:
            // tag; // check that is of type 'never'
            return "";
    }
}
exports.builtinTagToString = builtinTagToString;
function builtinTagFromString(tag) {
    switch (tag.trim()) {
        case "addInteger": return UPLCBuiltinTag.addInteger;
        case "subtractInteger": return UPLCBuiltinTag.subtractInteger;
        case "multiplyInteger": return UPLCBuiltinTag.multiplyInteger;
        case "divideInteger": return UPLCBuiltinTag.divideInteger;
        case "quotientInteger": return UPLCBuiltinTag.quotientInteger;
        case "remainderInteger": return UPLCBuiltinTag.remainderInteger;
        case "modInteger": return UPLCBuiltinTag.modInteger;
        case "equalsInteger": return UPLCBuiltinTag.equalsInteger;
        case "lessThanInteger": return UPLCBuiltinTag.lessThanInteger;
        case "lessThanEqualInteger": return UPLCBuiltinTag.lessThanEqualInteger;
        case "lessThanEqualsInteger": return UPLCBuiltinTag.lessThanEqualInteger;
        case "appendByteString": return UPLCBuiltinTag.appendByteString;
        case "consByteString": return UPLCBuiltinTag.consByteString;
        case "sliceByteString": return UPLCBuiltinTag.sliceByteString;
        case "lengthOfByteString": return UPLCBuiltinTag.lengthOfByteString;
        case "indexByteString": return UPLCBuiltinTag.indexByteString;
        case "equalsByteString": return UPLCBuiltinTag.equalsByteString;
        case "lessThanByteString": return UPLCBuiltinTag.lessThanByteString;
        case "lessThanEqualsByteString": return UPLCBuiltinTag.lessThanEqualsByteString;
        case "sha2_256": return UPLCBuiltinTag.sha2_256;
        case "sha3_256": return UPLCBuiltinTag.sha3_256;
        case "blake2b_256": return UPLCBuiltinTag.blake2b_256;
        case "verifyEd25519Signature": return UPLCBuiltinTag.verifyEd25519Signature;
        case "appendString": return UPLCBuiltinTag.appendString;
        case "equalsString": return UPLCBuiltinTag.equalsString;
        case "encodeUtf8": return UPLCBuiltinTag.encodeUtf8;
        case "decodeUtf8": return UPLCBuiltinTag.decodeUtf8;
        case "ifThenElse": return UPLCBuiltinTag.ifThenElse;
        case "chooseUnit": return UPLCBuiltinTag.chooseUnit;
        case "trace": return UPLCBuiltinTag.trace;
        case "fstPair": return UPLCBuiltinTag.fstPair;
        case "sndPair": return UPLCBuiltinTag.sndPair;
        case "chooseList": return UPLCBuiltinTag.chooseList;
        case "mkCons": return UPLCBuiltinTag.mkCons;
        case "headList": return UPLCBuiltinTag.headList;
        case "tailList": return UPLCBuiltinTag.tailList;
        case "nullList": return UPLCBuiltinTag.nullList;
        case "chooseData": return UPLCBuiltinTag.chooseData;
        case "constrData": return UPLCBuiltinTag.constrData;
        case "mapData": return UPLCBuiltinTag.mapData;
        case "listData": return UPLCBuiltinTag.listData;
        case "iData": return UPLCBuiltinTag.iData;
        case "bData": return UPLCBuiltinTag.bData;
        case "unConstrData": return UPLCBuiltinTag.unConstrData;
        case "unMapData": return UPLCBuiltinTag.unMapData;
        case "unListData": return UPLCBuiltinTag.unListData;
        case "unIData": return UPLCBuiltinTag.unIData;
        case "unBData": return UPLCBuiltinTag.unBData;
        case "equalsData": return UPLCBuiltinTag.equalsData;
        case "mkPairData": return UPLCBuiltinTag.mkPairData;
        case "mkNilData": return UPLCBuiltinTag.mkNilData;
        case "mkNilPairData": return UPLCBuiltinTag.mkNilPairData;
        case "serialiseData": return UPLCBuiltinTag.serialiseData;
        case "verifyEcdsaSecp256k1Signature": return UPLCBuiltinTag.verifyEcdsaSecp256k1Signature;
        case "verifySchnorrSecp256k1Signature": return UPLCBuiltinTag.verifySchnorrSecp256k1Signature;
        case "bls12_381_G1_add": return UPLCBuiltinTag.bls12_381_G1_add;
        case "bls12_381_G1_neg": return UPLCBuiltinTag.bls12_381_G1_neg;
        case "bls12_381_G1_scalarMul": return UPLCBuiltinTag.bls12_381_G1_scalarMul;
        case "bls12_381_G1_equal": return UPLCBuiltinTag.bls12_381_G1_equal;
        case "bls12_381_G1_hashToGroup": return UPLCBuiltinTag.bls12_381_G1_hashToGroup;
        case "bls12_381_G1_compress": return UPLCBuiltinTag.bls12_381_G1_compress;
        case "bls12_381_G1_uncompress": return UPLCBuiltinTag.bls12_381_G1_uncompress;
        case "bls12_381_G2_add": return UPLCBuiltinTag.bls12_381_G2_add;
        case "bls12_381_G2_neg": return UPLCBuiltinTag.bls12_381_G2_neg;
        case "bls12_381_G2_scalarMul": return UPLCBuiltinTag.bls12_381_G2_scalarMul;
        case "bls12_381_G2_equal": return UPLCBuiltinTag.bls12_381_G2_equal;
        case "bls12_381_G2_hashToGroup": return UPLCBuiltinTag.bls12_381_G2_hashToGroup;
        case "bls12_381_G2_compress": return UPLCBuiltinTag.bls12_381_G2_compress;
        case "bls12_381_G2_uncompress": return UPLCBuiltinTag.bls12_381_G2_uncompress;
        case "bls12_381_millerLoop": return UPLCBuiltinTag.bls12_381_millerLoop;
        case "bls12_381_mulMlResult": return UPLCBuiltinTag.bls12_381_mulMlResult;
        case "bls12_381_finalVerify": return UPLCBuiltinTag.bls12_381_finalVerify;
        case "keccak_256": return UPLCBuiltinTag.keccak_256;
        case "blake2b_224": return UPLCBuiltinTag.blake2b_224;
        case "integerToByteString": return UPLCBuiltinTag.integerToByteString;
        case "byteStringToInteger": return UPLCBuiltinTag.byteStringToInteger;
        default:
            // tag; // check that is of type 'never'
            throw new Error("unknow builtin: " + tag);
    }
}
exports.builtinTagFromString = builtinTagFromString;
