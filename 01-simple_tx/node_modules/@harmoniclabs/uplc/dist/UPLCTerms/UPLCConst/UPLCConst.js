"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UPLCConst = void 0;
var bitstream_1 = require("@harmoniclabs/bitstream");
var pair_1 = require("@harmoniclabs/pair");
var ConstType_1 = require("./ConstType/index.js");
var ConstValue_1 = require("./ConstValue/index.js");
var assert_1 = require("../../utils/assert.js");
var UPLCConst = /** @class */ (function () {
    function UPLCConst(typeTag, value) {
        (0, assert_1.assert)((0, ConstType_1.isWellFormedConstType)(typeTag), "trying to construct an UPLC constant with an invalid type; input type: " + (0, ConstType_1.constTypeToStirng)(typeTag));
        (0, assert_1.assert)((0, ConstValue_1.canConstValueBeOfConstType)(value, typeTag), "trying to construct an UPLC constant with an invalid value for type \"".concat((0, ConstType_1.constTypeToStirng)(typeTag), "\";\n             input value was: ").concat(value));
        if ((0, ConstType_1.constTypeEq)(typeTag, ConstType_1.constT.int))
            value = BigInt(value);
        if ((0, ConstType_1.constTypeEq)(typeTag, ConstType_1.constT.listOf(ConstType_1.constT.int)))
            value = value.map(function (n) { return BigInt(n); });
        if (typeTag[0] === ConstType_1.ConstTyTag.pair) {
            if ((0, ConstType_1.constTypeEq)(ConstType_1.constPairTypeUtils.getFirstTypeArgument(typeTag), ConstType_1.constT.int))
                value.fst = BigInt(value.fst);
            if ((0, ConstType_1.constTypeEq)(ConstType_1.constPairTypeUtils.getSecondTypeArgument(typeTag), ConstType_1.constT.int))
                value.snd = BigInt(value.snd);
        }
        this._type = typeTag;
        this._value = value;
    }
    Object.defineProperty(UPLCConst, "UPLCTag", {
        get: function () {
            return bitstream_1.BitStream.fromBinStr("0100");
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(UPLCConst.prototype, "type", {
        get: function () {
            // clone
            return this._type.map(function (tag) { return tag; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(UPLCConst.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: false,
        configurable: true
    });
    UPLCConst.prototype.clone = function () {
        return new UPLCConst(this.type, this.value);
    };
    UPLCConst.int = function (int) {
        int = BigInt(int);
        return new UPLCConst(ConstType_1.constT.int, int);
    };
    UPLCConst.byteString = function (bs) {
        return new UPLCConst(ConstType_1.constT.byteStr, bs);
    };
    UPLCConst.str = function (str) {
        return new UPLCConst(ConstType_1.constT.str, str);
    };
    Object.defineProperty(UPLCConst, "unit", {
        get: function () {
            return new UPLCConst(ConstType_1.constT.unit, undefined);
        },
        enumerable: false,
        configurable: true
    });
    UPLCConst.bool = function (bool) {
        return new UPLCConst(ConstType_1.constT.bool, bool);
    };
    UPLCConst.listOf = function (typeArg) {
        return function (values) {
            return new UPLCConst(ConstType_1.constT.listOf(typeArg), values);
        };
    };
    UPLCConst.pairOf = function (typeArgFirst, typeArgSecond) {
        return function (first, second) {
            return new UPLCConst(ConstType_1.constT.pairOf(typeArgFirst, typeArgSecond), new pair_1.Pair(first, second));
        };
    };
    UPLCConst.data = function (data) {
        return new UPLCConst(ConstType_1.constT.data, data);
    };
    UPLCConst.bls12_381_G1_element = function (g1) {
        return new UPLCConst(ConstType_1.constT.bls12_381_G1_element, g1);
    };
    UPLCConst.bls12_381_G2_element = function (g2) {
        return new UPLCConst(ConstType_1.constT.bls12_381_G2_element, g2);
    };
    UPLCConst.bls12_381_MlResult = function (mlResult) {
        return new UPLCConst(ConstType_1.constT.bls12_381_MlResult, mlResult);
    };
    return UPLCConst;
}());
exports.UPLCConst = UPLCConst;
