"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultUplcVersion = exports.UPLCVersion = void 0;
var ints_1 = require("../utils/ints.js");
var UPLCVersion = /** @class */ (function () {
    function UPLCVersion(major, minor, patch) {
        this._major = (0, ints_1.forceBigUInt)(major);
        this._minor = (0, ints_1.forceBigUInt)(minor);
        this._patch = (0, ints_1.forceBigUInt)(patch);
    }
    Object.defineProperty(UPLCVersion.prototype, "major", {
        get: function () { return this._major; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(UPLCVersion.prototype, "minor", {
        get: function () { return this._minor; },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(UPLCVersion.prototype, "patch", {
        get: function () { return this._patch; },
        enumerable: false,
        configurable: true
    });
    ;
    UPLCVersion.prototype.isV3Friendly = function () {
        // ^1.1.0 || >= 2.*.*
        return this.major === BigInt(1) ?
            this.minor >= 1 :
            this.major >= 2;
    };
    UPLCVersion.prototype.toString = function () {
        return "".concat(this.major, ".").concat(this.minor, ".").concat(this.patch);
    };
    UPLCVersion.fromString = function (str) {
        var _a = __read(str.split("."), 3), a = _a[0], b = _a[1], c = _a[2];
        return new UPLCVersion(BigInt(a), BigInt(b), BigInt(c));
    };
    return UPLCVersion;
}());
exports.UPLCVersion = UPLCVersion;
exports.defaultUplcVersion = new UPLCVersion(1, 1, 0);
