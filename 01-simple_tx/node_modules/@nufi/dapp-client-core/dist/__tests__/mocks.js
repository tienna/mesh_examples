"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockedInjectConnectors = void 0;
const injectConnectors_1 = require("../core/injectConnectors");
const publicUtils_1 = require("../publicUtils");
const getMockedConnectorToInject = (connectorKind, createConnectorObject) => (client, config) => {
    const connectorObject = createConnectorObject(client);
    return {
        connectorKind,
        type: 'simple',
        inject: (window) => {
            (0, publicUtils_1.set)(window, [connectorKind, publicUtils_1.objKeyByConnectorPlatform[config.connectorPlatform]], connectorObject);
        },
        eventHandler() {
            return __awaiter(this, void 0, void 0, function* () { });
        },
    };
};
const getMockedInjectConnectors = (_a) => __awaiter(void 0, [_a], void 0, function* ({ connectorKind, createConnectorObject, sendPortPostMessage, initChannelData, connectorPlatform, onBeforeRequest, onBeforeFirstSend, }) {
    return (0, injectConnectors_1.injectConnectors)({
        connectorsToInject: {
            [connectorKind]: getMockedConnectorToInject(connectorKind, createConnectorObject),
        },
        currentContext: 'sdk',
        targetContext: 'widget',
        overridableWallets: [],
        config: {
            appId: 'nufi',
            connectorPlatform,
            name: 'Nufi',
            icons: {
                default: '',
            },
            connectors: {
                [connectorKind]: null,
            },
        },
        sendPortPostMessage,
        onBeforeFirstSend,
        initChannelData,
        onBeforeRequest,
    });
});
exports.getMockedInjectConnectors = getMockedInjectConnectors;
//# sourceMappingURL=mocks.js.map