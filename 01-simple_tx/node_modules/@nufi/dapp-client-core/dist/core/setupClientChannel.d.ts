import type { RequestArgument, SuccessResponse, ErrorResponse, ScriptContext, UntypedConnectorKind, MessageToClientEvent, InitChannelData, ConnectorPlatform } from './types';
type SetupClientChannelParams<ConnectorKind extends UntypedConnectorKind> = {
    appId: string;
    connectorPlatform: ConnectorPlatform;
    currentContext: ScriptContext;
    targetContext: ScriptContext;
    eventHandler: (kind: ConnectorKind, method: string, args: any[]) => Promise<void>;
    sendPortPostMessage: (message: unknown, transfer: Transferable[]) => void;
    onBeforeFirstSend?: () => Promise<void>;
    onBeforeRequest?: (args: {
        connectorKind: null | ConnectorKind;
        method: string;
        args: RequestArgument[];
    }) => unknown;
    onConnectorWindowClosed?: (msg: MessageToClientEvent<ConnectorKind>) => ErrorResponse;
    initChannelData?: InitChannelData;
};
export declare const setupClientChannel: <ConnectorKind extends UntypedConnectorKind>({ appId, connectorPlatform, currentContext, targetContext, eventHandler, onConnectorWindowClosed, sendPortPostMessage, onBeforeFirstSend, onBeforeRequest, initChannelData, }: SetupClientChannelParams<ConnectorKind>) => (connectorKind: null | ConnectorKind, method: string, args: RequestArgument[]) => Promise<SuccessResponse>;
export {};
//# sourceMappingURL=setupClientChannel.d.ts.map