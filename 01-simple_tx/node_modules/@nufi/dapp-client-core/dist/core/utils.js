"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomUUID = exports.hardenUnreliableRequest = exports.isNufiMessage = exports.isNufiWidgetManagementMessage = void 0;
const widgetManagementMethods = [
    'closeWidget',
    'collapseWidget',
    'openWidget',
    'hideWidget',
    'refreshPage',
    'getParentWindowDimensionsRequest',
    'getParentWindowDimensionsResponse',
    'signOut',
];
const isNufiWidgetManagementMessage = (e) => {
    var _a;
    if (e.data == null)
        return false;
    const _e = e;
    const method = _e.data.method;
    return ((_a = _e === null || _e === void 0 ? void 0 : _e.data) === null || _a === void 0 ? void 0 : _a.appId) === 'nufi' && widgetManagementMethods.includes(method);
};
exports.isNufiWidgetManagementMessage = isNufiWidgetManagementMessage;
const isNufiMessage = (e, expectedConnectorPlatform) => {
    var _a, _b;
    const _e = e;
    return Boolean(((_a = _e === null || _e === void 0 ? void 0 : _e.data) === null || _a === void 0 ? void 0 : _a.appId) === 'nufi' &&
        ((_b = _e === null || _e === void 0 ? void 0 : _e.data) === null || _b === void 0 ? void 0 : _b.connectorPlatform) === expectedConnectorPlatform);
};
exports.isNufiMessage = isNufiMessage;
const hardenUnreliableRequest = (req, fallbackResponse) => Promise.any([
    req(),
    new Promise((resolve) => setTimeout(() => __awaiter(void 0, void 0, void 0, function* () { return resolve(yield req()); }), 10)),
    new Promise((resolve) => setTimeout(() => __awaiter(void 0, void 0, void 0, function* () { return resolve(yield req()); }), 100)),
    new Promise((resolve) => setTimeout(() => __awaiter(void 0, void 0, void 0, function* () { return resolve(yield req()); }), 500)),
    new Promise((resolve) => setTimeout(() => resolve(fallbackResponse), 1000)),
]);
exports.hardenUnreliableRequest = hardenUnreliableRequest;
const getRandomUUID = () => {
    try {
        return self.crypto.randomUUID();
    }
    catch (e) {
        // If crypto.randomUUID() is not available (e.g. on HTTP pages),
        // fallback to the (less safe) logic below
    }
    // https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid/2117523#2117523
    let d = new Date().getTime();
    let d2 = (typeof performance !== 'undefined' &&
        performance.now &&
        performance.now() * 1000) ||
        0; // Time in microseconds since page-load or 0 if unsupported
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        let r = Math.random() * 16; // random number between 0 and 16
        /* eslint-disable no-bitwise */
        if (d > 0) {
            // Use timestamp until depleted
            r = (d + r) % 16 | 0;
            d = Math.floor(d / 16);
        }
        else {
            // Use microseconds since page-load if supported
            r = (d2 + r) % 16 | 0;
            d2 = Math.floor(d2 / 16);
        }
        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
        /* eslint-enable no-bitwise */
    });
};
exports.getRandomUUID = getRandomUUID;
//# sourceMappingURL=utils.js.map