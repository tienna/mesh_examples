import type { UntypedConnectorKind, ScriptContext, InjectedConnectorFactory, DappConnectorsConfig, ErrorResponse, MessageToClientEvent, RequestArgument, InitChannelData } from './types';
export type CreateConnectorsParams<Config extends DappConnectorsConfig, ConnectorKind extends UntypedConnectorKind> = {
    connectorsToInject: Record<UntypedConnectorKind, InjectedConnectorFactory<Config>>;
    config: Config;
    currentContext: ScriptContext;
    targetContext: ScriptContext;
    sendPortPostMessage: (message: unknown, transfer: Transferable[]) => void;
    overridableWallets: ReadonlyArray<string>;
    onConnectorWindowClosed?: (msg: MessageToClientEvent<ConnectorKind>) => ErrorResponse;
    onBeforeFirstSend?: () => Promise<void>;
    onBeforeRequest?: (args: {
        connectorKind: null | ConnectorKind;
        method: string;
        args: RequestArgument[];
    }) => unknown;
    initChannelData?: InitChannelData;
};
export declare function injectConnectors<Config extends DappConnectorsConfig, ConnectorKind extends UntypedConnectorKind>(params: CreateConnectorsParams<Config, ConnectorKind>): Promise<void>;
export type InjectConnectors = typeof injectConnectors;
//# sourceMappingURL=injectConnectors.d.ts.map