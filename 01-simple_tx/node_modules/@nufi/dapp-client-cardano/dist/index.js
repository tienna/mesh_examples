"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initNufiDappCardanoSdk = void 0;
const dapp_client_core_1 = require("@nufi/dapp-client-core");
const connector_1 = require("./connector");
const icons_1 = require("./icons");
const sdkInfo_1 = require("./sdkInfo");
__exportStar(require("./connector"), exports);
const loginTypeProps = {
    metamask: {
        icon: icons_1.nufiMetamaskIcon,
        connectorPlatform: 'snap',
        name: 'Cardano Wallet',
    },
    web3Auth: {
        icon: icons_1.nufiIcon,
        connectorPlatform: 'sso',
        name: 'NuFiConnect',
    },
};
const getDappConnectorsConfig = ({ loginType, }) => {
    const { icon, connectorPlatform, name } = loginTypeProps[loginType];
    return {
        appId: 'nufi',
        connectorPlatform,
        icons: {
            default: icon,
        },
        name,
        connectors: {
            cardano: {
                isCip62Enabled: false,
                isCip95Enabled: true,
            },
        },
    };
};
const initNufiDappCardanoSdk = (sdk, type, options) => {
    sdk.__logger.debug('"initNufiDappCardanoSdk');
    const { ensureWidgetEmbeddedInIframe, ensureChannelIsReady, injectConnectors } = sdk.__getContext();
    const loginType = {
        sso: 'web3Auth',
        snap: 'metamask',
    }[type];
    if ((options === null || options === void 0 ? void 0 : options.provider) != null &&
        !(0, dapp_client_core_1.isSupportedWeb3AuthProvider)(options === null || options === void 0 ? void 0 : options.provider)) {
        throw new Error('Unsupported web3Auth provider.');
    }
    const loginInfo = Object.assign({ loginType }, (type === 'sso' && (options === null || options === void 0 ? void 0 : options.provider)
        ? { provider: options.provider }
        : {}));
    const queryString = new URLSearchParams(Object.assign({ blockchain: 'cardano' }, loginInfo)).toString();
    const { sendPortPostMessage, sendSimplePostMessage, showWidget, isWidgetHidden, iframeDidRefresh, } = ensureWidgetEmbeddedInIframe({
        type: 'updateQueryString',
        query: `?${queryString}`,
    });
    const config = getDappConnectorsConfig({
        loginType,
    });
    if (iframeDidRefresh) {
        const initChannelData = {
            type: 'widget',
            data: {
                connectorKind: 'cardano',
                connectorPlatform: config.connectorPlatform,
            },
        };
        injectConnectors({
            connectorsToInject: {
                cardano: (0, connector_1.createInjectedConnectorFactory)({
                    // Note that we are not checking whether the connector window is open,
                    // as we want the request to be redirected to widget in all cases.
                    // That is so that the we can return `true` after user refreshes the page.
                    getIsEnabled: (client) => () => __awaiter(void 0, void 0, void 0, function* () { return yield client.proxy.isEnabled(); }),
                }),
            },
            config,
            currentContext: 'sdk',
            targetContext: 'widget',
            sendPortPostMessage,
            onBeforeFirstSend: () => __awaiter(void 0, void 0, void 0, function* () {
                sdk.__logger.debug('"initNufiDappCardanoSdk: onBeforeRequest" onBeforeFirstSend');
                yield ensureChannelIsReady(config.appId, config.connectorPlatform, 'cardano', sendSimplePostMessage);
                sdkInfo_1.sdkInfoReporter.tryReportingOnce(sendSimplePostMessage, [
                    sdk.__getSdkInfo(),
                    (0, sdkInfo_1.getCardanoSdkInfo)(),
                ]);
            }),
            // As dapp developers have to be aware of integrating NuFi, wallet
            // overrides do not make much sense
            overridableWallets: [],
            onBeforeRequest: ({ connectorKind, method }) => {
                sdk.__logger.debug('"initNufiDappCardanoSdk: onBeforeRequest"', {
                    connectorKind,
                    method,
                });
                if (connectorKind !== 'cardano')
                    return;
                if (isWidgetHidden() && method === 'openConnectorWindow') {
                    sdk.__logger.debug('"initNufiDappCardanoSdk: onBeforeRequest" showWidget');
                    showWidget();
                }
            },
            initChannelData,
        });
    }
};
exports.initNufiDappCardanoSdk = initNufiDappCardanoSdk;
//# sourceMappingURL=index.js.map