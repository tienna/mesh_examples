"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.supportedVotingPurposes = exports.ApiError = exports.ApiErrorCode = void 0;
exports.ensureCatalystVotingPurpose = ensureCatalystVotingPurpose;
var ApiErrorCode;
(function (ApiErrorCode) {
    // CIP-0030
    ApiErrorCode[ApiErrorCode["InvalidRequest"] = -1] = "InvalidRequest";
    ApiErrorCode[ApiErrorCode["InternalError"] = -2] = "InternalError";
    ApiErrorCode[ApiErrorCode["Refused"] = -3] = "Refused";
    // CIP-0062
    ApiErrorCode[ApiErrorCode["UnsupportedVotingPurpose"] = -100] = "UnsupportedVotingPurpose";
    ApiErrorCode[ApiErrorCode["InvalidArgumentError"] = -101] = "InvalidArgumentError";
    ApiErrorCode[ApiErrorCode["UnknownChoiceError"] = -102] = "UnknownChoiceError";
    ApiErrorCode[ApiErrorCode["InvalidBlockDateError"] = -103] = "InvalidBlockDateError";
    ApiErrorCode[ApiErrorCode["InvalidVotePlanError"] = -104] = "InvalidVotePlanError";
    ApiErrorCode[ApiErrorCode["InvalidVoteOptionError"] = -105] = "InvalidVoteOptionError";
})(ApiErrorCode || (exports.ApiErrorCode = ApiErrorCode = {}));
class ApiError {
    constructor(code, info, additionalFields) {
        this.code = code;
        this.info = info;
        if (additionalFields === null || additionalFields === void 0 ? void 0 : additionalFields.rejectedVotes) {
            this.rejectedVotes = additionalFields === null || additionalFields === void 0 ? void 0 : additionalFields.rejectedVotes;
        }
        if (additionalFields === null || additionalFields === void 0 ? void 0 : additionalFields.votingPurpose) {
            this.votingPurpose = additionalFields === null || additionalFields === void 0 ? void 0 : additionalFields.votingPurpose;
        }
    }
}
exports.ApiError = ApiError;
var VotingPurpose;
(function (VotingPurpose) {
    VotingPurpose[VotingPurpose["CATALYST"] = 0] = "CATALYST";
    VotingPurpose[VotingPurpose["OTHER"] = 1] = "OTHER";
})(VotingPurpose || (VotingPurpose = {}));
exports.supportedVotingPurposes = [VotingPurpose.CATALYST];
function ensureCatalystVotingPurpose(purposes) {
    if (!Array.isArray(purposes) || purposes.length === 0) {
        throw new ApiError(ApiErrorCode.InvalidArgumentError, `Invalid Voting Purpose ${JSON.stringify(purposes)}`);
    }
    const unsupportedPurposes = purposes.filter((p) => !exports.supportedVotingPurposes.includes(p));
    if (unsupportedPurposes.length > 0) {
        throw new ApiError(ApiErrorCode.UnsupportedVotingPurpose, `Unsupported Voting Purpose ${unsupportedPurposes.join(' & ')}`, {
            votingPurpose: unsupportedPurposes,
        });
    }
}
//# sourceMappingURL=utils.js.map