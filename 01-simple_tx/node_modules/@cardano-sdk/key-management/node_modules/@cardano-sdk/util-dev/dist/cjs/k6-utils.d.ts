import { Cardano } from '@cardano-sdk/core';
import http from 'k6/http';
export declare enum Environment {
    dev = "dev",
    ops = "ops",
    staging = "staging",
    live = "live"
}
export declare enum Network {
    mainnet = "mainnet",
    preprod = "preprod",
    preview = "preview",
    sanchonet = "sanchonet"
}
export declare const getDut: (k6Env: {
    TARGET_ENV?: string;
    TARGET_NET?: string;
    DUT?: string;
}, options?: {
    environments?: Environment[];
    networks?: Network[];
}) => string;
export declare const chunkArray: <T>(array: T[], chunkSize: number) => T[][];
declare type ApiVersion = {
    assetInfo: string;
    chainHistory: string;
    handle: string;
    networkInfo: string;
    rewards: string;
    root: string;
    stakePool: string;
    txSubmit: string;
    utxo: string;
};
declare type ServiceName = keyof ApiVersion;
export declare class SdkCom {
    #private;
    constructor({ dut, secure, apiVersion, k6Http }: {
        dut: string;
        secure?: boolean;
        apiVersion: ApiVersion;
        k6Http: {
            post: typeof http.post;
        };
    });
    tip(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    eraSummaries(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    genesisParameters(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    protocolParameters(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    lovelaceSupply(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    stake(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    stakePoolStats(): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    httpPost(url: string, serviceName: ServiceName, body?: {}): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    txsByAddress(addresses: Cardano.Address[], takeOne?: boolean, pageSize?: number): void;
    utxosByAddresses(addresses: Cardano.Address[]): void;
    rewardsAccBalance(rewardAccount: Cardano.RewardAccount): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    stakePoolSearch(poolAddress: Cardano.PoolId): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
    getAssets({ assetIds, nftMetadata, tokenMetadata }: {
        assetIds: Cardano.AssetId[];
        nftMetadata: boolean;
        tokenMetadata: boolean;
    }): import("k6/http").RefinedResponse<import("k6/http").ResponseType | undefined>;
}
export {};
//# sourceMappingURL=k6-utils.d.ts.map