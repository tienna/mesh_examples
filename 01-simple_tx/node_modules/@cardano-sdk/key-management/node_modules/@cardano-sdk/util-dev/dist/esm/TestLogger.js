import * as envalid from 'envalid';
import { inspect } from 'util';
import JSONbig from 'json-bigint';
const logLevels = { debug: 2, error: 5, fatal: 6, info: 3, trace: 1, warn: 4 };
const logLevelLabels = ['', 'TRACE  ', 'DEBUG  ', 'INFO   ', 'WARNING', 'ERROR  ', 'FATAL  '];
const getConfig = (env, stream) => {
    const { TL_ARRAY, TL_BREAK, TL_COLOR, TL_COMPACT, TL_DEPTH, TL_HIDDEN, TL_JSON, TL_LEVEL, TL_PROXY, TL_STRING } = envalid.cleanEnv(env, {
        TL_ARRAY: envalid.num({ default: 100 }),
        TL_BREAK: envalid.num({ default: stream?.columns ? stream?.columns - 33 : 90 }),
        TL_COLOR: envalid.bool({ default: stream?.isTTY || false }),
        TL_COMPACT: envalid.num({ default: 3 }),
        TL_DEPTH: envalid.num({ default: 2 }),
        TL_HIDDEN: envalid.bool({ default: false }),
        TL_JSON: envalid.bool({ default: false }),
        TL_LEVEL: envalid.str({ choices: Object.keys(logLevels), default: 'fatal' }),
        TL_PROXY: envalid.bool({ default: false }),
        TL_STRING: envalid.num({ default: 1000 })
    });
    const inspectOptions = {
        breakLength: TL_BREAK || Number.POSITIVE_INFINITY,
        colors: TL_COLOR,
        compact: TL_COMPACT || false,
        depth: TL_DEPTH || Number.POSITIVE_INFINITY,
        maxArrayLength: TL_ARRAY || Number.POSITIVE_INFINITY,
        maxStringLength: TL_STRING || Number.POSITIVE_INFINITY,
        showHidden: TL_HIDDEN,
        showProxy: TL_PROXY,
        sorted: true
    };
    return { inspectOptions, minHeight: logLevels[TL_LEVEL], useJSON: TL_JSON };
};
export const createLogger = (options = {}) => {
    const { env, record, stream } = { env: process.env, stream: process.stdout, ...options };
    const { minHeight, inspectOptions, useJSON } = getConfig(env, stream);
    const messages = [];
    const stringify = (data) => {
        switch (typeof data) {
            case 'bigint':
            case 'boolean':
            case 'number':
            case 'symbol':
                return data.toString();
            case 'string':
                return data;
            case 'undefined':
                return 'undefined';
            case 'object':
                if (useJSON)
                    return JSONbig.stringify(data);
            case 'function':
                return inspect(data, inspectOptions);
        }
    };
    const getLogFunction = ([level, height]) => {
        const label = logLevelLabels[height];
        return (...message) => {
            if (record)
                messages.push({ level, message });
            if (height < minHeight)
                return;
            const line = message.map(stringify).join(' ');
            const now = new Date().toISOString().replace('T', ' ').replace('Z', '');
            const lines = line.split('\n').map((_) => `${now} ${label} ${_}\n`);
            stream.write(lines.join(''));
        };
    };
    const logger = Object.fromEntries(Object.entries(logLevels).map((_) => [_[0], getLogFunction(_)]));
    const reset = () => (messages.length = 0);
    return { messages, reset, ...logger };
};
export const logger = createLogger();
//# sourceMappingURL=TestLogger.js.map