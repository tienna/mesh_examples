"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockChainHistoryProvider2 = exports.mockChainHistoryProvider = exports.blocksByHashes = exports.queryTransactionsResult2 = exports.queryTransactionsResult = exports.generateTxAlonzo = exports.getRandomTxId = void 0;
const AssetId = __importStar(require("../assetId"));
const core_1 = require("@cardano-sdk/core");
const mockData_1 = require("./mockData");
const createStubStakePoolProvider_1 = require("../createStubStakePoolProvider");
const delay_1 = __importDefault(require("delay"));
const getRandomTxId = () => Array.from({ length: 64 })
    .map(() => Math.floor(Math.random() * 16).toString(16))
    .join('');
exports.getRandomTxId = getRandomTxId;
const address = core_1.Cardano.PaymentAddress('addr_test1qq585l3hyxgj3nas2v3xymd23vvartfhceme6gv98aaeg9muzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475q2g7k3g');
const generateTxAlonzo = (qty) => [...Array.from({ length: qty }).keys()].map((index) => ({
    blockHeader: {
        blockNo: core_1.Cardano.BlockNo(10669),
        slot: core_1.Cardano.Slot(37834496)
    },
    body: {
        fee: 200000n,
        inputs: [
            {
                address,
                index,
                txId: core_1.Cardano.TransactionId((0, exports.getRandomTxId)())
            }
        ],
        outputs: [
            {
                address,
                value: { coins: 5000000n }
            }
        ],
        validityInterval: {
            invalidHereafter: core_1.Cardano.Slot(20000 + index)
        }
    },
    id: core_1.Cardano.TransactionId((0, exports.getRandomTxId)()),
    index,
    inputSource: core_1.Cardano.InputSource.inputs,
    txSize: 100000,
    witness: {
        signatures: new Map()
    }
}));
exports.generateTxAlonzo = generateTxAlonzo;
exports.queryTransactionsResult = {
    pageResults: [
        {
            blockHeader: {
                blockNo: core_1.Cardano.BlockNo(10050),
                slot: core_1.Cardano.Slot(mockData_1.ledgerTip.slot - 150000)
            },
            body: {
                certificates: [
                    {
                        __typename: core_1.Cardano.CertificateType.StakeRegistration,
                        stakeCredential: mockData_1.stakeCredential
                    },
                    {
                        __typename: core_1.Cardano.CertificateType.StakeDelegation,
                        poolId: createStubStakePoolProvider_1.somePartialStakePools[0].id,
                        stakeCredential: mockData_1.stakeCredential
                    }
                ],
                fee: 200000n,
                inputs: [
                    {
                        address: core_1.Cardano.PaymentAddress('addr_test1qq585l3hyxgj3nas2v3xymd23vvartfhceme6gv98aaeg9muzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475q2g7k3g'),
                        index: 0,
                        txId: core_1.Cardano.TransactionId('bb217abaca60fc0ca68c1555eca6a96d2478547818ae76ce6836133f3cc546e0')
                    }
                ],
                outputs: [
                    {
                        address: core_1.Cardano.PaymentAddress('addr_test1qpfhhfy2qgls50r9u4yh0l7z67xpg0a5rrhkmvzcuqrd0znuzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475q9gw0lz'),
                        value: { coins: 5000000n }
                    },
                    {
                        address: core_1.Cardano.PaymentAddress('addr_test1qplfzem2xsc29wxysf8wkdqrm4s4mmncd40qnjq9sk84l3tuzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475q52ukj5'),
                        value: { coins: 5000000n }
                    },
                    {
                        address: core_1.Cardano.PaymentAddress('addr_test1qqydn46r6mhge0kfpqmt36m6q43knzsd9ga32n96m89px3nuzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475qypp3m9'),
                        value: { coins: 9825963n }
                    }
                ],
                validityInterval: {
                    invalidHereafter: core_1.Cardano.Slot(mockData_1.ledgerTip.slot + 1)
                }
            },
            id: core_1.Cardano.TransactionId('12fa9af65e21b36ec4dc4cbce478e911d52585adb46f2b4fe3d6563e7ee5a61a'),
            index: 0,
            inputSource: core_1.Cardano.InputSource.inputs,
            txSize: 100000,
            witness: {
                signatures: new Map()
            }
        },
        {
            blockHeader: {
                blockNo: core_1.Cardano.BlockNo(10100),
                slot: core_1.Cardano.Slot(mockData_1.ledgerTip.slot - 100000)
            },
            body: {
                fee: 123n,
                inputs: [
                    {
                        address: core_1.Cardano.PaymentAddress('addr_test1qpfhhfy2qgls50r9u4yh0l7z67xpg0a5rrhkmvzcuqrd0znuzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475q9gw0lz'),
                        index: 0,
                        txId: core_1.Cardano.TransactionId('bb217abaca60fc0ca68c1555eca6a96d2478547818ae76ce6836133f3cc546e0')
                    }
                ],
                outputs: [
                    {
                        address: core_1.Cardano.PaymentAddress('addr_test1qq585l3hyxgj3nas2v3xymd23vvartfhceme6gv98aaeg9muzcjqw982pcftgx53fu5527z2cj2tkx2h8ux2vxsg475q2g7k3g'),
                        value: {
                            assets: new Map([
                                [AssetId.TSLA, 1n],
                                [mockData_1.handleAssetId, 1n]
                            ]),
                            coins: 5000000n
                        }
                    }
                ],
                validityInterval: {
                    invalidHereafter: core_1.Cardano.Slot(mockData_1.ledgerTip.slot + 1)
                }
            },
            id: core_1.Cardano.TransactionId('6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad'),
            index: 1,
            inputSource: core_1.Cardano.InputSource.inputs,
            txSize: 200000,
            witness: {
                signatures: new Map()
            }
        }
    ],
    totalResultCount: 2
};
exports.queryTransactionsResult2 = {
    pageResults: [
        ...exports.queryTransactionsResult.pageResults,
        {
            ...exports.queryTransactionsResult.pageResults[1],
            blockHeader: {
                blockNo: core_1.Cardano.BlockNo(10150),
                slot: core_1.Cardano.Slot(mockData_1.ledgerTip.slot - 50000)
            },
            id: core_1.Cardano.TransactionId('6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99caa')
        }
    ],
    totalResultCount: 3
};
const queryTransactions = ({ rewardAccount } = {}) => jest
    .fn()
    .mockResolvedValueOnce({
    ...exports.queryTransactionsResult,
    pageResults: rewardAccount
        ? exports.queryTransactionsResult.pageResults.map((tx) => ({
            ...tx,
            body: {
                ...tx.body,
                certificates: tx.body.certificates?.map((certificate) => 'stakeCredential' in certificate
                    ? {
                        ...certificate,
                        stakeCredential: {
                            hash: core_1.Cardano.RewardAccount.toHash(rewardAccount),
                            type: core_1.Cardano.CredentialType.KeyHash
                        }
                    }
                    : certificate)
            }
        }))
        : exports.queryTransactionsResult.pageResults
})
    .mockResolvedValue({
    pageResults: exports.queryTransactionsResult.pageResults,
    totalResultCount: 0
});
exports.blocksByHashes = [{ epoch: core_1.Cardano.EpochNo(mockData_1.currentEpoch.number - 3) }];
const mockChainHistoryProvider = (props = {}) => ({
    blocksByHashes: jest.fn().mockResolvedValue(exports.blocksByHashes),
    healthCheck: jest.fn().mockResolvedValue({ ok: true }),
    transactionsByAddresses: queryTransactions(props),
    transactionsByHashes: queryTransactions(props)
});
exports.mockChainHistoryProvider = mockChainHistoryProvider;
const mockChainHistoryProvider2 = (delayMs) => {
    const delayedJestFn = (resolvedValue) => jest.fn().mockImplementationOnce(() => (0, delay_1.default)(delayMs).then(() => resolvedValue));
    return {
        blocksByHashes: delayedJestFn(exports.blocksByHashes),
        healthCheck: delayedJestFn({ ok: true }),
        transactionsByAddresses: delayedJestFn(exports.queryTransactionsResult2),
        transactionsByHashes: delayedJestFn(exports.queryTransactionsResult2)
    };
};
exports.mockChainHistoryProvider2 = mockChainHistoryProvider2;
//# sourceMappingURL=mockChainHistoryProvider.js.map