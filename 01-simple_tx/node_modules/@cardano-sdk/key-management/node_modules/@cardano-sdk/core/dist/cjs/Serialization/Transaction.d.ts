import * as Cardano from '../Cardano';
import { AuxiliaryData } from './AuxiliaryData';
import { TransactionBody } from './TransactionBody';
import { TransactionWitnessSet } from './TransactionWitnessSet';
import type { TxCBOR } from '../CBOR';
export declare class Transaction {
    #private;
    constructor(body: TransactionBody, witnessSet: TransactionWitnessSet, auxiliaryData?: AuxiliaryData);
    toCbor(): TxCBOR;
    static fromCbor(cbor: TxCBOR): Transaction;
    toCore(): Cardano.Tx;
    static fromCore(tx: Cardano.Tx): Transaction;
    body(): TransactionBody;
    setBody(body: TransactionBody): void;
    witnessSet(): TransactionWitnessSet;
    setWitnessSet(witnessSet: TransactionWitnessSet): void;
    isValid(): boolean;
    setIsValid(valid: boolean): void;
    auxiliaryData(): AuxiliaryData | undefined;
    setAuxiliaryData(auxiliaryData: AuxiliaryData | undefined): void;
    getId(): Cardano.TransactionId;
    clone(): Transaction;
}
//# sourceMappingURL=Transaction.d.ts.map