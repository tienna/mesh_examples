"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeImplicitCoin = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const util_1 = require("@cardano-sdk/util");
const __1 = require("../..");
const stakeCredentialInRewardAccounts = (stakeCredential, rewardAccounts) => {
    if (rewardAccounts.length === 0)
        return true;
    const networkId = __1.Cardano.RewardAccount.toNetworkId(rewardAccounts[0]);
    return rewardAccounts.includes(__1.Cardano.RewardAccount.fromCredential(stakeCredential, networkId));
};
const computeShellyDeposits = (depositParams, certificates, rewardAccounts) => {
    let deposit = 0n;
    let reclaimDeposit = 0n;
    const anyRewardAccount = rewardAccounts.length === 0;
    const poolIds = new Set(rewardAccounts.map((account) => __1.Cardano.PoolId.fromKeyHash(__1.Cardano.RewardAccount.toHash(account))));
    for (const cert of certificates) {
        switch (cert.__typename) {
            case __1.Cardano.CertificateType.StakeRegistration:
                if (stakeCredentialInRewardAccounts(cert.stakeCredential, rewardAccounts))
                    deposit += depositParams.stakeKeyDeposit;
                break;
            case __1.Cardano.CertificateType.StakeDeregistration:
                if (stakeCredentialInRewardAccounts(cert.stakeCredential, rewardAccounts))
                    reclaimDeposit += depositParams.stakeKeyDeposit;
                break;
            case __1.Cardano.CertificateType.PoolRegistration:
                if (anyRewardAccount || rewardAccounts.some((acct) => cert.poolParameters.owners.includes(acct)))
                    deposit += depositParams.poolDeposit;
                break;
            case __1.Cardano.CertificateType.PoolRetirement: {
                if (anyRewardAccount || poolIds.has(cert.poolId))
                    reclaimDeposit += depositParams.poolDeposit;
                break;
            }
        }
    }
    return {
        deposit,
        reclaimDeposit
    };
};
const computeConwayDeposits = (certificates, rewardAccounts, dRepKeyHash, proposalProcedures) => {
    let deposit = 0n;
    let reclaimDeposit = 0n;
    for (const cert of certificates) {
        switch (cert.__typename) {
            case __1.Cardano.CertificateType.Registration:
            case __1.Cardano.CertificateType.StakeRegistrationDelegation:
            case __1.Cardano.CertificateType.VoteRegistrationDelegation:
            case __1.Cardano.CertificateType.StakeVoteRegistrationDelegation:
                if (stakeCredentialInRewardAccounts(cert.stakeCredential, rewardAccounts))
                    deposit += cert.deposit;
                break;
            case __1.Cardano.CertificateType.Unregistration:
                if (stakeCredentialInRewardAccounts(cert.stakeCredential, rewardAccounts))
                    reclaimDeposit += cert.deposit;
                break;
            case __1.Cardano.CertificateType.RegisterDelegateRepresentative:
            case __1.Cardano.CertificateType.UnregisterDelegateRepresentative:
                if (!dRepKeyHash ||
                    (cert.dRepCredential.type === __1.Cardano.CredentialType.KeyHash &&
                        cert.dRepCredential.hash === Crypto.Hash28ByteBase16.fromEd25519KeyHashHex(dRepKeyHash))) {
                    cert.__typename === __1.Cardano.CertificateType.RegisterDelegateRepresentative
                        ? (deposit += cert.deposit)
                        : (reclaimDeposit += cert.deposit);
                }
                break;
        }
    }
    if (proposalProcedures)
        for (const proposal of proposalProcedures)
            deposit += proposal.deposit;
    return {
        deposit,
        reclaimDeposit
    };
};
const getTxDeposits = ({ stakeKeyDeposit, poolDeposit }, certificates, rewardAccounts = [], dRepKeyHash, proposalProcedures) => {
    if (certificates.length === 0 && (!proposalProcedures || proposalProcedures.length === 0))
        return { deposit: 0n, reclaimDeposit: 0n };
    const depositParams = {
        poolDeposit: poolDeposit ? BigInt(poolDeposit) : 0n,
        stakeKeyDeposit: BigInt(stakeKeyDeposit)
    };
    const shelleyDeposits = computeShellyDeposits(depositParams, certificates, rewardAccounts);
    const conwayDeposits = computeConwayDeposits(certificates, rewardAccounts, dRepKeyHash, proposalProcedures);
    return {
        deposit: shelleyDeposits.deposit + conwayDeposits.deposit,
        reclaimDeposit: shelleyDeposits.reclaimDeposit + conwayDeposits.reclaimDeposit
    };
};
const computeImplicitCoin = ({ stakeKeyDeposit, poolDeposit }, { certificates, proposalProcedures, withdrawals }, rewardAccounts, dRepKeyHash) => {
    const { deposit, reclaimDeposit } = getTxDeposits({ poolDeposit, stakeKeyDeposit }, certificates ?? [], rewardAccounts, dRepKeyHash, proposalProcedures);
    const withdrawalsTotal = (withdrawals && util_1.BigIntMath.sum(withdrawals.map(({ quantity }) => quantity))) || 0n;
    return {
        deposit,
        input: withdrawalsTotal + reclaimDeposit,
        reclaimDeposit,
        withdrawals: withdrawalsTotal
    };
};
exports.computeImplicitCoin = computeImplicitCoin;
//# sourceMappingURL=computeImplicitCoin.js.map