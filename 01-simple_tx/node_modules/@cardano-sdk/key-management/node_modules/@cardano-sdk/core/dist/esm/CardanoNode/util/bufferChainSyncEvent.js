import { Observable } from 'rxjs';
export const bufferChainSyncEvent = (length) => (source$) => new Observable((subscriber) => {
    const buffer = [];
    let lastPull;
    let unsubscribed = false;
    let subscriberReady = true;
    let sourceCompleted = false;
    let sourceError;
    const next = () => {
        if (unsubscribed)
            return;
        if (buffer.length < length && lastPull) {
            lastPull();
            lastPull = undefined;
        }
        if (!subscriberReady)
            return;
        if (buffer.length === 0) {
            if (sourceCompleted)
                return subscriber.complete();
            if (sourceError)
                return subscriber.error(sourceError);
            return;
        }
        const value = buffer.shift();
        subscriberReady = false;
        subscriber.next({
            ...value,
            requestNext: () => {
                subscriberReady = true;
                next();
            }
        });
    };
    const subscription = source$.subscribe({
        complete: () => {
            sourceCompleted = true;
            next();
        },
        error: (error) => {
            sourceError = error;
            next();
        },
        next: (value) => {
            lastPull = value.requestNext;
            buffer.push(value);
            next();
        }
    });
    return () => {
        subscription.unsubscribe();
        unsubscribed = true;
    };
});
//# sourceMappingURL=bufferChainSyncEvent.js.map