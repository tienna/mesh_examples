"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _MoveInstantaneousReward_toOtherPot, _MoveInstantaneousReward_toStakeCreds, _MoveInstantaneousReward_kind, _MoveInstantaneousReward_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveInstantaneousReward = void 0;
const Cardano = __importStar(require("../../../Cardano"));
const CBOR_1 = require("../../CBOR");
const CertificateKind_1 = require("../CertificateKind");
const util_1 = require("@cardano-sdk/util");
const MoveInstantaneousRewardToOtherPot_1 = require("./MoveInstantaneousRewardToOtherPot");
const MoveInstantaneousRewardToStakeCreds_1 = require("./MoveInstantaneousRewardToStakeCreds");
const EMBEDDED_GROUP_SIZE = 2;
class MoveInstantaneousReward {
    constructor() {
        _MoveInstantaneousReward_toOtherPot.set(this, void 0);
        _MoveInstantaneousReward_toStakeCreds.set(this, void 0);
        _MoveInstantaneousReward_kind.set(this, void 0);
        _MoveInstantaneousReward_originalBytes.set(this, undefined);
    }
    toCbor() {
        if (__classPrivateFieldGet(this, _MoveInstantaneousReward_originalBytes, "f"))
            return __classPrivateFieldGet(this, _MoveInstantaneousReward_originalBytes, "f");
        let cbor;
        switch (__classPrivateFieldGet(this, _MoveInstantaneousReward_kind, "f")) {
            case Cardano.MirCertificateKind.ToOtherPot:
                cbor = __classPrivateFieldGet(this, _MoveInstantaneousReward_toOtherPot, "f").toCbor();
                break;
            case Cardano.MirCertificateKind.ToStakeCreds:
                cbor = __classPrivateFieldGet(this, _MoveInstantaneousReward_toStakeCreds, "f").toCbor();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _MoveInstantaneousReward_kind, "f")}`);
        }
        const writer = new CBOR_1.CborWriter();
        writer.writeStartArray(EMBEDDED_GROUP_SIZE);
        writer.writeInt(CertificateKind_1.CertificateKind.MoveInstantaneousRewards);
        writer.writeEncodedValue(Buffer.from(cbor, 'hex'));
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const reader = new CBOR_1.CborReader(cbor);
        let elementsCount = reader.readStartArray();
        if (elementsCount !== EMBEDDED_GROUP_SIZE)
            throw new util_1.InvalidArgumentError('cbor', `Expected elements size ${EMBEDDED_GROUP_SIZE}, but got ${elementsCount}`);
        const kind = Number(reader.readInt());
        if (kind !== CertificateKind_1.CertificateKind.MoveInstantaneousRewards)
            throw new util_1.InvalidArgumentError('cbor', `Expected certificate kind ${CertificateKind_1.CertificateKind.MoveInstantaneousRewards}, but got ${kind}`);
        const embeddedCbor = util_1.HexBlob.fromBytes(reader.readEncodedValue());
        const embeddedCborReader = new CBOR_1.CborReader(embeddedCbor);
        elementsCount = embeddedCborReader.readStartArray();
        if (elementsCount !== EMBEDDED_GROUP_SIZE)
            throw new util_1.InvalidArgumentError('cbor', `Expected elements size ${EMBEDDED_GROUP_SIZE}, but got ${elementsCount}`);
        const cert = new MoveInstantaneousReward();
        embeddedCborReader.readInt();
        if (embeddedCborReader.peekState() === CBOR_1.CborReaderState.UnsignedInteger) {
            __classPrivateFieldSet(cert, _MoveInstantaneousReward_toOtherPot, MoveInstantaneousRewardToOtherPot_1.MoveInstantaneousRewardToOtherPot.fromCbor(embeddedCbor), "f");
            __classPrivateFieldSet(cert, _MoveInstantaneousReward_kind, Cardano.MirCertificateKind.ToOtherPot, "f");
        }
        else if (embeddedCborReader.peekState() === CBOR_1.CborReaderState.StartArray ||
            embeddedCborReader.peekState() === CBOR_1.CborReaderState.StartMap) {
            __classPrivateFieldSet(cert, _MoveInstantaneousReward_toStakeCreds, MoveInstantaneousRewardToStakeCreds_1.MoveInstantaneousRewardToStakeCreds.fromCbor(embeddedCbor), "f");
            __classPrivateFieldSet(cert, _MoveInstantaneousReward_kind, Cardano.MirCertificateKind.ToStakeCreds, "f");
        }
        else {
            throw new util_1.InvalidArgumentError('cbor', 'Invalid CBOR string');
        }
        __classPrivateFieldSet(cert, _MoveInstantaneousReward_originalBytes, cbor, "f");
        return cert;
    }
    toCore() {
        let core;
        switch (__classPrivateFieldGet(this, _MoveInstantaneousReward_kind, "f")) {
            case Cardano.MirCertificateKind.ToOtherPot:
                core = __classPrivateFieldGet(this, _MoveInstantaneousReward_toOtherPot, "f").toCore();
                break;
            case Cardano.MirCertificateKind.ToStakeCreds:
                core = __classPrivateFieldGet(this, _MoveInstantaneousReward_toStakeCreds, "f").toCore();
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${__classPrivateFieldGet(this, _MoveInstantaneousReward_kind, "f")}`);
        }
        return core;
    }
    static fromCore(cert) {
        const mirCert = new MoveInstantaneousReward();
        switch (cert.kind) {
            case Cardano.MirCertificateKind.ToOtherPot:
                __classPrivateFieldSet(mirCert, _MoveInstantaneousReward_toOtherPot, MoveInstantaneousRewardToOtherPot_1.MoveInstantaneousRewardToOtherPot.fromCore(cert), "f");
                __classPrivateFieldSet(mirCert, _MoveInstantaneousReward_kind, Cardano.MirCertificateKind.ToOtherPot, "f");
                break;
            case Cardano.MirCertificateKind.ToStakeCreds:
                __classPrivateFieldSet(mirCert, _MoveInstantaneousReward_toStakeCreds, MoveInstantaneousRewardToStakeCreds_1.MoveInstantaneousRewardToStakeCreds.fromCore(cert), "f");
                __classPrivateFieldSet(mirCert, _MoveInstantaneousReward_kind, Cardano.MirCertificateKind.ToStakeCreds, "f");
                break;
            default:
                throw new util_1.InvalidStateError(`Unexpected kind value: ${cert.kind}`);
        }
        return mirCert;
    }
    static newToOtherPot(mirCert) {
        const cert = new MoveInstantaneousReward();
        __classPrivateFieldSet(cert, _MoveInstantaneousReward_toOtherPot, mirCert, "f");
        __classPrivateFieldSet(cert, _MoveInstantaneousReward_kind, Cardano.MirCertificateKind.ToOtherPot, "f");
        return cert;
    }
    static newToStakeCreds(mirCert) {
        const cert = new MoveInstantaneousReward();
        __classPrivateFieldSet(cert, _MoveInstantaneousReward_toStakeCreds, mirCert, "f");
        __classPrivateFieldSet(cert, _MoveInstantaneousReward_kind, Cardano.MirCertificateKind.ToStakeCreds, "f");
        return cert;
    }
    kind() {
        return __classPrivateFieldGet(this, _MoveInstantaneousReward_kind, "f");
    }
    asToOtherPot() {
        return __classPrivateFieldGet(this, _MoveInstantaneousReward_toOtherPot, "f");
    }
    asToStakeCreds() {
        return __classPrivateFieldGet(this, _MoveInstantaneousReward_toStakeCreds, "f");
    }
}
exports.MoveInstantaneousReward = MoveInstantaneousReward;
_MoveInstantaneousReward_toOtherPot = new WeakMap(), _MoveInstantaneousReward_toStakeCreds = new WeakMap(), _MoveInstantaneousReward_kind = new WeakMap(), _MoveInstantaneousReward_originalBytes = new WeakMap();
//# sourceMappingURL=MoveInstantaneousReward.js.map