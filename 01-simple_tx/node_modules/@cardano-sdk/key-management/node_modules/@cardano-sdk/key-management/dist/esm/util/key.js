import { CardanoKeyConst, KeyPurpose, KeyRole } from '../types.js';
export const harden = (num) => 2147483648 + num;
export const STAKE_KEY_DERIVATION_PATH = {
    index: 0,
    role: KeyRole.Stake
};
export const DREP_KEY_DERIVATION_PATH = {
    index: 0,
    role: KeyRole.DRep
};
export const toEd25519KeyPair = async (bip32KeyPair, provider) => ({
    skey: await provider.getRawPrivateKey(bip32KeyPair.skey),
    vkey: await provider.getRawPublicKey(bip32KeyPair.vkey)
});
export const deriveAccountPrivateKey = async ({ rootPrivateKey, accountIndex, bip32Ed25519, purpose = KeyPurpose.STANDARD }) => await bip32Ed25519.derivePrivateKey(rootPrivateKey, [
    harden(purpose),
    harden(CardanoKeyConst.COIN_TYPE),
    harden(accountIndex)
]);
export const accountKeyDerivationPathToBip32Path = (accountIndex, { index, role }, purpose = CardanoKeyConst.PURPOSE) => [harden(purpose), harden(CardanoKeyConst.COIN_TYPE), harden(accountIndex), role, index];
export const paymentKeyPathFromGroupedAddress = (address) => [
    harden(CardanoKeyConst.PURPOSE),
    harden(CardanoKeyConst.COIN_TYPE),
    harden(address.accountIndex),
    address.type,
    address.index
];
export const stakeKeyPathFromGroupedAddress = (address) => {
    if (!address?.stakeKeyDerivationPath)
        return null;
    return [
        harden(CardanoKeyConst.PURPOSE),
        harden(CardanoKeyConst.COIN_TYPE),
        harden(address.accountIndex),
        address.stakeKeyDerivationPath.role,
        address.stakeKeyDerivationPath.index
    ];
};
//# sourceMappingURL=key.js.map