import * as Crypto from '@cardano-sdk/crypto';
import { GroupedAddress, KeyAgent, MessageSender } from '../types.js';
import { COSEKey } from '@emurgo/cardano-message-signing-nodejs';
import { Cardano } from '@cardano-sdk/core';
import { Cip30DataSignature } from '@cardano-sdk/dapp-connector';
import { Cip8SignDataContext } from './types.js';
import { ComposableError, HexBlob } from '@cardano-sdk/util';
export interface Cip30SignDataRequest {
    knownAddresses: GroupedAddress[];
    signWith: Cardano.PaymentAddress | Cardano.RewardAccount | Cardano.DRepID;
    payload: HexBlob;
    sender?: MessageSender;
}
export declare enum Cip30DataSignErrorCode {
    ProofGeneration = 1,
    AddressNotPK = 2,
    UserDeclined = 3
}
export declare class Cip30DataSignError<InnerError = unknown> extends ComposableError<InnerError> {
    readonly code: Cip30DataSignErrorCode;
    readonly info: string;
    constructor(code: Cip30DataSignErrorCode, info: string, innerError?: InnerError);
}
export declare const getAddressBytes: (signWith: Cardano.PaymentAddress | Cardano.RewardAccount | Cardano.DRepID) => Buffer;
export declare const createCoseKey: (addressBytes: Uint8Array, publicKey: Crypto.Ed25519PublicKeyHex) => COSEKey;
export declare const cip30signData: (keyAgent: KeyAgent, { knownAddresses, signWith, payload }: Cip8SignDataContext) => Promise<Cip30DataSignature>;
//# sourceMappingURL=cip30signData.d.ts.map