import * as Crypto from '@cardano-sdk/crypto';
import { deepEquals } from '@cardano-sdk/util';
import { ownSignatureKeyPaths } from './ownSignatureKeyPaths.js';
import uniqWith from 'lodash/uniqWith.js';
const randomHexChar = () => Math.floor(Math.random() * 16).toString(16);
const randomPublicKey = () => Crypto.Ed25519PublicKeyHex(Array.from({ length: 64 }).map(randomHexChar).join(''));
export const stubSignTransaction = async ({ txBody, context: { knownAddresses, txInKeyPathMap, dRepKeyHashHex: dRepKeyHash }, signTransactionOptions: { extraSigners, additionalKeyPaths = [] } = {} }) => {
    const mockSignature = Crypto.Ed25519SignatureHex('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
    const signatureKeyPaths = uniqWith([...ownSignatureKeyPaths(txBody, knownAddresses, txInKeyPathMap, dRepKeyHash), ...additionalKeyPaths], deepEquals);
    const totalSignature = signatureKeyPaths.length + (extraSigners?.length || 0);
    const signatureMap = new Map();
    for (let i = 0; i < totalSignature; ++i)
        signatureMap.set(randomPublicKey(), mockSignature);
    return signatureMap;
};
//# sourceMappingURL=stubSignTransaction.js.map