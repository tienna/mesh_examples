"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stubSignTransaction = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const util_1 = require("@cardano-sdk/util");
const ownSignatureKeyPaths_1 = require("./ownSignatureKeyPaths");
const uniqWith_js_1 = __importDefault(require("lodash/uniqWith.js"));
const randomHexChar = () => Math.floor(Math.random() * 16).toString(16);
const randomPublicKey = () => Crypto.Ed25519PublicKeyHex(Array.from({ length: 64 }).map(randomHexChar).join(''));
const stubSignTransaction = async ({ txBody, context: { knownAddresses, txInKeyPathMap, dRepKeyHashHex: dRepKeyHash }, signTransactionOptions: { extraSigners, additionalKeyPaths = [] } = {} }) => {
    const mockSignature = Crypto.Ed25519SignatureHex('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
    const signatureKeyPaths = (0, uniqWith_js_1.default)([...(0, ownSignatureKeyPaths_1.ownSignatureKeyPaths)(txBody, knownAddresses, txInKeyPathMap, dRepKeyHash), ...additionalKeyPaths], util_1.deepEquals);
    const totalSignature = signatureKeyPaths.length + (extraSigners?.length || 0);
    const signatureMap = new Map();
    for (let i = 0; i < totalSignature; ++i)
        signatureMap.set(randomPublicKey(), mockSignature);
    return signatureMap;
};
exports.stubSignTransaction = stubSignTransaction;
//# sourceMappingURL=stubSignTransaction.js.map