import { AsyncKeyAgent, SignTransactionContext, SignTransactionOptions, WitnessOptions, WitnessedTx, Witnesser } from '../types';
import { Cip30DataSignature } from '@cardano-sdk/dapp-connector';
import { Cip30SignDataRequest } from '../cip8';
import { Serialization } from '@cardano-sdk/core';
export declare class Bip32Ed25519Witnesser implements Witnesser {
    #private;
    constructor(keyAgent: AsyncKeyAgent);
    witness(tx: Serialization.Transaction, context: SignTransactionContext, options?: WitnessOptions): Promise<WitnessedTx>;
    signData(props: Cip30SignDataRequest): Promise<Cip30DataSignature>;
    static getSignatures(keyAgent: AsyncKeyAgent, txBody: Serialization.TransactionBody, context: SignTransactionContext, options?: SignTransactionOptions): Promise<import("@cardano-sdk/core/dist/cjs/Cardano").Signatures>;
}
export declare const createBip32Ed25519Witnesser: (keyAgent: AsyncKeyAgent) => Bip32Ed25519Witnesser;
//# sourceMappingURL=createWitnesser.d.ts.map