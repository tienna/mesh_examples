import * as Crypto from '@cardano-sdk/crypto';
import { AccountKeyDerivationPath, Ed25519KeyPair, GroupedAddress, KeyPair, KeyPurpose } from '../types.js';
import { BIP32Path } from '@cardano-sdk/crypto';
export declare const harden: (num: number) => number;
export declare const STAKE_KEY_DERIVATION_PATH: AccountKeyDerivationPath;
export declare const DREP_KEY_DERIVATION_PATH: AccountKeyDerivationPath;
export declare const toEd25519KeyPair: (bip32KeyPair: KeyPair, provider: Crypto.Bip32Ed25519) => Promise<Ed25519KeyPair>;
export interface DeriveAccountPrivateKeyProps {
    rootPrivateKey: Crypto.Bip32PrivateKeyHex;
    accountIndex: number;
    bip32Ed25519: Crypto.Bip32Ed25519;
    purpose?: KeyPurpose;
}
export declare const deriveAccountPrivateKey: ({ rootPrivateKey, accountIndex, bip32Ed25519, purpose }: DeriveAccountPrivateKeyProps) => Promise<Crypto.Bip32PrivateKeyHex>;
export declare const accountKeyDerivationPathToBip32Path: (accountIndex: number, { index, role }: AccountKeyDerivationPath, purpose?: number) => Crypto.BIP32Path;
export declare const paymentKeyPathFromGroupedAddress: (address: GroupedAddress) => Crypto.BIP32Path;
export declare const stakeKeyPathFromGroupedAddress: (address: GroupedAddress | undefined) => BIP32Path | null;
//# sourceMappingURL=key.d.ts.map