"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DRepID = void 0;
const BaseEncoding = __importStar(require("@scure/base"));
const Address_1 = require("./Address");
const crypto_1 = require("@cardano-sdk/crypto");
const util_1 = require("@cardano-sdk/util");
const MAX_BECH32_LENGTH_LIMIT = 1023;
const CIP_105_DREP_ID_LENGTH = 28;
const CIP_129_DREP_ID_LENGTH = 29;
const DRepID = (value) => {
    try {
        return (0, util_1.typedBech32)(value, ['drep'], 47);
    }
    catch {
        return (0, util_1.typedBech32)(value, ['drep', 'drep_script'], 45);
    }
};
exports.DRepID = DRepID;
exports.DRepID.isValid = (value) => {
    try {
        (0, exports.DRepID)(value);
        return true;
    }
    catch {
        return false;
    }
};
exports.DRepID.canSign = (value) => {
    try {
        return exports.DRepID.isValid(value) && Address_1.Address.fromBech32(value).getType() === Address_1.AddressType.EnterpriseKey;
    }
    catch {
        return false;
    }
};
exports.DRepID.cip105FromCredential = (credential) => {
    let prefix = 'drep';
    if (credential.type === Address_1.CredentialType.ScriptHash) {
        prefix = 'drep_script';
    }
    const words = BaseEncoding.bech32.toWords(Buffer.from(credential.hash, 'hex'));
    return BaseEncoding.bech32.encode(prefix, words, MAX_BECH32_LENGTH_LIMIT);
};
exports.DRepID.cip129FromCredential = (credential) => {
    let header = '22';
    if (credential.type === Address_1.CredentialType.ScriptHash) {
        header = '23';
    }
    const cip129payload = `${header}${credential.hash}`;
    const words = BaseEncoding.bech32.toWords(Buffer.from(cip129payload, 'hex'));
    return BaseEncoding.bech32.encode('drep', words, MAX_BECH32_LENGTH_LIMIT);
};
exports.DRepID.toCredential = (drepId) => {
    const { words } = BaseEncoding.bech32.decode(drepId, MAX_BECH32_LENGTH_LIMIT);
    const payload = BaseEncoding.bech32.fromWords(words);
    if (payload.length !== CIP_105_DREP_ID_LENGTH && payload.length !== CIP_129_DREP_ID_LENGTH) {
        throw new Error('Invalid DRepID payload');
    }
    if (payload.length === CIP_105_DREP_ID_LENGTH) {
        const isScriptHash = drepId.includes('drep_script');
        return {
            hash: (0, crypto_1.Hash28ByteBase16)(Buffer.from(payload).toString('hex')),
            type: isScriptHash ? Address_1.CredentialType.ScriptHash : Address_1.CredentialType.KeyHash
        };
    }
    const header = payload[0];
    const hash = payload.slice(1);
    const isDrepGovCred = (header & 0x20) === 0x20;
    const isScriptHash = (header & 0x03) === 0x03;
    if (!isDrepGovCred) {
        throw new Error('Invalid governance credential type');
    }
    return {
        hash: (0, crypto_1.Hash28ByteBase16)(Buffer.from(hash).toString('hex')),
        type: isScriptHash ? Address_1.CredentialType.ScriptHash : Address_1.CredentialType.KeyHash
    };
};
exports.DRepID.toCip105DRepID = (drepId) => {
    const credential = exports.DRepID.toCredential(drepId);
    return exports.DRepID.cip105FromCredential(credential);
};
exports.DRepID.toCip129DRepID = (drepId) => {
    const credential = exports.DRepID.toCredential(drepId);
    return exports.DRepID.cip129FromCredential(credential);
};
//# sourceMappingURL=DRepID.js.map