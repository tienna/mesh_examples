import * as Crypto from '@cardano-sdk/crypto';
import { AccountKeyDerivationPath, GroupedAddress, TxInId, TxInKeyPathMap } from '../types';
import { Cardano } from '@cardano-sdk/core';
export declare type StakeKeySignerData = {
    poolId: Cardano.PoolId;
    rewardAccount: Cardano.RewardAccount;
    stakeKeyHash: Crypto.Ed25519KeyHashHex;
    derivationPath: AccountKeyDerivationPath;
};
declare type SignatureCheck = {
    derivationPaths: AccountKeyDerivationPath[];
    requiresForeignSignatures: boolean;
};
export declare const checkStakeCredentialCertificates: (accounts: StakeKeySignerData[], { certificates }: Pick<Cardano.TxBody, 'certificates'>) => SignatureCheck;
export declare const getVotingProcedureKeyPaths: ({ groupedAddresses, dRepKeyHash, txBody }: {
    groupedAddresses: GroupedAddress[];
    dRepKeyHash?: Crypto.Ed25519KeyHashHex | undefined;
    txBody: Cardano.TxBody;
}) => SignatureCheck;
export declare const getDRepCredentialKeyPaths: ({ dRepKeyHash, txBody }: {
    dRepKeyHash?: Crypto.Ed25519KeyHashHex | undefined;
    txBody: Cardano.TxBody;
}) => SignatureCheck;
export declare const createTxInKeyPathMap: (txBody: Cardano.TxBody, knownAddresses: GroupedAddress[], inputResolver: Cardano.InputResolver) => Promise<Partial<Record<TxInId, AccountKeyDerivationPath>>>;
export declare const ownSignatureKeyPaths: (txBody: Cardano.TxBody, knownAddresses: GroupedAddress[], txInKeyPathMap: TxInKeyPathMap, dRepKeyHash?: Crypto.Ed25519KeyHashHex) => AccountKeyDerivationPath[];
export {};
//# sourceMappingURL=ownSignatureKeyPaths.d.ts.map