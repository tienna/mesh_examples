"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _InMemoryKeyAgent_instances, _InMemoryKeyAgent_getPassphrase, _InMemoryKeyAgent_decryptRootPrivateKey;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryKeyAgent = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const errors = __importStar(require("./errors"));
const types_1 = require("./types");
const util_1 = require("./util");
const util_2 = require("@cardano-sdk/util");
const KeyAgentBase_1 = require("./KeyAgentBase");
const emip3_1 = require("./emip3");
const uniqBy_js_1 = __importDefault(require("lodash/uniqBy.js"));
const getPassphraseRethrowTypedError = async (getPassphrase) => {
    try {
        return await getPassphrase();
    }
    catch (error) {
        throw new errors.AuthenticationError('Failed to enter passphrase', error);
    }
};
class InMemoryKeyAgent extends KeyAgentBase_1.KeyAgentBase {
    constructor({ getPassphrase, ...serializableData }, dependencies) {
        super({ ...serializableData, __typename: types_1.KeyAgentType.InMemory }, dependencies);
        _InMemoryKeyAgent_instances.add(this);
        _InMemoryKeyAgent_getPassphrase.set(this, void 0);
        __classPrivateFieldSet(this, _InMemoryKeyAgent_getPassphrase, getPassphrase, "f");
    }
    async signBlob({ index, role: type }, blob) {
        const rootPrivateKey = await __classPrivateFieldGet(this, _InMemoryKeyAgent_instances, "m", _InMemoryKeyAgent_decryptRootPrivateKey).call(this);
        const accountKey = await (0, util_1.deriveAccountPrivateKey)({
            accountIndex: this.accountIndex,
            bip32Ed25519: this.bip32Ed25519,
            purpose: this.purpose,
            rootPrivateKey
        });
        const bip32SigningKey = await this.bip32Ed25519.derivePrivateKey(accountKey, [type, index]);
        const signingKey = await this.bip32Ed25519.getRawPrivateKey(bip32SigningKey);
        const signature = await this.bip32Ed25519.sign(signingKey, blob);
        const publicKey = await this.bip32Ed25519.getPublicKey(signingKey);
        return { publicKey, signature };
    }
    async exportRootPrivateKey() {
        return await __classPrivateFieldGet(this, _InMemoryKeyAgent_instances, "m", _InMemoryKeyAgent_decryptRootPrivateKey).call(this, true);
    }
    static async fromBip39MnemonicWords({ chainId, getPassphrase, mnemonicWords, mnemonic2ndFactorPassphrase = '', accountIndex = 0, purpose = types_1.KeyPurpose.STANDARD }, dependencies) {
        const mnemonic = (0, util_1.joinMnemonicWords)(mnemonicWords);
        const validMnemonic = (0, util_1.validateMnemonic)(mnemonic);
        if (!validMnemonic)
            throw new errors.InvalidMnemonicError();
        const entropy = Buffer.from((0, util_1.mnemonicWordsToEntropy)(mnemonicWords), 'hex');
        const rootPrivateKey = dependencies.bip32Ed25519.fromBip39Entropy(entropy, mnemonic2ndFactorPassphrase);
        const passphrase = await getPassphraseRethrowTypedError(getPassphrase);
        const encryptedRootPrivateKey = await (0, emip3_1.emip3encrypt)(Buffer.from(rootPrivateKey, 'hex'), passphrase);
        const accountPrivateKey = await (0, util_1.deriveAccountPrivateKey)({
            accountIndex,
            bip32Ed25519: dependencies.bip32Ed25519,
            purpose,
            rootPrivateKey
        });
        const extendedAccountPublicKey = await dependencies.bip32Ed25519.getBip32PublicKey(accountPrivateKey);
        return new InMemoryKeyAgent({
            accountIndex,
            chainId,
            encryptedRootPrivateKeyBytes: [...encryptedRootPrivateKey],
            extendedAccountPublicKey,
            getPassphrase,
            purpose
        }, dependencies);
    }
    async signTransaction({ body, hash }, { txInKeyPathMap, knownAddresses }, { additionalKeyPaths = [] } = {}) {
        const blob = (0, util_2.HexBlob)(hash);
        const dRepKeyHash = (await Crypto.Ed25519PublicKey.fromHex(await this.derivePublicKey(util_1.DREP_KEY_DERIVATION_PATH)).hash()).hex();
        const derivationPaths = (0, util_1.ownSignatureKeyPaths)(body, knownAddresses, txInKeyPathMap, dRepKeyHash);
        const keyPaths = (0, uniqBy_js_1.default)([...derivationPaths, ...additionalKeyPaths], ({ role, index }) => `${role}.${index}`);
        return new Map(await Promise.all(keyPaths.map(async ({ role, index }) => {
            const { publicKey, signature } = await this.signBlob({ index, role }, blob);
            return [publicKey, signature];
        })));
    }
    async exportExtendedKeyPair(derivationPath) {
        const rootPrivateKey = await this.exportRootPrivateKey();
        const hardenedIndices = derivationPath.map((index) => (0, util_1.harden)(index));
        const childKey = await this.bip32Ed25519.derivePrivateKey(rootPrivateKey, hardenedIndices);
        return {
            skey: childKey,
            vkey: await this.bip32Ed25519.getBip32PublicKey(childKey)
        };
    }
}
exports.InMemoryKeyAgent = InMemoryKeyAgent;
_InMemoryKeyAgent_getPassphrase = new WeakMap(), _InMemoryKeyAgent_instances = new WeakSet(), _InMemoryKeyAgent_decryptRootPrivateKey = async function _InMemoryKeyAgent_decryptRootPrivateKey(noCache) {
    const passphrase = await getPassphraseRethrowTypedError(() => __classPrivateFieldGet(this, _InMemoryKeyAgent_getPassphrase, "f").call(this, noCache));
    let decryptedRootKeyBytes;
    try {
        decryptedRootKeyBytes = await (0, emip3_1.emip3decrypt)(new Uint8Array(this.serializableData.encryptedRootPrivateKeyBytes), passphrase);
    }
    catch (error) {
        throw new errors.AuthenticationError('Failed to decrypt root private key', error);
    }
    return Crypto.Bip32PrivateKeyHex(Buffer.from(decryptedRootKeyBytes).toString('hex'));
};
//# sourceMappingURL=InMemoryKeyAgent.js.map