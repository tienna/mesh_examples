"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bip32Account = void 0;
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const types_1 = require("./types");
const core_1 = require("@cardano-sdk/core");
const crypto_1 = require("@cardano-sdk/crypto");
class Bip32Account {
    constructor({ extendedAccountPublicKey, chainId, accountIndex }) {
        this.extendedAccountPublicKey = Crypto.Bip32PublicKey.fromHex(extendedAccountPublicKey);
        this.chainId = chainId;
        this.accountIndex = accountIndex;
    }
    async derivePublicKey(derivationPath) {
        const key = await this.extendedAccountPublicKey.derive([derivationPath.role, derivationPath.index]);
        return key.toRawKey();
    }
    async deriveAddress(paymentKeyDerivationPath, stakeKeyDerivationIndex) {
        const stakeKeyDerivationPath = {
            index: stakeKeyDerivationIndex,
            role: types_1.KeyRole.Stake
        };
        const derivedPublicPaymentKey = await this.derivePublicKey({
            index: paymentKeyDerivationPath.index,
            role: Number(paymentKeyDerivationPath.type)
        });
        const derivedPublicPaymentKeyHash = await derivedPublicPaymentKey.hash();
        const publicStakeKey = await this.derivePublicKey(stakeKeyDerivationPath);
        const publicStakeKeyHash = await publicStakeKey.hash();
        const stakeCredential = { hash: (0, crypto_1.Hash28ByteBase16)(publicStakeKeyHash.hex()), type: core_1.Cardano.CredentialType.KeyHash };
        const address = core_1.Cardano.BaseAddress.fromCredentials(this.chainId.networkId, { hash: (0, crypto_1.Hash28ByteBase16)(derivedPublicPaymentKeyHash.hex()), type: core_1.Cardano.CredentialType.KeyHash }, stakeCredential).toAddress();
        const rewardAccount = core_1.Cardano.RewardAddress.fromCredentials(this.chainId.networkId, stakeCredential).toAddress();
        return {
            accountIndex: this.accountIndex,
            address: core_1.Cardano.PaymentAddress(address.toBech32()),
            networkId: this.chainId.networkId,
            rewardAccount: core_1.Cardano.RewardAccount(rewardAccount.toBech32()),
            stakeKeyDerivationPath,
            ...paymentKeyDerivationPath
        };
    }
    static async fromAsyncKeyAgent(keyAgent) {
        return new Bip32Account({
            accountIndex: await keyAgent.getAccountIndex(),
            chainId: await keyAgent.getChainId(),
            extendedAccountPublicKey: await keyAgent.getExtendedAccountPublicKey()
        });
    }
}
exports.Bip32Account = Bip32Account;
//# sourceMappingURL=Bip32Account.js.map