import * as Crypto from '@cardano-sdk/crypto';
import { AccountAddressDerivationPath, AccountKeyDerivationPath, GroupedAddress, KeyAgent, KeyAgentDependencies, KeyPurpose, SerializableKeyAgentData, SignBlobResult, SignTransactionContext, SignTransactionOptions } from './types.js';
import { Cardano } from '@cardano-sdk/core';
import { HexBlob } from '@cardano-sdk/util';
export declare abstract class KeyAgentBase implements KeyAgent {
    #private;
    get serializableData(): SerializableKeyAgentData;
    get extendedAccountPublicKey(): Crypto.Bip32PublicKeyHex;
    get chainId(): Cardano.ChainId;
    get accountIndex(): number;
    get bip32Ed25519(): Crypto.Bip32Ed25519;
    get purpose(): KeyPurpose;
    abstract signBlob(derivationPath: AccountKeyDerivationPath, blob: HexBlob): Promise<SignBlobResult>;
    abstract exportRootPrivateKey(): Promise<Crypto.Bip32PrivateKeyHex>;
    abstract signTransaction(txInternals: Cardano.TxBodyWithHash, context: SignTransactionContext, signTransactionOptions?: SignTransactionOptions): Promise<Cardano.Signatures>;
    constructor(serializableData: SerializableKeyAgentData, { bip32Ed25519 }: KeyAgentDependencies);
    deriveAddress(paymentKeyDerivationPath: AccountAddressDerivationPath, stakeKeyDerivationIndex: number): Promise<GroupedAddress>;
    derivePublicKey(derivationPath: AccountKeyDerivationPath): Promise<Crypto.Ed25519PublicKeyHex>;
}
//# sourceMappingURL=KeyAgentBase.d.ts.map