import { GroupedAddress, MessageSender } from '../types.js';
import { Bip32Ed25519Witnesser } from '../util/index.js';
import { Cardano } from '@cardano-sdk/core';
import { Cip30DataSignature } from '@cardano-sdk/dapp-connector';
import { ComposableError, HexBlob } from '@cardano-sdk/util';
export interface Cip30SignDataRequest {
    knownAddresses: GroupedAddress[];
    witnesser: Bip32Ed25519Witnesser;
    signWith: Cardano.PaymentAddress | Cardano.RewardAccount | Cardano.DRepID;
    payload: HexBlob;
    sender?: MessageSender;
}
export declare enum Cip30DataSignErrorCode {
    ProofGeneration = 1,
    AddressNotPK = 2,
    UserDeclined = 3
}
export declare class Cip30DataSignError<InnerError = unknown> extends ComposableError<InnerError> {
    readonly code: Cip30DataSignErrorCode;
    readonly info: string;
    constructor(code: Cip30DataSignErrorCode, info: string, innerError?: InnerError);
}
export declare const cip30signData: ({ knownAddresses, witnesser, signWith, payload, sender }: Cip30SignDataRequest) => Promise<Cip30DataSignature>;
//# sourceMappingURL=cip30signData.d.ts.map