import * as Crypto from '@cardano-sdk/crypto';
import { AccountKeyDerivationPath, GetPassphrase, KeyAgent, KeyAgentDependencies, KeyPair, KeyPurpose, SerializableInMemoryKeyAgentData, SignBlobResult, SignTransactionContext, SignTransactionOptions } from './types.js';
import { Cardano } from '@cardano-sdk/core';
import { HexBlob } from '@cardano-sdk/util';
import { KeyAgentBase } from './KeyAgentBase.js';
export interface InMemoryKeyAgentProps extends Omit<SerializableInMemoryKeyAgentData, '__typename'> {
    getPassphrase: GetPassphrase;
}
export interface FromBip39MnemonicWordsProps {
    chainId: Cardano.ChainId;
    mnemonicWords: string[];
    mnemonic2ndFactorPassphrase?: string;
    getPassphrase: GetPassphrase;
    accountIndex?: number;
    purpose?: KeyPurpose;
}
export declare class InMemoryKeyAgent extends KeyAgentBase implements KeyAgent {
    #private;
    constructor({ getPassphrase, ...serializableData }: InMemoryKeyAgentProps, dependencies: KeyAgentDependencies);
    signBlob({ index, role: type }: AccountKeyDerivationPath, blob: HexBlob): Promise<SignBlobResult>;
    exportRootPrivateKey(): Promise<Crypto.Bip32PrivateKeyHex>;
    static fromBip39MnemonicWords({ chainId, getPassphrase, mnemonicWords, mnemonic2ndFactorPassphrase, accountIndex, purpose }: FromBip39MnemonicWordsProps, dependencies: KeyAgentDependencies): Promise<InMemoryKeyAgent>;
    signTransaction({ body, hash }: Cardano.TxBodyWithHash, { txInKeyPathMap, knownAddresses }: SignTransactionContext, { additionalKeyPaths }?: SignTransactionOptions): Promise<Cardano.Signatures>;
    exportExtendedKeyPair(derivationPath: number[]): Promise<KeyPair>;
}
//# sourceMappingURL=InMemoryKeyAgent.d.ts.map