var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InMemoryKeyAgent_instances, _InMemoryKeyAgent_getPassphrase, _InMemoryKeyAgent_decryptRootPrivateKey;
import * as Crypto from '@cardano-sdk/crypto';
import * as errors from './errors/index.js';
import { KeyAgentType, KeyPurpose } from './types.js';
import { DREP_KEY_DERIVATION_PATH, deriveAccountPrivateKey, harden, joinMnemonicWords, mnemonicWordsToEntropy, ownSignatureKeyPaths, validateMnemonic } from './util/index.js';
import { HexBlob } from '@cardano-sdk/util';
import { KeyAgentBase } from './KeyAgentBase.js';
import { emip3decrypt, emip3encrypt } from './emip3.js';
import uniqBy from 'lodash/uniqBy.js';
const getPassphraseRethrowTypedError = async (getPassphrase) => {
    try {
        return await getPassphrase();
    }
    catch (error) {
        throw new errors.AuthenticationError('Failed to enter passphrase', error);
    }
};
export class InMemoryKeyAgent extends KeyAgentBase {
    constructor({ getPassphrase, ...serializableData }, dependencies) {
        super({ ...serializableData, __typename: KeyAgentType.InMemory }, dependencies);
        _InMemoryKeyAgent_instances.add(this);
        _InMemoryKeyAgent_getPassphrase.set(this, void 0);
        __classPrivateFieldSet(this, _InMemoryKeyAgent_getPassphrase, getPassphrase, "f");
    }
    async signBlob({ index, role: type }, blob) {
        const rootPrivateKey = await __classPrivateFieldGet(this, _InMemoryKeyAgent_instances, "m", _InMemoryKeyAgent_decryptRootPrivateKey).call(this);
        const accountKey = await deriveAccountPrivateKey({
            accountIndex: this.accountIndex,
            bip32Ed25519: this.bip32Ed25519,
            purpose: this.purpose,
            rootPrivateKey
        });
        const bip32SigningKey = await this.bip32Ed25519.derivePrivateKey(accountKey, [type, index]);
        const signingKey = await this.bip32Ed25519.getRawPrivateKey(bip32SigningKey);
        const signature = await this.bip32Ed25519.sign(signingKey, blob);
        const publicKey = await this.bip32Ed25519.getPublicKey(signingKey);
        return { publicKey, signature };
    }
    async exportRootPrivateKey() {
        return await __classPrivateFieldGet(this, _InMemoryKeyAgent_instances, "m", _InMemoryKeyAgent_decryptRootPrivateKey).call(this, true);
    }
    static async fromBip39MnemonicWords({ chainId, getPassphrase, mnemonicWords, mnemonic2ndFactorPassphrase = '', accountIndex = 0, purpose = KeyPurpose.STANDARD }, dependencies) {
        const mnemonic = joinMnemonicWords(mnemonicWords);
        const validMnemonic = validateMnemonic(mnemonic);
        if (!validMnemonic)
            throw new errors.InvalidMnemonicError();
        const entropy = Buffer.from(mnemonicWordsToEntropy(mnemonicWords), 'hex');
        const rootPrivateKey = dependencies.bip32Ed25519.fromBip39Entropy(entropy, mnemonic2ndFactorPassphrase);
        const passphrase = await getPassphraseRethrowTypedError(getPassphrase);
        const encryptedRootPrivateKey = await emip3encrypt(Buffer.from(rootPrivateKey, 'hex'), passphrase);
        const accountPrivateKey = await deriveAccountPrivateKey({
            accountIndex,
            bip32Ed25519: dependencies.bip32Ed25519,
            purpose,
            rootPrivateKey
        });
        const extendedAccountPublicKey = await dependencies.bip32Ed25519.getBip32PublicKey(accountPrivateKey);
        return new InMemoryKeyAgent({
            accountIndex,
            chainId,
            encryptedRootPrivateKeyBytes: [...encryptedRootPrivateKey],
            extendedAccountPublicKey,
            getPassphrase,
            purpose
        }, dependencies);
    }
    async signTransaction({ body, hash }, { txInKeyPathMap, knownAddresses }, { additionalKeyPaths = [] } = {}) {
        const blob = HexBlob(hash);
        const dRepKeyHash = (await Crypto.Ed25519PublicKey.fromHex(await this.derivePublicKey(DREP_KEY_DERIVATION_PATH)).hash()).hex();
        const derivationPaths = ownSignatureKeyPaths(body, knownAddresses, txInKeyPathMap, dRepKeyHash);
        const keyPaths = uniqBy([...derivationPaths, ...additionalKeyPaths], ({ role, index }) => `${role}.${index}`);
        return new Map(await Promise.all(keyPaths.map(async ({ role, index }) => {
            const { publicKey, signature } = await this.signBlob({ index, role }, blob);
            return [publicKey, signature];
        })));
    }
    async exportExtendedKeyPair(derivationPath) {
        const rootPrivateKey = await this.exportRootPrivateKey();
        const hardenedIndices = derivationPath.map((index) => harden(index));
        const childKey = await this.bip32Ed25519.derivePrivateKey(rootPrivateKey, hardenedIndices);
        return {
            skey: childKey,
            vkey: await this.bip32Ed25519.getBip32PublicKey(childKey)
        };
    }
}
_InMemoryKeyAgent_getPassphrase = new WeakMap(), _InMemoryKeyAgent_instances = new WeakSet(), _InMemoryKeyAgent_decryptRootPrivateKey = async function _InMemoryKeyAgent_decryptRootPrivateKey(noCache) {
    const passphrase = await getPassphraseRethrowTypedError(() => __classPrivateFieldGet(this, _InMemoryKeyAgent_getPassphrase, "f").call(this, noCache));
    let decryptedRootKeyBytes;
    try {
        decryptedRootKeyBytes = await emip3decrypt(new Uint8Array(this.serializableData.encryptedRootPrivateKeyBytes), passphrase);
    }
    catch (error) {
        throw new errors.AuthenticationError('Failed to decrypt root private key', error);
    }
    return Crypto.Bip32PrivateKeyHex(Buffer.from(decryptedRootKeyBytes).toString('hex'));
};
//# sourceMappingURL=InMemoryKeyAgent.js.map