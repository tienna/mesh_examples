var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _KeyAgentTransactionSigner_keyAgent, _KeyAgentTransactionSigner_account;
import { ProofGenerationError } from '../errors/index.js';
const EXPECTED_SIG_NUM = 1;
export class KeyAgentTransactionSigner {
    constructor(keyAgent, account) {
        _KeyAgentTransactionSigner_keyAgent.set(this, void 0);
        _KeyAgentTransactionSigner_account.set(this, void 0);
        __classPrivateFieldSet(this, _KeyAgentTransactionSigner_keyAgent, keyAgent, "f");
        __classPrivateFieldSet(this, _KeyAgentTransactionSigner_account, account, "f");
    }
    async sign(tx) {
        const signatures = await __classPrivateFieldGet(this, _KeyAgentTransactionSigner_keyAgent, "f").signTransaction(tx, {
            knownAddresses: [],
            txInKeyPathMap: {}
        }, {
            additionalKeyPaths: [__classPrivateFieldGet(this, _KeyAgentTransactionSigner_account, "f")]
        });
        if (signatures.size !== EXPECTED_SIG_NUM)
            throw new ProofGenerationError(`Invalid number of signatures. Expected ${EXPECTED_SIG_NUM} and got ${signatures.size}`);
        const [pubKey] = signatures.keys();
        const [signature] = signatures.values();
        return { pubKey, signature };
    }
}
_KeyAgentTransactionSigner_keyAgent = new WeakMap(), _KeyAgentTransactionSigner_account = new WeakMap();
//# sourceMappingURL=KeyAgentTransactionSigner.js.map