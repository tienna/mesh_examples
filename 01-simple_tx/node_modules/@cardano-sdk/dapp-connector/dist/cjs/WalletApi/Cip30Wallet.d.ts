import { Cip30WalletApiWithPossibleExtensions, WalletApi, WalletApiExtension, WalletMethod } from './types';
import { Logger } from 'ts-log';
import { RemoteAuthenticator } from '../AuthenticatorApi';
export declare const CipMethodsMapping: Record<number, WalletMethod[]>;
export declare const WalletApiMethodNames: WalletMethod[];
export declare type ApiVersion = string;
export declare type WalletName = string;
export declare type WalletIcon = string;
export declare type WalletProperties = {
    icon: WalletIcon;
    walletName: WalletName;
    supportedExtensions?: WalletApiExtension[];
    cip30ApiDeviations?: {
        getCollateralEmptyArray?: boolean;
        onOffDummyMethods?: boolean;
    };
};
export declare type WalletDependencies = {
    logger: Logger;
    authenticator: RemoteAuthenticator;
    api: WalletApi;
};
export declare type Cip30EnableOptions = {
    extensions: WalletApiExtension[];
};
export declare class Cip30Wallet {
    #private;
    readonly apiVersion: ApiVersion;
    readonly name: WalletName;
    readonly icon: WalletIcon;
    readonly supportedExtensions: WalletApiExtension[];
    constructor(properties: WalletProperties, { api, authenticator, logger }: WalletDependencies);
    isEnabled(): Promise<Boolean>;
    enable(options?: Cip30EnableOptions): Promise<Cip30WalletApiWithPossibleExtensions>;
}
//# sourceMappingURL=Cip30Wallet.d.ts.map