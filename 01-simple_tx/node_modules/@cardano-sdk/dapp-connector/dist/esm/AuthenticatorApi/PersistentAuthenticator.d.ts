import { AuthenticatorApi, RequestAccess } from './types.js';
import { Logger } from 'ts-log';
import { PersistentAuthenticatorStorage } from './PersistentAuthenticatorStorage.js';
import { Runtime } from 'webextension-polyfill';
export interface PersistentAuhenticatorOptions {
    requestAccess: RequestAccess;
}
export interface PersistentAuthenticatorDependencies {
    storage: PersistentAuthenticatorStorage;
    logger: Logger;
}
export declare class PersistentAuthenticator implements AuthenticatorApi {
    #private;
    constructor({ requestAccess }: PersistentAuhenticatorOptions, { logger, storage }: PersistentAuthenticatorDependencies);
    requestAccess(sender: Runtime.MessageSender): Promise<boolean>;
    revokeAccess(sender: Runtime.MessageSender): Promise<boolean>;
    haveAccess(sender: Runtime.MessageSender): Promise<boolean>;
    clear(): Promise<void>;
}
//# sourceMappingURL=PersistentAuthenticator.d.ts.map