import { Cardano } from '@cardano-sdk/core';
import { Ed25519PublicKeyHex } from '@cardano-sdk/crypto';
import { HexBlob } from '@cardano-sdk/util';
import { Runtime } from 'webextension-polyfill';
export declare type Bytes = string;
export declare type Cbor = string;
export declare type Paginate = {
    page: number;
    limit: number;
};
declare type CoseSign1CborHex = HexBlob;
declare type CoseKeyCborHex = HexBlob;
export interface Cip30DataSignature {
    key: CoseKeyCborHex;
    signature: CoseSign1CborHex;
}
export declare type WalletApiExtension = {
    cip: number;
};
export declare type GetNetworkId = () => Promise<Cardano.NetworkId>;
export declare type GetUtxos = (amount?: Cbor, paginate?: Paginate) => Promise<Cbor[] | null>;
export declare type GetCollateral = (params?: {
    amount?: Cbor;
}) => Promise<Cbor[] | null>;
export declare type GetBalance = () => Promise<Cbor>;
export declare type GetExtensions = () => Promise<WalletApiExtension[]>;
export declare type GetUsedAddresses = (paginate?: Paginate) => Promise<Cbor[]>;
export declare type GetUnusedAddresses = () => Promise<Cbor[]>;
export declare type GetChangeAddress = () => Promise<Cbor>;
export declare type GetRewardAddresses = () => Promise<Cbor[]>;
export declare type SignTx = (tx: Cbor, partialSign?: Boolean) => Promise<Cbor>;
export declare type SignData = (addr: Cardano.PaymentAddress | Cardano.DRepID | Bytes, payload: Bytes) => Promise<Cip30DataSignature>;
export declare type SubmitTx = (tx: Cbor) => Promise<string>;
export interface Cip30WalletApi {
    getNetworkId: GetNetworkId;
    getUtxos: GetUtxos;
    getBalance: GetBalance;
    getCollateral: GetCollateral;
    getExtensions: GetExtensions;
    getUsedAddresses: GetUsedAddresses;
    getUnusedAddresses: GetUnusedAddresses;
    getChangeAddress: GetChangeAddress;
    getRewardAddresses: GetRewardAddresses;
    signTx: SignTx;
    signData: SignData;
    submitTx: SubmitTx;
    experimental?: any;
}
export interface Cip95WalletApi {
    getRegisteredPubStakeKeys: () => Promise<Ed25519PublicKeyHex[]>;
    getUnregisteredPubStakeKeys: () => Promise<Ed25519PublicKeyHex[]>;
    getPubDRepKey: () => Promise<Ed25519PublicKeyHex>;
}
export declare type WalletApi = Cip30WalletApi & Cip95WalletApi;
export declare type WalletMethod = keyof WalletApi;
export interface CipExtensionApis {
    cip95: Cip95WalletApi;
}
export declare type Cip30WalletApiWithPossibleExtensions = Cip30WalletApi & Partial<CipExtensionApis>;
export declare type SenderContext = {
    sender: Runtime.MessageSender;
};
declare type FnWithSender<T> = T extends (...args: infer Args) => infer R ? (context: SenderContext, ...args: Args) => R : T;
export declare type WithSenderContext<T> = {
    [K in keyof T]: FnWithSender<T[K]>;
};
export {};
//# sourceMappingURL=types.d.ts.map