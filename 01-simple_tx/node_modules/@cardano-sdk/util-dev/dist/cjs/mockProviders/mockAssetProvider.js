"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockAssetProvider = exports.handleAssetInfo = exports.asset = void 0;
const core_1 = require("@cardano-sdk/core");
const mockData_1 = require("./mockData");
exports.asset = {
    assetId: core_1.Cardano.AssetId('659f2917fb63f12b33667463ee575eeac1845bbc736b9c0bbc40ba8254534c41'),
    fingerprint: core_1.Cardano.AssetFingerprint('asset1rjklcrnsdzqp65wjgrg55sy9723kw09mlgvlc3'),
    name: core_1.Cardano.AssetName('54534c41'),
    nftMetadata: null,
    policyId: core_1.Cardano.PolicyId('7eae28af2208be856f7a119668ae52a49b73725e326dc16579dcc373'),
    quantity: 1000n,
    supply: 1000n,
    tokenMetadata: null
};
exports.handleAssetInfo = {
    assetId: mockData_1.handleAssetId,
    fingerprint: mockData_1.handleFingerprint,
    name: mockData_1.handleAssetName,
    policyId: mockData_1.handlePolicyId,
    quantity: 1n,
    supply: 1n
};
const mockAssetProvider = () => ({
    getAsset: jest.fn().mockResolvedValue(exports.asset),
    getAssets: jest
        .fn()
        .mockImplementation(async ({ assetIds }) => assetIds.map((assetId) => (assetId === mockData_1.handleAssetId ? exports.handleAssetInfo : exports.asset))),
    healthCheck: jest.fn().mockResolvedValue({ ok: true })
});
exports.mockAssetProvider = mockAssetProvider;
//# sourceMappingURL=mockAssetProvider.js.map