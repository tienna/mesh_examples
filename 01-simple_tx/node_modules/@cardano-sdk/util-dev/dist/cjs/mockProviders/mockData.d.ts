import * as Crypto from '@cardano-sdk/crypto';
import { Cardano, Reward } from '@cardano-sdk/core';
export declare const rewardAccount: Cardano.RewardAccount;
export declare const stakeKeyHash: Crypto.Ed25519KeyHashHex;
export declare const stakeCredential: {
    hash: Crypto.Hash28ByteBase16;
    type: Cardano.CredentialType;
};
export declare const rewardAccountBalance = 33333n;
export declare const handlePolicyId: Cardano.PolicyId;
export declare const handle: string;
export declare const handleAssetId: Cardano.AssetId;
export declare const handleAssetName: Cardano.AssetName;
export declare const handleFingerprint: Cardano.AssetFingerprint;
export declare const ledgerTip: {
    blockNo: Cardano.BlockNo;
    hash: Cardano.BlockId;
    slot: Cardano.Slot;
};
export declare const currentEpoch: {
    number: number;
};
export declare const protocolParameters: Omit<Omit<Pick<{
    heavyDlgThreshold: string;
    maxBlockSize: number;
    maxHeaderSize: number;
    maxProposalSize: number;
    maxTxSize: number;
    mpcThreshold: string;
    scriptVersion: number;
    slotDuration: number;
    unlockStakeEpoch: number;
    updateProposalThreshold: string;
    updateProposalTimeToLive: number;
    updateVoteThreshold: string;
    txFeePolicy: Cardano.TxFeePolicy;
    softforkRule: Cardano.SoftforkRule;
}, "maxTxSize"> & {
    minFeeCoefficient: number;
    minFeeConstant: number;
    maxBlockBodySize: number;
    maxBlockHeaderSize: number;
    stakeKeyDeposit: number;
    poolDeposit: number | null;
    poolRetirementEpochBound: number;
    desiredNumberOfPools: number;
    poolInfluence: string;
    monetaryExpansion: string;
    treasuryExpansion: string;
    decentralizationParameter: string;
    minUtxoValue: number;
    minPoolCost: number;
    extraEntropy: string;
    protocolVersion: Cardano.ProtocolVersion;
}, "minUtxoValue"> & {
    coinsPerUtxoWord: number;
    maxValueSize: number;
    collateralPercentage: number;
    maxCollateralInputs: number;
    costModels: Cardano.CostModels;
    prices: Cardano.Prices;
    maxExecutionUnitsPerTransaction: Cardano.ExUnits;
    maxExecutionUnitsPerBlock: Cardano.ExUnits;
}, "extraEntropy" | "coinsPerUtxoWord"> & {
    coinsPerUtxoByte: number;
} & {
    poolVotingThresholds: Cardano.PoolVotingThresholds;
    dRepVotingThresholds: Cardano.DelegateRepresentativeThresholds;
    minCommitteeSize: number;
    committeeTermLimit: number;
    governanceActionValidityPeriod: Cardano.EpochNo;
    governanceActionDeposit: number;
    dRepDeposit: number;
    dRepInactivityPeriod: Cardano.EpochNo;
};
export declare const epochRewards: {
    epoch: Cardano.EpochNo;
    poolId: Cardano.PoolId;
    rewards: bigint;
}[];
export declare const rewardsHistory: Map<Cardano.RewardAccount, Reward[]>;
export declare const genesisParameters: Cardano.CompactGenesis;
export declare const rewardsHistory2: Map<Cardano.RewardAccount, Reward[]>;
export declare const rewardAccountBalance2: bigint;
export declare const utxosWithLowCoins: Cardano.Utxo[];
export declare const utxosWithLowCoinsAndMixedAssets: Cardano.Utxo[];
export declare const sortedUtxosWithLowCoins: Cardano.Utxo[];
//# sourceMappingURL=mockData.d.ts.map