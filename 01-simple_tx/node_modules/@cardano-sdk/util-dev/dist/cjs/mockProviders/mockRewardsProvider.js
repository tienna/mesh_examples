"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockStakePoolsProvider = exports.stakePoolsPaginated = exports.generateStakePools = exports.mockRewardsProvider2 = exports.mockRewardsProvider = void 0;
const core_1 = require("@cardano-sdk/core");
const util_1 = require("@cardano-sdk/util");
const mockData_1 = require("./mockData");
const mockChainHistoryProvider_1 = require("./mockChainHistoryProvider");
const delay_1 = __importDefault(require("delay"));
const mockRewardsProvider = ({ rewardAccount } = {}) => ({
    healthCheck: jest.fn().mockResolvedValue({ ok: true }),
    rewardAccountBalance: jest.fn().mockResolvedValue(mockData_1.rewardAccountBalance),
    rewardsHistory: jest.fn().mockResolvedValue(rewardAccount ? new Map([[rewardAccount, mockData_1.epochRewards]]) : mockData_1.rewardsHistory)
});
exports.mockRewardsProvider = mockRewardsProvider;
const mockRewardsProvider2 = (delayMs) => {
    const delayedJestFn = (resolvedValue) => jest.fn().mockImplementation(() => (0, delay_1.default)(delayMs).then(() => resolvedValue));
    return {
        healthCheck: delayedJestFn({ ok: true }),
        rewardAccountBalance: delayedJestFn(mockData_1.rewardAccountBalance2),
        rewardsHistory: delayedJestFn(mockData_1.rewardsHistory2)
    };
};
exports.mockRewardsProvider2 = mockRewardsProvider2;
const generateStakePools = (qty) => [...Array.from({ length: qty }).keys()].map(() => ({
    cost: 340000000n,
    hexId: core_1.Cardano.PoolIdHex('5d99282bbb4840380bb98c075498ed1983aee18a4a0925b9b44d93f1'),
    id: core_1.Cardano.PoolId('pool1tkvjs2amfpqrszae3sr4fx8drxp6acv2fgyjtwd5fkflzguqp96'),
    margin: {
        denominator: 1000,
        numerator: 27
    },
    metadata: {
        description: 'Pool a of the banderini devtest stake pools',
        homepage: 'http://www.banderini.net',
        name: 'banderini-devtest-a',
        ticker: 'BANDA'
    },
    metadataJson: {
        hash: (0, mockChainHistoryProvider_1.getRandomTxId)(),
        url: 'https://git.io/JJ7wm'
    },
    metrics: {
        apy: (0, util_1.Percent)(0),
        blocksCreated: 0,
        delegators: 1,
        lastRos: (0, util_1.Percent)(0),
        livePledge: 495463149n,
        ros: (0, util_1.Percent)(0),
        saturation: (0, util_1.Percent)(0.00003555210355859188),
        size: {
            active: (0, util_1.Percent)(1),
            live: (0, util_1.Percent)(0)
        },
        stake: {
            active: 2986376991n,
            live: 0n
        }
    },
    owners: [],
    pledge: 100000000n,
    relays: [],
    rewardAccount: core_1.Cardano.RewardAccount('stake_test1upx9faamuf54pm7alg4lna5l7ll08pz833rj45tgr9m2jyceasqjt'),
    status: core_1.Cardano.StakePoolStatus.Active,
    vrf: core_1.Cardano.VrfVkHex((0, mockChainHistoryProvider_1.getRandomTxId)())
}));
exports.generateStakePools = generateStakePools;
exports.stakePoolsPaginated = {
    pageResults: (0, exports.generateStakePools)(10),
    totalResultCount: 1
};
const stakePoolStatsMock = {
    qty: {
        activating: 0,
        active: 5,
        retired: 5,
        retiring: 5
    }
};
const mockStakePoolsProvider = () => ({
    healthCheck: jest.fn().mockResolvedValue({ ok: true }),
    queryStakePools: jest.fn().mockResolvedValue(exports.stakePoolsPaginated),
    stakePoolStats: jest.fn().mockResolvedValue(stakePoolStatsMock)
});
exports.mockStakePoolsProvider = mockStakePoolsProvider;
//# sourceMappingURL=mockRewardsProvider.js.map