"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockNetworkInfoProvider2 = exports.ledgerTip2 = exports.genesisParameters2 = exports.protocolParameters2 = void 0;
const core_1 = require("@cardano-sdk/core");
const mockData_1 = require("./mockData");
const mockNetworkInfoProvider_1 = require("./mockNetworkInfoProvider");
const delay_1 = __importDefault(require("delay"));
exports.protocolParameters2 = {
    ...mockData_1.protocolParameters,
    maxCollateralInputs: mockData_1.protocolParameters.maxCollateralInputs + 1
};
exports.genesisParameters2 = {
    ...mockData_1.genesisParameters,
    maxLovelaceSupply: mockData_1.genesisParameters.maxLovelaceSupply + 1n
};
exports.ledgerTip2 = {
    ...mockData_1.ledgerTip,
    blockNo: core_1.Cardano.BlockNo(mockData_1.ledgerTip.blockNo + 1)
};
const mockNetworkInfoProvider2 = (delayMs) => {
    const delayedJestFn = (resolvedValue) => jest.fn().mockImplementation(() => (0, delay_1.default)(delayMs).then(() => resolvedValue));
    return {
        eraSummaries: jest.fn().mockResolvedValue(mockNetworkInfoProvider_1.networkInfo.network.eraSummaries),
        genesisParameters: delayedJestFn(exports.genesisParameters2),
        healthCheck: delayedJestFn({ ok: true }),
        ledgerTip: delayedJestFn(exports.ledgerTip2),
        lovelaceSupply: jest.fn().mockResolvedValue(mockNetworkInfoProvider_1.networkInfo.lovelaceSupply),
        protocolParameters: delayedJestFn(exports.protocolParameters2),
        stake: jest.fn().mockResolvedValue(mockNetworkInfoProvider_1.networkInfo.stake)
    };
};
exports.mockNetworkInfoProvider2 = mockNetworkInfoProvider2;
//# sourceMappingURL=mockNetworkInfoProvider2.js.map