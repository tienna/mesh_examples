"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupPostgresContainer = exports.removePostgresContainer = exports.containerExec = exports.Docker = void 0;
const dockerode_utils_1 = require("dockerode-utils");
const dockerode_1 = __importDefault(require("dockerode"));
exports.Docker = dockerode_1.default;
var dockerode_utils_2 = require("dockerode-utils");
Object.defineProperty(exports, "containerExec", { enumerable: true, get: function () { return dockerode_utils_2.containerExec; } });
const CONTAINER_IMAGE = 'postgres:12.16-alpine';
const CONTAINER_NAME = 'cardano-test';
const removePostgresContainer = async () => {
    const docker = new dockerode_1.default();
    try {
        const container = docker.getContainer(CONTAINER_NAME);
        try {
            await container.stop();
        }
        catch (error) {
            if (error.statusCode !== 304)
                throw error;
        }
        await container.remove({ v: true });
    }
    catch (error) {
        if (error.statusCode !== 404)
            throw error;
    }
};
exports.removePostgresContainer = removePostgresContainer;
const ensurePgServiceReadiness = async (container, user, db) => {
    await (0, dockerode_utils_1.containerExec)(container, [
        'bash',
        '-c',
        `until psql -U ${user} ${db} -c "SELECT 1" > /dev/null 2>&1 ; do echo "waiting pg service to be ready"; sleep 1; done`
    ]);
};
const setupPostgresContainer = async (user, password, port, binds, checkDb) => {
    const docker = new dockerode_1.default();
    const needsToPull = !(await (0, dockerode_utils_1.imageExists)(docker, CONTAINER_IMAGE));
    if (needsToPull)
        await (0, dockerode_utils_1.pullImageAsync)(docker, CONTAINER_IMAGE);
    await (0, exports.removePostgresContainer)();
    const container = await docker.createContainer({
        Env: [`POSTGRES_PASSWORD=${password}`, `POSTGRES_USER=${user}`],
        HostConfig: {
            Binds: binds,
            PortBindings: {
                '5432/tcp': [
                    {
                        HostPort: port
                    }
                ]
            }
        },
        Image: CONTAINER_IMAGE,
        name: CONTAINER_NAME
    });
    await container.start();
    await ensurePgServiceReadiness(container, user, checkDb);
    return container;
};
exports.setupPostgresContainer = setupPostgresContainer;
//# sourceMappingURL=docker.js.map