/// <reference types="lodash" />
import { Cardano, ChainSyncRollBackward, ChainSyncRollForward, Intersection, ObservableCardanoNode } from '@cardano-sdk/core';
export declare type SerializedChainSyncEvent = Omit<ChainSyncRollForward, 'requestNext'> | Omit<ChainSyncRollBackward, 'requestNext'>;
export declare type ChainSyncMetadata = {
    cardano: {
        compactGenesis: Cardano.CompactGenesis;
        intersection: Intersection;
    };
};
export declare type ChainSyncData = {
    body: SerializedChainSyncEvent[];
    metadata: ChainSyncMetadata;
};
export * from './genesisToEraSummary';
export declare enum ChainSyncDataSet {
    PreviewStakePoolProblem = "preview-stake-pool-problem.json",
    AssetNameUtf8Problem = "asset-name-utf8-problem.json",
    MissingExtraDatumMetadataProblem = "missing-extra-datum-metadata-problem.json",
    ExtraDataNullCharactersProblem = "extra-data-null-characters-problem.json",
    WithPoolRetirement = "with-pool-retirement.json",
    WithStakeKeyDeregistration = "with-stake-key-deregistration.json",
    WithMint = "with-mint.json",
    WithHandle = "with-handle.json",
    WithInlineDatum = "with-inline-datum.json"
}
export declare const chainSyncData: ((dataSet: ChainSyncDataSet) => {
    allEvents: SerializedChainSyncEvent[];
    cardanoNode: ObservableCardanoNode;
    networkInfo: {
        eraSummaries: import("@cardano-sdk/core").EraSummary[];
        genesisParameters: Cardano.CompactGenesis;
    };
}) & import("lodash").MemoizedFunction;
export declare type StubChainSyncData = ReturnType<typeof chainSyncData>;
//# sourceMappingURL=index.d.ts.map