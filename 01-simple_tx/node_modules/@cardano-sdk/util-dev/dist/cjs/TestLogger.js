"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.createLogger = void 0;
const envalid = __importStar(require("envalid"));
const util_1 = require("util");
const json_bigint_1 = __importDefault(require("json-bigint"));
const logLevels = { debug: 2, error: 5, fatal: 6, info: 3, trace: 1, warn: 4 };
const logLevelLabels = ['', 'TRACE  ', 'DEBUG  ', 'INFO   ', 'WARNING', 'ERROR  ', 'FATAL  '];
const getConfig = (env, stream) => {
    const { TL_ARRAY, TL_BREAK, TL_COLOR, TL_COMPACT, TL_DEPTH, TL_HIDDEN, TL_JSON, TL_LEVEL, TL_PROXY, TL_STRING } = envalid.cleanEnv(env, {
        TL_ARRAY: envalid.num({ default: 100 }),
        TL_BREAK: envalid.num({ default: stream?.columns ? stream?.columns - 33 : 90 }),
        TL_COLOR: envalid.bool({ default: stream?.isTTY || false }),
        TL_COMPACT: envalid.num({ default: 3 }),
        TL_DEPTH: envalid.num({ default: 2 }),
        TL_HIDDEN: envalid.bool({ default: false }),
        TL_JSON: envalid.bool({ default: false }),
        TL_LEVEL: envalid.str({ choices: Object.keys(logLevels), default: 'fatal' }),
        TL_PROXY: envalid.bool({ default: false }),
        TL_STRING: envalid.num({ default: 1000 })
    });
    const inspectOptions = {
        breakLength: TL_BREAK || Number.POSITIVE_INFINITY,
        colors: TL_COLOR,
        compact: TL_COMPACT || false,
        depth: TL_DEPTH || Number.POSITIVE_INFINITY,
        maxArrayLength: TL_ARRAY || Number.POSITIVE_INFINITY,
        maxStringLength: TL_STRING || Number.POSITIVE_INFINITY,
        showHidden: TL_HIDDEN,
        showProxy: TL_PROXY,
        sorted: true
    };
    return { inspectOptions, minHeight: logLevels[TL_LEVEL], useJSON: TL_JSON };
};
const createLogger = (options = {}) => {
    const { env, record, stream } = { env: process.env, stream: process.stdout, ...options };
    const { minHeight, inspectOptions, useJSON } = getConfig(env, stream);
    const messages = [];
    const stringify = (data) => {
        switch (typeof data) {
            case 'bigint':
            case 'boolean':
            case 'number':
            case 'symbol':
                return data.toString();
            case 'string':
                return data;
            case 'undefined':
                return 'undefined';
            case 'object':
                if (useJSON)
                    return json_bigint_1.default.stringify(data);
            case 'function':
                return (0, util_1.inspect)(data, inspectOptions);
        }
    };
    const getLogFunction = ([level, height]) => {
        const label = logLevelLabels[height];
        return (...message) => {
            if (record)
                messages.push({ level, message });
            if (height < minHeight)
                return;
            const line = message.map(stringify).join(' ');
            const now = new Date().toISOString().replace('T', ' ').replace('Z', '');
            const lines = line.split('\n').map((_) => `${now} ${label} ${_}\n`);
            stream.write(lines.join(''));
        };
    };
    const logger = Object.fromEntries(Object.entries(logLevels).map((_) => [_[0], getLogFunction(_)]));
    const reset = () => (messages.length = 0);
    return { messages, reset, ...logger };
};
exports.createLogger = createLogger;
exports.logger = (0, exports.createLogger)();
//# sourceMappingURL=TestLogger.js.map