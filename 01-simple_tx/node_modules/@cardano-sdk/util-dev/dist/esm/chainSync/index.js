import { ChainSyncError, ChainSyncErrorCode, ChainSyncEventType, GeneralCardanoNodeError, GeneralCardanoNodeErrorCode } from '@cardano-sdk/core';
import { Observable, of, throwError } from 'rxjs';
import { fromSerializableObject } from '@cardano-sdk/util';
import { genesisToEraSummary } from './genesisToEraSummary.js';
import memoize from 'lodash/memoize.js';
export * from './genesisToEraSummary.js';
const intersect = (events, points) => {
    const blockPoints = points.filter((point) => point !== 'origin');
    if (blockPoints.length === 0) {
        if (points.length === 0) {
            throw new ChainSyncError(ChainSyncErrorCode.IntersectionNotFound, { points, tip: events[0].tip }, 'Intersection not found');
        }
        return {
            events,
            intersection: {
                point: 'origin',
                tip: events[0].tip
            }
        };
    }
    const remainingEvents = [...events];
    let eventsSinceIntersection = [];
    let evt;
    while ((evt = remainingEvents.pop())) {
        if (evt.eventType !== ChainSyncEventType.RollForward) {
            eventsSinceIntersection = [evt, ...eventsSinceIntersection];
            continue;
        }
        const { block: { header } } = evt;
        const point = blockPoints.find(({ hash }) => header.hash === hash);
        if (point) {
            return {
                events: eventsSinceIntersection,
                intersection: {
                    point,
                    tip: eventsSinceIntersection.length > 0
                        ? eventsSinceIntersection[eventsSinceIntersection.length - 1].tip
                        : header
                }
            };
        }
        eventsSinceIntersection = [evt, ...eventsSinceIntersection];
    }
    if (points.includes('origin')) {
        return {
            events,
            intersection: {
                point: 'origin',
                tip: events[0].tip
            }
        };
    }
    throw new ChainSyncError(ChainSyncErrorCode.IntersectionNotFound, { points, tip: events[0].tip }, 'Intersection not found');
};
export var ChainSyncDataSet;
(function (ChainSyncDataSet) {
    ChainSyncDataSet["PreviewStakePoolProblem"] = "preview-stake-pool-problem.json";
    ChainSyncDataSet["AssetNameUtf8Problem"] = "asset-name-utf8-problem.json";
    ChainSyncDataSet["MissingExtraDatumMetadataProblem"] = "missing-extra-datum-metadata-problem.json";
    ChainSyncDataSet["ExtraDataNullCharactersProblem"] = "extra-data-null-characters-problem.json";
    ChainSyncDataSet["WithPoolRetirement"] = "with-pool-retirement.json";
    ChainSyncDataSet["WithStakeKeyDeregistration"] = "with-stake-key-deregistration.json";
    ChainSyncDataSet["WithMint"] = "with-mint.json";
    ChainSyncDataSet["WithHandle"] = "with-handle.json";
    ChainSyncDataSet["WithInlineDatum"] = "with-inline-datum.json";
})(ChainSyncDataSet || (ChainSyncDataSet = {}));
export const chainSyncData = memoize((dataSet) => {
    const { body: allEvents, metadata: { cardano: { compactGenesis } } } = fromSerializableObject(require(`./data/${dataSet}`));
    const eraSummaries = [genesisToEraSummary(compactGenesis)];
    const cardanoNode = {
        eraSummaries$: of(eraSummaries),
        findIntersect: (points) => {
            const { intersection, events } = intersect(allEvents, points);
            return of({
                chainSync$: new Observable((subscriber) => {
                    const remainingEvents = [...events];
                    const requestNext = () => {
                        const nextEvent = remainingEvents.shift();
                        if (nextEvent) {
                            subscriber.next({
                                ...nextEvent,
                                requestNext: () => setTimeout(requestNext, 1)
                            });
                        }
                        else {
                            subscriber.complete();
                        }
                    };
                    requestNext();
                }),
                intersection
            });
        },
        genesisParameters$: of(compactGenesis),
        healthCheck$: new Observable(),
        submitTx: () => throwError(() => new GeneralCardanoNodeError(GeneralCardanoNodeErrorCode.Unknown, null, 'submitTx is not implemented'))
    };
    return {
        allEvents,
        cardanoNode,
        networkInfo: {
            eraSummaries,
            genesisParameters: compactGenesis
        }
    };
});
//# sourceMappingURL=index.js.map