import { Cardano } from '@cardano-sdk/core';
import { genesisParameters, ledgerTip, protocolParameters } from './mockData.js';
import { networkInfo } from './mockNetworkInfoProvider.js';
import delay from 'delay';
export const protocolParameters2 = {
    ...protocolParameters,
    maxCollateralInputs: protocolParameters.maxCollateralInputs + 1
};
export const genesisParameters2 = {
    ...genesisParameters,
    maxLovelaceSupply: genesisParameters.maxLovelaceSupply + 1n
};
export const ledgerTip2 = {
    ...ledgerTip,
    blockNo: Cardano.BlockNo(ledgerTip.blockNo + 1)
};
export const mockNetworkInfoProvider2 = (delayMs) => {
    const delayedJestFn = (resolvedValue) => jest.fn().mockImplementation(() => delay(delayMs).then(() => resolvedValue));
    return {
        eraSummaries: jest.fn().mockResolvedValue(networkInfo.network.eraSummaries),
        genesisParameters: delayedJestFn(genesisParameters2),
        healthCheck: delayedJestFn({ ok: true }),
        ledgerTip: delayedJestFn(ledgerTip2),
        lovelaceSupply: jest.fn().mockResolvedValue(networkInfo.lovelaceSupply),
        protocolParameters: delayedJestFn(protocolParameters2),
        stake: jest.fn().mockResolvedValue(networkInfo.stake)
    };
};
//# sourceMappingURL=mockNetworkInfoProvider2.js.map