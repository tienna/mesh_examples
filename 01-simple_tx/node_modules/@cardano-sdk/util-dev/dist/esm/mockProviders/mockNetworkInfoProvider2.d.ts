import { Cardano } from '@cardano-sdk/core';
export declare const protocolParameters2: {
    maxCollateralInputs: number;
    maxTxSize: number;
    minFeeCoefficient: number;
    minFeeConstant: number;
    maxBlockBodySize: number;
    maxBlockHeaderSize: number;
    stakeKeyDeposit: number;
    poolDeposit: number | null;
    poolRetirementEpochBound: number;
    desiredNumberOfPools: number;
    poolInfluence: string;
    monetaryExpansion: string;
    treasuryExpansion: string;
    decentralizationParameter: string;
    minPoolCost: number;
    protocolVersion: Cardano.ProtocolVersion;
    maxValueSize: number;
    collateralPercentage: number;
    costModels: Cardano.CostModels;
    prices: Cardano.Prices;
    maxExecutionUnitsPerTransaction: Cardano.ExUnits;
    maxExecutionUnitsPerBlock: Cardano.ExUnits;
    coinsPerUtxoByte: number;
    poolVotingThresholds: Cardano.PoolVotingThresholds;
    dRepVotingThresholds: Cardano.DelegateRepresentativeThresholds;
    minCommitteeSize: number;
    committeeTermLimit: number;
    governanceActionValidityPeriod: Cardano.EpochNo;
    governanceActionDeposit: number;
    dRepDeposit: number;
    dRepInactivityPeriod: Cardano.EpochNo;
};
export declare const genesisParameters2: {
    maxLovelaceSupply: bigint;
    systemStart: Date;
    networkMagic: number;
    networkId: Cardano.NetworkId;
    activeSlotsCoefficient: number;
    securityParameter: number;
    epochLength: number;
    slotsPerKesPeriod: number;
    maxKesEvolutions: number;
    slotLength: import("@cardano-sdk/core").Seconds;
    updateQuorum: number;
};
export declare const ledgerTip2: {
    blockNo: Cardano.BlockNo;
    hash: Cardano.BlockId;
    slot: Cardano.Slot;
};
export declare const mockNetworkInfoProvider2: (delayMs: number) => {
    eraSummaries: jest.Mock<any, any>;
    genesisParameters: jest.Mock<any, any>;
    healthCheck: jest.Mock<any, any>;
    ledgerTip: jest.Mock<any, any>;
    lovelaceSupply: jest.Mock<any, any>;
    protocolParameters: jest.Mock<any, any>;
    stake: jest.Mock<any, any>;
};
//# sourceMappingURL=mockNetworkInfoProvider2.d.ts.map