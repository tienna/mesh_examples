"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.multiAssetsToTokenMap = exports.tokenMapToMultiAsset = exports.sortCanonically = void 0;
const Cardano = __importStar(require("../../Cardano"));
const sortCanonically = (lhs, rhs) => {
    if (lhs[0].length === rhs[0].length) {
        return lhs[0] > rhs[0] ? 1 : -1;
    }
    else if (lhs[0].length > rhs[0].length)
        return 1;
    return -1;
};
exports.sortCanonically = sortCanonically;
const tokenMapToMultiAsset = (tokenMap) => {
    const multiassets = new Map();
    const sortedTokenMap = new Map([...tokenMap.entries()].sort(exports.sortCanonically));
    for (const [assetId, quantity] of sortedTokenMap.entries()) {
        const policyId = Cardano.AssetId.getPolicyId(assetId);
        const assetName = Cardano.AssetId.getAssetName(assetId);
        if (!multiassets.has(policyId))
            multiassets.set(policyId, new Map());
        multiassets.get(policyId).set(assetName, quantity);
    }
    return multiassets;
};
exports.tokenMapToMultiAsset = tokenMapToMultiAsset;
const multiAssetsToTokenMap = (multiassets) => {
    const tokenMap = new Map();
    for (const [scriptHash, assets] of multiassets.entries()) {
        for (const [assetName, quantity] of assets.entries()) {
            const assetId = Cardano.AssetId.fromParts(scriptHash, assetName);
            tokenMap.set(assetId, quantity);
        }
    }
    return tokenMap;
};
exports.multiAssetsToTokenMap = multiAssetsToTokenMap;
//# sourceMappingURL=Utils.js.map