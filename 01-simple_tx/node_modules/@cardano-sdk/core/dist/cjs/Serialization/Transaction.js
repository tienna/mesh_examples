"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Transaction_body, _Transaction_witnessSet, _Transaction_auxiliaryData, _Transaction_isValid, _Transaction_originalBytes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const Cardano = __importStar(require("../Cardano"));
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const AuxiliaryData_1 = require("./AuxiliaryData");
const CBOR_1 = require("./CBOR");
const util_1 = require("@cardano-sdk/util");
const TransactionBody_1 = require("./TransactionBody");
const TransactionWitnessSet_1 = require("./TransactionWitnessSet");
const misc_1 = require("../util/misc");
const ALONZO_ERA_TX_FRAME_SIZE = 4;
class Transaction {
    constructor(body, witnessSet, auxiliaryData) {
        _Transaction_body.set(this, void 0);
        _Transaction_witnessSet.set(this, void 0);
        _Transaction_auxiliaryData.set(this, void 0);
        _Transaction_isValid.set(this, true);
        _Transaction_originalBytes.set(this, undefined);
        __classPrivateFieldSet(this, _Transaction_body, body, "f");
        __classPrivateFieldSet(this, _Transaction_witnessSet, witnessSet, "f");
        __classPrivateFieldSet(this, _Transaction_auxiliaryData, auxiliaryData, "f");
    }
    toCbor() {
        const writer = new CBOR_1.CborWriter();
        if (__classPrivateFieldGet(this, _Transaction_originalBytes, "f"))
            return __classPrivateFieldGet(this, _Transaction_originalBytes, "f");
        writer.writeStartArray(ALONZO_ERA_TX_FRAME_SIZE);
        writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _Transaction_body, "f").toCbor()));
        writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _Transaction_witnessSet, "f").toCbor()));
        writer.writeBoolean(__classPrivateFieldGet(this, _Transaction_isValid, "f"));
        if (__classPrivateFieldGet(this, _Transaction_auxiliaryData, "f")) {
            writer.writeEncodedValue((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _Transaction_auxiliaryData, "f").toCbor()));
        }
        else {
            writer.writeNull();
        }
        return writer.encodeAsHex();
    }
    static fromCbor(cbor) {
        const reader = new CBOR_1.CborReader(cbor);
        const length = reader.readStartArray();
        const bodyBytes = reader.readEncodedValue();
        const body = TransactionBody_1.TransactionBody.fromCbor(util_1.HexBlob.fromBytes(bodyBytes));
        const witnessSet = TransactionWitnessSet_1.TransactionWitnessSet.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        let isValid = true;
        if (length === ALONZO_ERA_TX_FRAME_SIZE) {
            isValid = reader.readBoolean();
        }
        let auxData;
        if (reader.peekState() !== CBOR_1.CborReaderState.Null)
            auxData = AuxiliaryData_1.AuxiliaryData.fromCbor(util_1.HexBlob.fromBytes(reader.readEncodedValue()));
        const tx = new Transaction(body, witnessSet, auxData);
        __classPrivateFieldSet(tx, _Transaction_isValid, isValid, "f");
        __classPrivateFieldSet(tx, _Transaction_originalBytes, cbor, "f");
        return tx;
    }
    toCore() {
        return {
            auxiliaryData: __classPrivateFieldGet(this, _Transaction_auxiliaryData, "f") ? __classPrivateFieldGet(this, _Transaction_auxiliaryData, "f").toCore() : undefined,
            body: __classPrivateFieldGet(this, _Transaction_body, "f").toCore(),
            id: this.getId(),
            isValid: __classPrivateFieldGet(this, _Transaction_isValid, "f"),
            witness: __classPrivateFieldGet(this, _Transaction_witnessSet, "f").toCore()
        };
    }
    static fromCore(tx) {
        const transaction = new Transaction(TransactionBody_1.TransactionBody.fromCore(tx.body), TransactionWitnessSet_1.TransactionWitnessSet.fromCore(tx.witness), tx.auxiliaryData ? AuxiliaryData_1.AuxiliaryData.fromCore(tx.auxiliaryData) : undefined);
        if (typeof tx.isValid !== 'undefined')
            transaction.setIsValid(tx.isValid);
        return transaction;
    }
    body() {
        return TransactionBody_1.TransactionBody.fromCbor(__classPrivateFieldGet(this, _Transaction_body, "f").toCbor());
    }
    setBody(body) {
        __classPrivateFieldSet(this, _Transaction_body, body, "f");
        __classPrivateFieldSet(this, _Transaction_originalBytes, undefined, "f");
    }
    witnessSet() {
        return TransactionWitnessSet_1.TransactionWitnessSet.fromCbor(__classPrivateFieldGet(this, _Transaction_witnessSet, "f").toCbor());
    }
    setWitnessSet(witnessSet) {
        __classPrivateFieldSet(this, _Transaction_witnessSet, witnessSet, "f");
        __classPrivateFieldSet(this, _Transaction_originalBytes, undefined, "f");
    }
    isValid() {
        return __classPrivateFieldGet(this, _Transaction_isValid, "f");
    }
    setIsValid(valid) {
        __classPrivateFieldSet(this, _Transaction_originalBytes, undefined, "f");
        __classPrivateFieldSet(this, _Transaction_isValid, valid, "f");
    }
    auxiliaryData() {
        if (__classPrivateFieldGet(this, _Transaction_auxiliaryData, "f")) {
            return AuxiliaryData_1.AuxiliaryData.fromCbor(__classPrivateFieldGet(this, _Transaction_auxiliaryData, "f").toCbor());
        }
        return undefined;
    }
    setAuxiliaryData(auxiliaryData) {
        __classPrivateFieldSet(this, _Transaction_auxiliaryData, auxiliaryData, "f");
        __classPrivateFieldSet(this, _Transaction_originalBytes, undefined, "f");
    }
    getId() {
        const hash = Crypto.blake2b(Crypto.blake2b.BYTES).update((0, misc_1.hexToBytes)(__classPrivateFieldGet(this, _Transaction_body, "f").toCbor())).digest();
        return Cardano.TransactionId.fromHexBlob(util_1.HexBlob.fromBytes(hash));
    }
    clone() {
        const bytes = this.toCbor();
        return Transaction.fromCbor(bytes);
    }
}
exports.Transaction = Transaction;
_Transaction_body = new WeakMap(), _Transaction_witnessSet = new WeakMap(), _Transaction_auxiliaryData = new WeakMap(), _Transaction_isValid = new WeakMap(), _Transaction_originalBytes = new WeakMap();
//# sourceMappingURL=Transaction.js.map