"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonToNativeScript = exports.nativeScriptPolicyId = void 0;
const Cardano = __importStar(require("../Cardano"));
const Crypto = __importStar(require("@cardano-sdk/crypto"));
const Serialization_1 = require("../Serialization");
const __1 = require("../");
const nativeScriptPolicyId = (script) => Cardano.PolicyId(Serialization_1.NativeScript.fromCore(script).hash());
exports.nativeScriptPolicyId = nativeScriptPolicyId;
const jsonToNativeScript = (json) => {
    let coreScript;
    if (!json.type) {
        throw new __1.SerializationError(__1.SerializationFailure.InvalidScript, "Invalid Native Script. Missing 'type' field.");
    }
    switch (json.type) {
        case 'sig': {
            coreScript = {
                __type: Cardano.ScriptType.Native,
                keyHash: Crypto.Ed25519KeyHashHex(json.keyHash),
                kind: Cardano.NativeScriptKind.RequireSignature
            };
            break;
        }
        case 'all': {
            coreScript = {
                __type: Cardano.ScriptType.Native,
                kind: Cardano.NativeScriptKind.RequireAllOf,
                scripts: new Array()
            };
            for (let i = 0; i < json.scripts.length; ++i) {
                coreScript.scripts.push((0, exports.jsonToNativeScript)(json.scripts[i]));
            }
            break;
        }
        case 'any': {
            coreScript = {
                __type: Cardano.ScriptType.Native,
                kind: Cardano.NativeScriptKind.RequireAnyOf,
                scripts: new Array()
            };
            for (let i = 0; i < json.scripts.length; ++i) {
                coreScript.scripts.push((0, exports.jsonToNativeScript)(json.scripts[i]));
            }
            break;
        }
        case 'atLeast': {
            const required = Number.parseInt(json.required);
            coreScript = {
                __type: Cardano.ScriptType.Native,
                kind: Cardano.NativeScriptKind.RequireNOf,
                required,
                scripts: new Array()
            };
            for (let i = 0; i < json.scripts.length; ++i) {
                coreScript.scripts.push((0, exports.jsonToNativeScript)(json.scripts[i]));
            }
            break;
        }
        case 'before': {
            coreScript = {
                __type: Cardano.ScriptType.Native,
                kind: Cardano.NativeScriptKind.RequireTimeBefore,
                slot: Cardano.Slot(Number.parseInt(json.slot))
            };
            break;
        }
        case 'after': {
            coreScript = {
                __type: Cardano.ScriptType.Native,
                kind: Cardano.NativeScriptKind.RequireTimeAfter,
                slot: Cardano.Slot(Number.parseInt(json.slot))
            };
            break;
        }
        default: {
            throw new __1.SerializationError(__1.SerializationFailure.InvalidNativeScriptKind, `Native Script value '${json.type}' is not supported.`);
        }
    }
    return coreScript;
};
exports.jsonToNativeScript = jsonToNativeScript;
//# sourceMappingURL=nativeScript.js.map