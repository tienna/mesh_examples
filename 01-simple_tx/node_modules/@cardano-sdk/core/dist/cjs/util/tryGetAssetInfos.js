"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryGetAssetInfos = void 0;
const Cardano = __importStar(require("../Cardano"));
const promiseTimeout_1 = require("./promiseTimeout");
const tryGetAssetInfos = async ({ assetIds, assetProvider, logger, timeout }) => {
    try {
        return await (0, promiseTimeout_1.promiseTimeout)(assetProvider.getAssets({
            assetIds,
            extraData: { nftMetadata: true, tokenMetadata: true }
        }), timeout);
    }
    catch (error) {
        logger.error('Error: Failed to retrieve assets', error);
        return assetIds.map((assetId) => {
            const policyId = Cardano.AssetId.getPolicyId(assetId);
            const name = Cardano.AssetId.getAssetName(assetId);
            return {
                assetId,
                fingerprint: Cardano.AssetFingerprint.fromParts(policyId, name),
                name,
                policyId,
                quantity: 0n,
                supply: 0n
            };
        });
    }
};
exports.tryGetAssetInfos = tryGetAssetInfos;
//# sourceMappingURL=tryGetAssetInfos.js.map