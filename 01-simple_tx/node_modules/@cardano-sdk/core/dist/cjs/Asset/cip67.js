"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetNameLabelNum = exports.AssetNameLabel = void 0;
const Cardano = __importStar(require("../Cardano"));
const util_1 = require("@cardano-sdk/util");
const crc8_1 = __importDefault(require("./crc8"));
const ASSET_LABEL_LENGTH = 8;
const ASSET_LABEL_BRACKET = '0';
const AssetNameLabel = (value) => value;
exports.AssetNameLabel = AssetNameLabel;
exports.AssetNameLabelNum = {
    ReferenceNFT: 100,
    UserFT: 333,
    UserNFT: 222,
    UserRFT: 444,
    VirtualHandle: 0
};
const assertLabelNumInterval = (labelNum) => {
    if (labelNum < 0 || labelNum > 65535) {
        throw new util_1.InvalidArgumentError('Label num', `Label ${labelNum} out of range 0 - 65535.`);
    }
};
const checksum = (labelNumHex) => (0, crc8_1.default)(Uint8Array.from(Buffer.from(labelNumHex, 'hex')))
    .toString(16)
    .padStart(2, '0');
const isInvalidChecksum = (labelNumHex, labelChecksum) => labelChecksum !== checksum(labelNumHex);
const isInvalidLength = (label) => label.length !== ASSET_LABEL_LENGTH;
const isInvalidBracket = (lead, end) => lead !== ASSET_LABEL_BRACKET || end !== ASSET_LABEL_BRACKET;
const assetNameLabelHexToNum = (label) => {
    const labelLeadBracket = label[0];
    const labelEndBracket = label[7];
    const labelNumHex = label.slice(1, 5);
    const labelChecksum = label.slice(5, 7);
    if (isInvalidLength(label) ||
        isInvalidBracket(labelLeadBracket, labelEndBracket) ||
        isInvalidChecksum(labelNumHex, labelChecksum)) {
        return null;
    }
    return (0, exports.AssetNameLabel)(Number.parseInt(labelNumHex, 16));
};
exports.AssetNameLabel.decode = (assetName) => {
    const assetNameLabel = assetName.slice(0, ASSET_LABEL_LENGTH);
    const assetNameContent = assetName.slice(ASSET_LABEL_LENGTH);
    const assetNameLabelNum = assetNameLabelHexToNum(assetNameLabel);
    if (assetNameLabelNum === null) {
        return null;
    }
    return {
        content: Cardano.AssetName(assetNameContent),
        label: assetNameLabelNum
    };
};
exports.AssetNameLabel.encode = (assetName, labelNum) => {
    assertLabelNumInterval(labelNum);
    const labelNumHex = labelNum.toString(16).padStart(4, ASSET_LABEL_BRACKET);
    return Cardano.AssetName(`${ASSET_LABEL_BRACKET}${labelNumHex}${checksum(labelNumHex)}${ASSET_LABEL_BRACKET}${assetName}`);
};
//# sourceMappingURL=cip67.js.map