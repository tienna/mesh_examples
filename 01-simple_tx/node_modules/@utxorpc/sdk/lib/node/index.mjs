// src/cardano.ts
import {
  createPromiseClient
} from "@connectrpc/connect";

// src/grpcTransport.node.ts
import { createGrpcTransport as createGrpcNodeTransport } from "@connectrpc/connect-node";
var createGrpcTransport = createGrpcNodeTransport;

// src/cardano.ts
import { Buffer } from "buffer";
import {
  sync,
  syncConnect,
  queryConnect,
  submitConnect
} from "@utxorpc/spec";

// src/common.ts
function metadataInterceptor(options) {
  return (next) => async (req) => {
    if (!!(options == null ? void 0 : options.headers)) {
      Object.entries(options.headers).forEach(
        ([key, value]) => req.header.set(key, value)
      );
    }
    return await next(req);
  };
}

// src/cardano.ts
function anyChainToBlock(msg) {
  return msg.chain.case == "cardano" ? msg.chain.value : null;
}
function pointToBlockRef(p) {
  return new sync.BlockRef({
    index: BigInt(p.slot),
    hash: new Uint8Array(Buffer.from(p.hash, "hex"))
  });
}
function blockRefToPoint(r) {
  return {
    slot: r.index.toString(),
    hash: Buffer.from(r.hash).toString("hex")
  };
}
function anyUtxoToChain(u) {
  switch (u.parsedState.case) {
    case "cardano":
      return {
        txoRef: u.txoRef,
        parsedValued: u.parsedState.value,
        nativeBytes: u.nativeBytes
      };
    default:
      throw Error("source is not Cardano data");
  }
}
function anyParamsToChain(p) {
  switch (p.params.case) {
    case "cardano":
      return p.params.value;
    default:
      throw Error("source is not Cardano data");
  }
}
var SyncClient = class {
  constructor(options) {
    let headerInterceptor = metadataInterceptor(options);
    const transport = createGrpcTransport({
      httpVersion: "2",
      baseUrl: options.uri,
      interceptors: [headerInterceptor]
    });
    this.inner = createPromiseClient(syncConnect.SyncService, transport);
  }
  async *followTip(intersect) {
    const req = new sync.FollowTipRequest({
      intersect: intersect == null ? void 0 : intersect.map((p) => pointToBlockRef(p))
    });
    const res = this.inner.followTip(req);
    for await (const any of res) {
      switch (any.action.case) {
        case "apply":
          yield {
            action: "apply",
            block: anyChainToBlock(any.action.value)
          };
          break;
        case "undo":
          yield {
            action: "undo",
            block: anyChainToBlock(any.action.value)
          };
          break;
        case "reset":
          yield {
            action: "reset",
            point: blockRefToPoint(any.action.value)
          };
      }
    }
  }
  async fetchBlock(p) {
    const req = pointToBlockRef(p);
    const res = await this.inner.fetchBlock({ ref: [req] });
    return anyChainToBlock(res.block[0]);
  }
};
var QueryClient = class {
  constructor(options) {
    let headerInterceptor = metadataInterceptor(options);
    const transport = createGrpcTransport({
      httpVersion: "2",
      baseUrl: options.uri,
      interceptors: [headerInterceptor]
    });
    this.inner = createPromiseClient(queryConnect.QueryService, transport);
  }
  async readParams() {
    const res = await this.inner.readParams({});
    return anyParamsToChain(res.values);
  }
  async readUtxosByOutputRef(refs) {
    const searchResponse = await this.inner.readUtxos({
      keys: refs.map((ref) => {
        return {
          hash: ref.txHash,
          index: ref.outputIndex
        };
      })
    });
    return searchResponse.items.map(anyUtxoToChain);
  }
  async searchUtxosByMatch(pattern) {
    const searchResponse = await this.inner.searchUtxos({
      predicate: {
        match: { utxoPattern: { value: pattern, case: "cardano" } }
      }
    });
    return searchResponse.items.map(anyUtxoToChain);
  }
  async searchUtxosByAddress(address) {
    return this.searchUtxosByMatch({
      address: {
        exactAddress: address
      }
    });
  }
  async searchUtxosByPaymentPart(paymentPart) {
    return this.searchUtxosByMatch({
      address: {
        paymentPart
      }
    });
  }
  async searchUtxosByDelegationPart(delegationPart) {
    return this.searchUtxosByMatch({
      address: {
        delegationPart
      }
    });
  }
  async searchUtxosByAsset(policyId, name) {
    return this.searchUtxosByMatch({
      asset: policyId ? { policyId } : { assetName: name }
    });
  }
  async searchUtxosByAddressWithAsset(address, policyId, name) {
    return this.searchUtxosByMatch({
      address: {
        exactAddress: address
      },
      asset: policyId ? { policyId } : { assetName: name }
    });
  }
};
var SubmitClient = class {
  constructor(options) {
    let headerInterceptor = metadataInterceptor(options);
    const transport = createGrpcTransport({
      httpVersion: "2",
      baseUrl: options.uri,
      interceptors: [headerInterceptor]
    });
    this.inner = createPromiseClient(submitConnect.SubmitService, transport);
  }
  async submitTx(tx) {
    const res = await this.inner.submitTx({
      tx: [tx].map((cbor) => ({ type: { case: "raw", value: cbor } }))
    });
    return res.ref[0];
  }
  async *waitForTx(txHash) {
    const updates = this.inner.waitForTx({
      ref: [txHash]
    });
    for await (const change of updates) {
      yield change.stage;
    }
  }
};
export {
  QueryClient as CardanoQueryClient,
  SubmitClient as CardanoSubmitClient,
  SyncClient as CardanoSyncClient
};
//# sourceMappingURL=index.mjs.map