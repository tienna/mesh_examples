import { Message, PartialMessage, proto3, FieldList, BinaryReadOptions, JsonValue, JsonReadOptions, PlainMessage, FieldMask, MethodKind } from '@bufbuild/protobuf';

/**
 * Purpose of the redeemer in a transaction.
 *
 * @generated from enum utxorpc.v1alpha.cardano.RedeemerPurpose
 */
declare enum RedeemerPurpose {
    /**
     * @generated from enum value: REDEEMER_PURPOSE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from enum value: REDEEMER_PURPOSE_SPEND = 1;
     */
    SPEND = 1,
    /**
     * @generated from enum value: REDEEMER_PURPOSE_MINT = 2;
     */
    MINT = 2,
    /**
     * @generated from enum value: REDEEMER_PURPOSE_CERT = 3;
     */
    CERT = 3,
    /**
     * @generated from enum value: REDEEMER_PURPOSE_REWARD = 4;
     */
    REWARD = 4,
    /**
     * @generated from enum value: REDEEMER_PURPOSE_VOTE = 5;
     */
    VOTE = 5,
    /**
     * @generated from enum value: REDEEMER_PURPOSE_PROPOSE = 6;
     */
    PROPOSE = 6
}
/**
 * @generated from enum utxorpc.v1alpha.cardano.MirSource
 */
declare enum MirSource {
    /**
     * @generated from enum value: MIR_SOURCE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from enum value: MIR_SOURCE_RESERVES = 1;
     */
    RESERVES = 1,
    /**
     * @generated from enum value: MIR_SOURCE_TREASURY = 2;
     */
    TREASURY = 2
}
/**
 * Redeemer information for a Plutus script.
 *
 * @generated from message utxorpc.v1alpha.cardano.Redeemer
 */
declare class Redeemer extends Message<Redeemer> {
    /**
     * Purpose of the redeemer.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RedeemerPurpose purpose = 1;
     */
    purpose: RedeemerPurpose;
    /**
     * Plutus data associated with the redeemer.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PlutusData payload = 2;
     */
    payload?: PlutusData;
    constructor(data?: PartialMessage<Redeemer>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Redeemer";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Redeemer;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Redeemer;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Redeemer;
    static equals(a: Redeemer | PlainMessage<Redeemer> | undefined, b: Redeemer | PlainMessage<Redeemer> | undefined): boolean;
}
/**
 * Represents a transaction input in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxInput
 */
declare class TxInput extends Message<TxInput> {
    /**
     * Hash of the previous transaction.
     *
     * @generated from field: bytes tx_hash = 1;
     */
    txHash: Uint8Array;
    /**
     * Index of the output in the previous transaction.
     *
     * @generated from field: uint32 output_index = 2;
     */
    outputIndex: number;
    /**
     * Content of the input represented as output of the related transaction
     *
     * @generated from field: utxorpc.v1alpha.cardano.TxOutput as_output = 3;
     */
    asOutput?: TxOutput;
    /**
     * Redeemer for the Plutus script.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 4;
     */
    redeemer?: Redeemer;
    constructor(data?: PartialMessage<TxInput>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.TxInput";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxInput;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxInput;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxInput;
    static equals(a: TxInput | PlainMessage<TxInput> | undefined, b: TxInput | PlainMessage<TxInput> | undefined): boolean;
}
/**
 * Represents a transaction output in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxOutput
 */
declare class TxOutput extends Message<TxOutput> {
    /**
     * Address receiving the output.
     *
     * @generated from field: bytes address = 1;
     */
    address: Uint8Array;
    /**
     * Amount of ADA in the output.
     *
     * @generated from field: uint64 coin = 2;
     */
    coin: bigint;
    /**
     * Additional native (non-ADA) assets in the output.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Multiasset assets = 3;
     */
    assets: Multiasset[];
    /**
     * Plutus data associated with the output.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Datum datum = 4;
     */
    datum?: Datum;
    /**
     * Script associated with the output.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Script script = 5;
     */
    script?: Script;
    constructor(data?: PartialMessage<TxOutput>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.TxOutput";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxOutput;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxOutput;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxOutput;
    static equals(a: TxOutput | PlainMessage<TxOutput> | undefined, b: TxOutput | PlainMessage<TxOutput> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.Datum
 */
declare class Datum extends Message<Datum> {
    /**
     * Hash of this datum as seen on-chain
     *
     * @generated from field: bytes hash = 1;
     */
    hash: Uint8Array;
    /**
     * Parsed Plutus data payload
     *
     * @generated from field: utxorpc.v1alpha.cardano.PlutusData payload = 2;
     */
    payload?: PlutusData;
    /**
     * Original cbor-encoded data as seen on-chain
     *
     * @generated from field: bytes original_cbor = 3;
     */
    originalCbor: Uint8Array;
    constructor(data?: PartialMessage<Datum>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Datum";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Datum;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Datum;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Datum;
    static equals(a: Datum | PlainMessage<Datum> | undefined, b: Datum | PlainMessage<Datum> | undefined): boolean;
}
/**
 * Represents a custom asset in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.Asset
 */
declare class Asset extends Message<Asset> {
    /**
     * Name of the custom asset.
     *
     * @generated from field: bytes name = 1;
     */
    name: Uint8Array;
    /**
     * Quantity of the custom asset in case of an output.
     *
     * @generated from field: uint64 output_coin = 2;
     */
    outputCoin: bigint;
    /**
     * Quantity of the custom asset in case of a mint.
     *
     * @generated from field: int64 mint_coin = 3;
     */
    mintCoin: bigint;
    constructor(data?: PartialMessage<Asset>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Asset";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Asset;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Asset;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Asset;
    static equals(a: Asset | PlainMessage<Asset> | undefined, b: Asset | PlainMessage<Asset> | undefined): boolean;
}
/**
 * Represents a multi-asset group in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.Multiasset
 */
declare class Multiasset extends Message<Multiasset> {
    /**
     * Policy ID governing the custom assets.
     *
     * @generated from field: bytes policy_id = 1;
     */
    policyId: Uint8Array;
    /**
     * List of custom assets.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Asset assets = 2;
     */
    assets: Asset[];
    /**
     * Redeemer for the Plutus script.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 3;
     */
    redeemer?: Redeemer;
    constructor(data?: PartialMessage<Multiasset>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Multiasset";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Multiasset;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Multiasset;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Multiasset;
    static equals(a: Multiasset | PlainMessage<Multiasset> | undefined, b: Multiasset | PlainMessage<Multiasset> | undefined): boolean;
}
/**
 * Represents the validity interval of a transaction.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxValidity
 */
declare class TxValidity extends Message<TxValidity> {
    /**
     * Start of the validity interval.
     *
     * @generated from field: uint64 start = 1;
     */
    start: bigint;
    /**
     * End of the validity interval (TTL: Time to Live).
     *
     * @generated from field: uint64 ttl = 2;
     */
    ttl: bigint;
    constructor(data?: PartialMessage<TxValidity>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.TxValidity";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxValidity;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxValidity;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxValidity;
    static equals(a: TxValidity | PlainMessage<TxValidity> | undefined, b: TxValidity | PlainMessage<TxValidity> | undefined): boolean;
}
/**
 * Represents the collateral information for a transaction.
 *
 * @generated from message utxorpc.v1alpha.cardano.Collateral
 */
declare class Collateral extends Message<Collateral> {
    /**
     * Collateral inputs for the transaction.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.TxInput collateral = 1;
     */
    collateral: TxInput[];
    /**
     * Collateral return in case of script failure.
     *
     * @generated from field: utxorpc.v1alpha.cardano.TxOutput collateral_return = 2;
     */
    collateralReturn?: TxOutput;
    /**
     * Total amount of collateral.
     *
     * @generated from field: uint64 total_collateral = 3;
     */
    totalCollateral: bigint;
    constructor(data?: PartialMessage<Collateral>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Collateral";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Collateral;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Collateral;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Collateral;
    static equals(a: Collateral | PlainMessage<Collateral> | undefined, b: Collateral | PlainMessage<Collateral> | undefined): boolean;
}
/**
 * Represents a withdrawal from a reward account.
 *
 * @generated from message utxorpc.v1alpha.cardano.Withdrawal
 */
declare class Withdrawal extends Message<Withdrawal> {
    /**
     * Address of the reward account.
     *
     * @generated from field: bytes reward_account = 1;
     */
    rewardAccount: Uint8Array;
    /**
     * Amount of ADA withdrawn.
     *
     * @generated from field: uint64 coin = 2;
     */
    coin: bigint;
    /**
     * Redeemer for the Plutus script.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 3;
     */
    redeemer?: Redeemer;
    constructor(data?: PartialMessage<Withdrawal>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Withdrawal";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Withdrawal;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Withdrawal;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Withdrawal;
    static equals(a: Withdrawal | PlainMessage<Withdrawal> | undefined, b: Withdrawal | PlainMessage<Withdrawal> | undefined): boolean;
}
/**
 * Represents a set of witnesses that validate a transaction
 *
 * @generated from message utxorpc.v1alpha.cardano.WitnessSet
 */
declare class WitnessSet extends Message<WitnessSet> {
    /**
     * List of VKey witnesses.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.VKeyWitness vkeywitness = 1;
     */
    vkeywitness: VKeyWitness[];
    /**
     * List of scripts.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Script script = 2;
     */
    script: Script[];
    /**
     * List of Plutus data elements associated with the transaction.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusData plutus_datums = 3;
     */
    plutusDatums: PlutusData[];
    constructor(data?: PartialMessage<WitnessSet>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.WitnessSet";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WitnessSet;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WitnessSet;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WitnessSet;
    static equals(a: WitnessSet | PlainMessage<WitnessSet> | undefined, b: WitnessSet | PlainMessage<WitnessSet> | undefined): boolean;
}
/**
 * Auxiliary data not directly tied to the validation process
 *
 * @generated from message utxorpc.v1alpha.cardano.AuxData
 */
declare class AuxData extends Message<AuxData> {
    /**
     * List of auxiliary metadata elements.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Metadata metadata = 1;
     */
    metadata: Metadata[];
    /**
     * List of auxiliary scripts.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Script scripts = 2;
     */
    scripts: Script[];
    constructor(data?: PartialMessage<AuxData>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.AuxData";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuxData;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuxData;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuxData;
    static equals(a: AuxData | PlainMessage<AuxData> | undefined, b: AuxData | PlainMessage<AuxData> | undefined): boolean;
}
/**
 * Represents a transaction in the Cardano blockchain.
 *
 * @generated from message utxorpc.v1alpha.cardano.Tx
 */
declare class Tx extends Message<Tx> {
    /**
     * List of transaction inputs
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.TxInput inputs = 1;
     */
    inputs: TxInput[];
    /**
     * List of transaction outputs
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.TxOutput outputs = 2;
     */
    outputs: TxOutput[];
    /**
     * List of certificates
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Certificate certificates = 3;
     */
    certificates: Certificate[];
    /**
     * List of withdrawals
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Withdrawal withdrawals = 4;
     */
    withdrawals: Withdrawal[];
    /**
     * List of minted custom assets
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Multiasset mint = 5;
     */
    mint: Multiasset[];
    /**
     * List of reference inputs
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.TxInput reference_inputs = 6;
     */
    referenceInputs: TxInput[];
    /**
     * Witnesses that validte the transaction
     *
     * @generated from field: utxorpc.v1alpha.cardano.WitnessSet witnesses = 7;
     */
    witnesses?: WitnessSet;
    /**
     * Collateral details in case of failed transaction
     *
     * @generated from field: utxorpc.v1alpha.cardano.Collateral collateral = 8;
     */
    collateral?: Collateral;
    /**
     * Transaction fee in ADA
     *
     * @generated from field: uint64 fee = 9;
     */
    fee: bigint;
    /**
     * Validity interval of the transaction
     *
     * @generated from field: utxorpc.v1alpha.cardano.TxValidity validity = 10;
     */
    validity?: TxValidity;
    /**
     * Flag indicating whether the transaction was successful
     *
     * @generated from field: bool successful = 11;
     */
    successful: boolean;
    /**
     * Auxiliary data not directly tied to the validation process
     *
     * @generated from field: utxorpc.v1alpha.cardano.AuxData auxiliary = 12;
     */
    auxiliary?: AuxData;
    /**
     * Hash of the transaction that serves as main identifier
     *
     * @generated from field: bytes hash = 13;
     */
    hash: Uint8Array;
    constructor(data?: PartialMessage<Tx>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Tx";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tx;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tx;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tx;
    static equals(a: Tx | PlainMessage<Tx> | undefined, b: Tx | PlainMessage<Tx> | undefined): boolean;
}
/**
 * Contains the header information for a block.
 *
 * @generated from message utxorpc.v1alpha.cardano.BlockHeader
 */
declare class BlockHeader extends Message<BlockHeader> {
    /**
     * Slot number.
     *
     * @generated from field: uint64 slot = 1;
     */
    slot: bigint;
    /**
     * Block hash.
     *
     * @generated from field: bytes hash = 2;
     */
    hash: Uint8Array;
    /**
     * Block height.
     *
     * @generated from field: uint64 height = 3;
     */
    height: bigint;
    constructor(data?: PartialMessage<BlockHeader>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.BlockHeader";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockHeader;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockHeader;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockHeader;
    static equals(a: BlockHeader | PlainMessage<BlockHeader> | undefined, b: BlockHeader | PlainMessage<BlockHeader> | undefined): boolean;
}
/**
 * Contains the transaction data for a block.
 *
 * @generated from message utxorpc.v1alpha.cardano.BlockBody
 */
declare class BlockBody extends Message<BlockBody> {
    /**
     * List of transactions.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Tx tx = 1;
     */
    tx: Tx[];
    constructor(data?: PartialMessage<BlockBody>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.BlockBody";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockBody;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockBody;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockBody;
    static equals(a: BlockBody | PlainMessage<BlockBody> | undefined, b: BlockBody | PlainMessage<BlockBody> | undefined): boolean;
}
/**
 * Represents a complete block, including header and body.
 *
 * @generated from message utxorpc.v1alpha.cardano.Block
 */
declare class Block extends Message<Block> {
    /**
     * Block header.
     *
     * @generated from field: utxorpc.v1alpha.cardano.BlockHeader header = 1;
     */
    header?: BlockHeader;
    /**
     * Block body.
     *
     * @generated from field: utxorpc.v1alpha.cardano.BlockBody body = 2;
     */
    body?: BlockBody;
    constructor(data?: PartialMessage<Block>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Block";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Block;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Block;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Block;
    static equals(a: Block | PlainMessage<Block> | undefined, b: Block | PlainMessage<Block> | undefined): boolean;
}
/**
 * Represents a VKey witness used to sign a transaction.
 *
 * @generated from message utxorpc.v1alpha.cardano.VKeyWitness
 */
declare class VKeyWitness extends Message<VKeyWitness> {
    /**
     * Verification key.
     *
     * @generated from field: bytes vkey = 1;
     */
    vkey: Uint8Array;
    /**
     * Signature generated using the associated private key.
     *
     * @generated from field: bytes signature = 2;
     */
    signature: Uint8Array;
    constructor(data?: PartialMessage<VKeyWitness>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.VKeyWitness";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VKeyWitness;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VKeyWitness;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VKeyWitness;
    static equals(a: VKeyWitness | PlainMessage<VKeyWitness> | undefined, b: VKeyWitness | PlainMessage<VKeyWitness> | undefined): boolean;
}
/**
 * Represents a native script in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.NativeScript
 */
declare class NativeScript extends Message<NativeScript> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.NativeScript.native_script
     */
    nativeScript: {
        /**
         * Script based on an address key hash.
         *
         * @generated from field: bytes script_pubkey = 1;
         */
        value: Uint8Array;
        case: "scriptPubkey";
    } | {
        /**
         * Script that requires all nested scripts to be satisfied.
         *
         * @generated from field: utxorpc.v1alpha.cardano.NativeScriptList script_all = 2;
         */
        value: NativeScriptList;
        case: "scriptAll";
    } | {
        /**
         * Script that requires any of the nested scripts to be satisfied.
         *
         * @generated from field: utxorpc.v1alpha.cardano.NativeScriptList script_any = 3;
         */
        value: NativeScriptList;
        case: "scriptAny";
    } | {
        /**
         * Script that requires k out of n nested scripts to be satisfied.
         *
         * @generated from field: utxorpc.v1alpha.cardano.ScriptNOfK script_n_of_k = 4;
         */
        value: ScriptNOfK;
        case: "scriptNOfK";
    } | {
        /**
         * Slot number before which the script is invalid.
         *
         * @generated from field: uint64 invalid_before = 5;
         */
        value: bigint;
        case: "invalidBefore";
    } | {
        /**
         * Slot number after which the script is invalid.
         *
         * @generated from field: uint64 invalid_hereafter = 6;
         */
        value: bigint;
        case: "invalidHereafter";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<NativeScript>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.NativeScript";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeScript;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeScript;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeScript;
    static equals(a: NativeScript | PlainMessage<NativeScript> | undefined, b: NativeScript | PlainMessage<NativeScript> | undefined): boolean;
}
/**
 * Represents a list of native scripts.
 *
 * @generated from message utxorpc.v1alpha.cardano.NativeScriptList
 */
declare class NativeScriptList extends Message<NativeScriptList> {
    /**
     * List of native scripts.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.NativeScript items = 1;
     */
    items: NativeScript[];
    constructor(data?: PartialMessage<NativeScriptList>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.NativeScriptList";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NativeScriptList;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NativeScriptList;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NativeScriptList;
    static equals(a: NativeScriptList | PlainMessage<NativeScriptList> | undefined, b: NativeScriptList | PlainMessage<NativeScriptList> | undefined): boolean;
}
/**
 * Represents a "k out of n" native script.
 *
 * @generated from message utxorpc.v1alpha.cardano.ScriptNOfK
 */
declare class ScriptNOfK extends Message<ScriptNOfK> {
    /**
     * The number of required satisfied scripts.
     *
     * @generated from field: uint32 k = 1;
     */
    k: number;
    /**
     * List of native scripts.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.NativeScript scripts = 2;
     */
    scripts: NativeScript[];
    constructor(data?: PartialMessage<ScriptNOfK>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.ScriptNOfK";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScriptNOfK;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScriptNOfK;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScriptNOfK;
    static equals(a: ScriptNOfK | PlainMessage<ScriptNOfK> | undefined, b: ScriptNOfK | PlainMessage<ScriptNOfK> | undefined): boolean;
}
/**
 * Represents a constructor for Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Constr
 */
declare class Constr extends Message<Constr> {
    /**
     * @generated from field: uint32 tag = 1;
     */
    tag: number;
    /**
     * @generated from field: uint64 any_constructor = 2;
     */
    anyConstructor: bigint;
    /**
     * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusData fields = 3;
     */
    fields: PlutusData[];
    constructor(data?: PartialMessage<Constr>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Constr";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constr;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constr;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constr;
    static equals(a: Constr | PlainMessage<Constr> | undefined, b: Constr | PlainMessage<Constr> | undefined): boolean;
}
/**
 * Represents a big integer for Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.BigInt
 */
declare class BigInt extends Message<BigInt> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.BigInt.big_int
     */
    bigInt: {
        /**
         * @generated from field: int64 int = 1;
         */
        value: bigint;
        case: "int";
    } | {
        /**
         * @generated from field: bytes big_u_int = 2;
         */
        value: Uint8Array;
        case: "bigUInt";
    } | {
        /**
         * @generated from field: bytes big_n_int = 3;
         */
        value: Uint8Array;
        case: "bigNInt";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<BigInt>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.BigInt";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigInt;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigInt;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigInt;
    static equals(a: BigInt | PlainMessage<BigInt> | undefined, b: BigInt | PlainMessage<BigInt> | undefined): boolean;
}
/**
 * Represents a key-value pair for Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusDataPair
 */
declare class PlutusDataPair extends Message<PlutusDataPair> {
    /**
     * Key of the pair.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PlutusData key = 1;
     */
    key?: PlutusData;
    /**
     * Value of the pair.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PlutusData value = 2;
     */
    value?: PlutusData;
    constructor(data?: PartialMessage<PlutusDataPair>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PlutusDataPair";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataPair;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataPair;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataPair;
    static equals(a: PlutusDataPair | PlainMessage<PlutusDataPair> | undefined, b: PlutusDataPair | PlainMessage<PlutusDataPair> | undefined): boolean;
}
/**
 * Represents a Plutus data item in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusData
 */
declare class PlutusData extends Message<PlutusData> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.PlutusData.plutus_data
     */
    plutusData: {
        /**
         * Constructor.
         *
         * @generated from field: utxorpc.v1alpha.cardano.Constr constr = 2;
         */
        value: Constr;
        case: "constr";
    } | {
        /**
         * Map of Plutus data.
         *
         * @generated from field: utxorpc.v1alpha.cardano.PlutusDataMap map = 3;
         */
        value: PlutusDataMap;
        case: "map";
    } | {
        /**
         * Big integer.
         *
         * @generated from field: utxorpc.v1alpha.cardano.BigInt big_int = 4;
         */
        value: BigInt;
        case: "bigInt";
    } | {
        /**
         * Bounded bytes.
         *
         * @generated from field: bytes bounded_bytes = 5;
         */
        value: Uint8Array;
        case: "boundedBytes";
    } | {
        /**
         * Array of Plutus data.
         *
         * @generated from field: utxorpc.v1alpha.cardano.PlutusDataArray array = 6;
         */
        value: PlutusDataArray;
        case: "array";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<PlutusData>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PlutusData";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusData;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusData;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusData;
    static equals(a: PlutusData | PlainMessage<PlutusData> | undefined, b: PlutusData | PlainMessage<PlutusData> | undefined): boolean;
}
/**
 * Represents a map of Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusDataMap
 */
declare class PlutusDataMap extends Message<PlutusDataMap> {
    /**
     * List of key-value pairs.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusDataPair pairs = 1;
     */
    pairs: PlutusDataPair[];
    constructor(data?: PartialMessage<PlutusDataMap>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PlutusDataMap";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataMap;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataMap;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataMap;
    static equals(a: PlutusDataMap | PlainMessage<PlutusDataMap> | undefined, b: PlutusDataMap | PlainMessage<PlutusDataMap> | undefined): boolean;
}
/**
 * Represents an array of Plutus data in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PlutusDataArray
 */
declare class PlutusDataArray extends Message<PlutusDataArray> {
    /**
     * List of Plutus data items.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.PlutusData items = 1;
     */
    items: PlutusData[];
    constructor(data?: PartialMessage<PlutusDataArray>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PlutusDataArray";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlutusDataArray;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlutusDataArray;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlutusDataArray;
    static equals(a: PlutusDataArray | PlainMessage<PlutusDataArray> | undefined, b: PlutusDataArray | PlainMessage<PlutusDataArray> | undefined): boolean;
}
/**
 * Represents a script in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Script
 */
declare class Script extends Message<Script> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.Script.script
     */
    script: {
        /**
         * Native script.
         *
         * @generated from field: utxorpc.v1alpha.cardano.NativeScript native = 1;
         */
        value: NativeScript;
        case: "native";
    } | {
        /**
         * Plutus V1 script.
         *
         * @generated from field: bytes plutus_v1 = 2;
         */
        value: Uint8Array;
        case: "plutusV1";
    } | {
        /**
         * Plutus V2 script.
         *
         * @generated from field: bytes plutus_v2 = 3;
         */
        value: Uint8Array;
        case: "plutusV2";
    } | {
        /**
         * Plutus V3 script.
         *
         * @generated from field: bytes plutus_v3 = 4;
         */
        value: Uint8Array;
        case: "plutusV3";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<Script>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Script";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Script;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Script;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Script;
    static equals(a: Script | PlainMessage<Script> | undefined, b: Script | PlainMessage<Script> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.Metadatum
 */
declare class Metadatum extends Message<Metadatum> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.Metadatum.metadatum
     */
    metadatum: {
        /**
         * @generated from field: int64 int = 1;
         */
        value: bigint;
        case: "int";
    } | {
        /**
         * @generated from field: bytes bytes = 2;
         */
        value: Uint8Array;
        case: "bytes";
    } | {
        /**
         * @generated from field: string text = 3;
         */
        value: string;
        case: "text";
    } | {
        /**
         * @generated from field: utxorpc.v1alpha.cardano.MetadatumArray array = 4;
         */
        value: MetadatumArray;
        case: "array";
    } | {
        /**
         * @generated from field: utxorpc.v1alpha.cardano.MetadatumMap map = 5;
         */
        value: MetadatumMap;
        case: "map";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<Metadatum>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Metadatum";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadatum;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadatum;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadatum;
    static equals(a: Metadatum | PlainMessage<Metadatum> | undefined, b: Metadatum | PlainMessage<Metadatum> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.MetadatumArray
 */
declare class MetadatumArray extends Message<MetadatumArray> {
    /**
     * @generated from field: repeated utxorpc.v1alpha.cardano.Metadatum items = 1;
     */
    items: Metadatum[];
    constructor(data?: PartialMessage<MetadatumArray>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.MetadatumArray";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumArray;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumArray;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumArray;
    static equals(a: MetadatumArray | PlainMessage<MetadatumArray> | undefined, b: MetadatumArray | PlainMessage<MetadatumArray> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.MetadatumMap
 */
declare class MetadatumMap extends Message<MetadatumMap> {
    /**
     * @generated from field: repeated utxorpc.v1alpha.cardano.MetadatumPair pairs = 1;
     */
    pairs: MetadatumPair[];
    constructor(data?: PartialMessage<MetadatumMap>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.MetadatumMap";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumMap;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumMap;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumMap;
    static equals(a: MetadatumMap | PlainMessage<MetadatumMap> | undefined, b: MetadatumMap | PlainMessage<MetadatumMap> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.MetadatumPair
 */
declare class MetadatumPair extends Message<MetadatumPair> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.Metadatum key = 1;
     */
    key?: Metadatum;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.Metadatum value = 2;
     */
    value?: Metadatum;
    constructor(data?: PartialMessage<MetadatumPair>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.MetadatumPair";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadatumPair;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadatumPair;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadatumPair;
    static equals(a: MetadatumPair | PlainMessage<MetadatumPair> | undefined, b: MetadatumPair | PlainMessage<MetadatumPair> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.Metadata
 */
declare class Metadata extends Message<Metadata> {
    /**
     * @generated from field: uint64 label = 1;
     */
    label: bigint;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.Metadatum value = 2;
     */
    value?: Metadatum;
    constructor(data?: PartialMessage<Metadata>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Metadata";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;
    static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}
/**
 * Represents a stake credential in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.StakeCredential
 */
declare class StakeCredential extends Message<StakeCredential> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.StakeCredential.stake_credential
     */
    stakeCredential: {
        /**
         * Address key hash.
         *
         * @generated from field: bytes addr_key_hash = 1;
         */
        value: Uint8Array;
        case: "addrKeyHash";
    } | {
        /**
         * Script hash.
         *
         * @generated from field: bytes script_hash = 2;
         */
        value: Uint8Array;
        case: "scriptHash";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<StakeCredential>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.StakeCredential";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeCredential;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeCredential;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeCredential;
    static equals(a: StakeCredential | PlainMessage<StakeCredential> | undefined, b: StakeCredential | PlainMessage<StakeCredential> | undefined): boolean;
}
/**
 * Represents a rational number as a fraction.
 *
 * @generated from message utxorpc.v1alpha.cardano.RationalNumber
 */
declare class RationalNumber extends Message<RationalNumber> {
    /**
     * @generated from field: int32 numerator = 1;
     */
    numerator: number;
    /**
     * @generated from field: uint32 denominator = 2;
     */
    denominator: number;
    constructor(data?: PartialMessage<RationalNumber>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.RationalNumber";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RationalNumber;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RationalNumber;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RationalNumber;
    static equals(a: RationalNumber | PlainMessage<RationalNumber> | undefined, b: RationalNumber | PlainMessage<RationalNumber> | undefined): boolean;
}
/**
 * Represents a relay in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Relay
 */
declare class Relay extends Message<Relay> {
    /**
     * @generated from field: bytes ip_v4 = 1;
     */
    ipV4: Uint8Array;
    /**
     * @generated from field: bytes ip_v6 = 2;
     */
    ipV6: Uint8Array;
    /**
     * @generated from field: string dns_name = 3;
     */
    dnsName: string;
    /**
     * @generated from field: uint32 port = 4;
     */
    port: number;
    constructor(data?: PartialMessage<Relay>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Relay";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Relay;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Relay;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Relay;
    static equals(a: Relay | PlainMessage<Relay> | undefined, b: Relay | PlainMessage<Relay> | undefined): boolean;
}
/**
 * Represents pool metadata in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PoolMetadata
 */
declare class PoolMetadata extends Message<PoolMetadata> {
    /**
     * @generated from field: string url = 1;
     */
    url: string;
    /**
     * @generated from field: bytes hash = 2;
     */
    hash: Uint8Array;
    constructor(data?: PartialMessage<PoolMetadata>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PoolMetadata";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolMetadata;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolMetadata;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolMetadata;
    static equals(a: PoolMetadata | PlainMessage<PoolMetadata> | undefined, b: PoolMetadata | PlainMessage<PoolMetadata> | undefined): boolean;
}
/**
 * Represents a certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.Certificate
 */
declare class Certificate extends Message<Certificate> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.Certificate.certificate
     */
    certificate: {
        /**
         * Stake registration certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_registration = 1;
         */
        value: StakeCredential;
        case: "stakeRegistration";
    } | {
        /**
         * Stake deregistration certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_deregistration = 2;
         */
        value: StakeCredential;
        case: "stakeDeregistration";
    } | {
        /**
         * Stake delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.StakeDelegationCert stake_delegation = 3;
         */
        value: StakeDelegationCert;
        case: "stakeDelegation";
    } | {
        /**
         * Pool registration certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.PoolRegistrationCert pool_registration = 4;
         */
        value: PoolRegistrationCert;
        case: "poolRegistration";
    } | {
        /**
         * Pool retirement certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.PoolRetirementCert pool_retirement = 5;
         */
        value: PoolRetirementCert;
        case: "poolRetirement";
    } | {
        /**
         * Genesis key delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.GenesisKeyDelegationCert genesis_key_delegation = 6;
         */
        value: GenesisKeyDelegationCert;
        case: "genesisKeyDelegation";
    } | {
        /**
         * Move instantaneous rewards certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.MirCert mir_cert = 7;
         */
        value: MirCert;
        case: "mirCert";
    } | {
        /**
         * Registration certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.RegCert reg_cert = 8;
         */
        value: RegCert;
        case: "regCert";
    } | {
        /**
         * Unregistration certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.UnRegCert unreg_cert = 9;
         */
        value: UnRegCert;
        case: "unregCert";
    } | {
        /**
         * Vote delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.VoteDelegCert vote_deleg_cert = 10;
         */
        value: VoteDelegCert;
        case: "voteDelegCert";
    } | {
        /**
         * Stake and vote delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.StakeVoteDelegCert stake_vote_deleg_cert = 11;
         */
        value: StakeVoteDelegCert;
        case: "stakeVoteDelegCert";
    } | {
        /**
         * Stake registration and delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.StakeRegDelegCert stake_reg_deleg_cert = 12;
         */
        value: StakeRegDelegCert;
        case: "stakeRegDelegCert";
    } | {
        /**
         * Vote registration and delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.VoteRegDelegCert vote_reg_deleg_cert = 13;
         */
        value: VoteRegDelegCert;
        case: "voteRegDelegCert";
    } | {
        /**
         * Stake and vote registration and delegation certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.StakeVoteRegDelegCert stake_vote_reg_deleg_cert = 14;
         */
        value: StakeVoteRegDelegCert;
        case: "stakeVoteRegDelegCert";
    } | {
        /**
         * Authorize committee hot key certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.AuthCommitteeHotCert auth_committee_hot_cert = 15;
         */
        value: AuthCommitteeHotCert;
        case: "authCommitteeHotCert";
    } | {
        /**
         * Resign committee cold key certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.ResignCommitteeColdCert resign_committee_cold_cert = 16;
         */
        value: ResignCommitteeColdCert;
        case: "resignCommitteeColdCert";
    } | {
        /**
         * Register DRep certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.RegDRepCert reg_drep_cert = 17;
         */
        value: RegDRepCert;
        case: "regDrepCert";
    } | {
        /**
         * Unregister DRep certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.UnRegDRepCert unreg_drep_cert = 18;
         */
        value: UnRegDRepCert;
        case: "unregDrepCert";
    } | {
        /**
         * Update DRep certificate.
         *
         * @generated from field: utxorpc.v1alpha.cardano.UpdateDRepCert update_drep_cert = 19;
         */
        value: UpdateDRepCert;
        case: "updateDrepCert";
    } | {
        case: undefined;
        value?: undefined;
    };
    /**
     * Redeemer for the Plutus script.
     *
     * @generated from field: utxorpc.v1alpha.cardano.Redeemer redeemer = 100;
     */
    redeemer?: Redeemer;
    constructor(data?: PartialMessage<Certificate>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Certificate";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Certificate;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Certificate;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Certificate;
    static equals(a: Certificate | PlainMessage<Certificate> | undefined, b: Certificate | PlainMessage<Certificate> | undefined): boolean;
}
/**
 * Represents a stake delegation certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.StakeDelegationCert
 */
declare class StakeDelegationCert extends Message<StakeDelegationCert> {
    /**
     * Stake credential.
     *
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * Pool key hash.
     *
     * @generated from field: bytes pool_keyhash = 2;
     */
    poolKeyhash: Uint8Array;
    constructor(data?: PartialMessage<StakeDelegationCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.StakeDelegationCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeDelegationCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeDelegationCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeDelegationCert;
    static equals(a: StakeDelegationCert | PlainMessage<StakeDelegationCert> | undefined, b: StakeDelegationCert | PlainMessage<StakeDelegationCert> | undefined): boolean;
}
/**
 * Represents a pool registration certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PoolRegistrationCert
 */
declare class PoolRegistrationCert extends Message<PoolRegistrationCert> {
    /**
     * Operator key hash.
     *
     * @generated from field: bytes operator = 1;
     */
    operator: Uint8Array;
    /**
     * VRF key hash.
     *
     * @generated from field: bytes vrf_keyhash = 2;
     */
    vrfKeyhash: Uint8Array;
    /**
     * Pledge amount.
     *
     * @generated from field: uint64 pledge = 3;
     */
    pledge: bigint;
    /**
     * Pool cost.
     *
     * @generated from field: uint64 cost = 4;
     */
    cost: bigint;
    /**
     * Pool margin.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RationalNumber margin = 5;
     */
    margin?: RationalNumber;
    /**
     * Reward account.
     *
     * @generated from field: bytes reward_account = 6;
     */
    rewardAccount: Uint8Array;
    /**
     * List of pool owner key hashes.
     *
     * @generated from field: repeated bytes pool_owners = 7;
     */
    poolOwners: Uint8Array[];
    /**
     * List of relays.
     *
     * @generated from field: repeated utxorpc.v1alpha.cardano.Relay relays = 8;
     */
    relays: Relay[];
    /**
     * Pool metadata.
     *
     * @generated from field: utxorpc.v1alpha.cardano.PoolMetadata pool_metadata = 9;
     */
    poolMetadata?: PoolMetadata;
    constructor(data?: PartialMessage<PoolRegistrationCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PoolRegistrationCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRegistrationCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRegistrationCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRegistrationCert;
    static equals(a: PoolRegistrationCert | PlainMessage<PoolRegistrationCert> | undefined, b: PoolRegistrationCert | PlainMessage<PoolRegistrationCert> | undefined): boolean;
}
/**
 * Represents a pool retirement certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.PoolRetirementCert
 */
declare class PoolRetirementCert extends Message<PoolRetirementCert> {
    /**
     * Pool key hash.
     *
     * @generated from field: bytes pool_keyhash = 1;
     */
    poolKeyhash: Uint8Array;
    /**
     * Retirement epoch.
     *
     * @generated from field: uint64 epoch = 2;
     */
    epoch: bigint;
    constructor(data?: PartialMessage<PoolRetirementCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PoolRetirementCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolRetirementCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolRetirementCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolRetirementCert;
    static equals(a: PoolRetirementCert | PlainMessage<PoolRetirementCert> | undefined, b: PoolRetirementCert | PlainMessage<PoolRetirementCert> | undefined): boolean;
}
/**
 * Represents a genesis key delegation certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.GenesisKeyDelegationCert
 */
declare class GenesisKeyDelegationCert extends Message<GenesisKeyDelegationCert> {
    /**
     * Genesis hash.
     *
     * @generated from field: bytes genesis_hash = 1;
     */
    genesisHash: Uint8Array;
    /**
     * Genesis delegate hash.
     *
     * @generated from field: bytes genesis_delegate_hash = 2;
     */
    genesisDelegateHash: Uint8Array;
    /**
     * VRF key hash.
     *
     * @generated from field: bytes vrf_keyhash = 3;
     */
    vrfKeyhash: Uint8Array;
    constructor(data?: PartialMessage<GenesisKeyDelegationCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.GenesisKeyDelegationCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisKeyDelegationCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisKeyDelegationCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisKeyDelegationCert;
    static equals(a: GenesisKeyDelegationCert | PlainMessage<GenesisKeyDelegationCert> | undefined, b: GenesisKeyDelegationCert | PlainMessage<GenesisKeyDelegationCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.MirTarget
 */
declare class MirTarget extends Message<MirTarget> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: int64 delta_coin = 2;
     */
    deltaCoin: bigint;
    constructor(data?: PartialMessage<MirTarget>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.MirTarget";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirTarget;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirTarget;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirTarget;
    static equals(a: MirTarget | PlainMessage<MirTarget> | undefined, b: MirTarget | PlainMessage<MirTarget> | undefined): boolean;
}
/**
 * Represents a move instantaneous reward certificate in Cardano.
 *
 * @generated from message utxorpc.v1alpha.cardano.MirCert
 */
declare class MirCert extends Message<MirCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.MirSource from = 1;
     */
    from: MirSource;
    /**
     * @generated from field: repeated utxorpc.v1alpha.cardano.MirTarget to = 2;
     */
    to: MirTarget[];
    /**
     * @generated from field: uint64 other_pot = 3;
     */
    otherPot: bigint;
    constructor(data?: PartialMessage<MirCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.MirCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MirCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MirCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MirCert;
    static equals(a: MirCert | PlainMessage<MirCert> | undefined, b: MirCert | PlainMessage<MirCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.RegCert
 */
declare class RegCert extends Message<RegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: uint64 coin = 2;
     */
    coin: bigint;
    constructor(data?: PartialMessage<RegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.RegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegCert;
    static equals(a: RegCert | PlainMessage<RegCert> | undefined, b: RegCert | PlainMessage<RegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.UnRegCert
 */
declare class UnRegCert extends Message<UnRegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: uint64 coin = 2;
     */
    coin: bigint;
    constructor(data?: PartialMessage<UnRegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.UnRegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnRegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnRegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnRegCert;
    static equals(a: UnRegCert | PlainMessage<UnRegCert> | undefined, b: UnRegCert | PlainMessage<UnRegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.DRep
 */
declare class DRep extends Message<DRep> {
    /**
     * @generated from oneof utxorpc.v1alpha.cardano.DRep.drep
     */
    drep: {
        /**
         * Address key hash
         *
         * @generated from field: bytes addr_key_hash = 1;
         */
        value: Uint8Array;
        case: "addrKeyHash";
    } | {
        /**
         * Script hash
         *
         * @generated from field: bytes script_hash = 2;
         */
        value: Uint8Array;
        case: "scriptHash";
    } | {
        /**
         * Abstain
         *
         * @generated from field: bool abstain = 3;
         */
        value: boolean;
        case: "abstain";
    } | {
        /**
         * No confidence
         *
         * @generated from field: bool no_confidence = 4;
         */
        value: boolean;
        case: "noConfidence";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<DRep>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.DRep";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DRep;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DRep;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DRep;
    static equals(a: DRep | PlainMessage<DRep> | undefined, b: DRep | PlainMessage<DRep> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.VoteDelegCert
 */
declare class VoteDelegCert extends Message<VoteDelegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 2;
     */
    drep?: DRep;
    constructor(data?: PartialMessage<VoteDelegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.VoteDelegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteDelegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteDelegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteDelegCert;
    static equals(a: VoteDelegCert | PlainMessage<VoteDelegCert> | undefined, b: VoteDelegCert | PlainMessage<VoteDelegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.StakeVoteDelegCert
 */
declare class StakeVoteDelegCert extends Message<StakeVoteDelegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: bytes pool_keyhash = 2;
     */
    poolKeyhash: Uint8Array;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 3;
     */
    drep?: DRep;
    constructor(data?: PartialMessage<StakeVoteDelegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.StakeVoteDelegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeVoteDelegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeVoteDelegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeVoteDelegCert;
    static equals(a: StakeVoteDelegCert | PlainMessage<StakeVoteDelegCert> | undefined, b: StakeVoteDelegCert | PlainMessage<StakeVoteDelegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.StakeRegDelegCert
 */
declare class StakeRegDelegCert extends Message<StakeRegDelegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: bytes pool_keyhash = 2;
     */
    poolKeyhash: Uint8Array;
    /**
     * @generated from field: uint64 coin = 3;
     */
    coin: bigint;
    constructor(data?: PartialMessage<StakeRegDelegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.StakeRegDelegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeRegDelegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeRegDelegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeRegDelegCert;
    static equals(a: StakeRegDelegCert | PlainMessage<StakeRegDelegCert> | undefined, b: StakeRegDelegCert | PlainMessage<StakeRegDelegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.VoteRegDelegCert
 */
declare class VoteRegDelegCert extends Message<VoteRegDelegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 2;
     */
    drep?: DRep;
    /**
     * @generated from field: uint64 coin = 3;
     */
    coin: bigint;
    constructor(data?: PartialMessage<VoteRegDelegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.VoteRegDelegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteRegDelegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteRegDelegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteRegDelegCert;
    static equals(a: VoteRegDelegCert | PlainMessage<VoteRegDelegCert> | undefined, b: VoteRegDelegCert | PlainMessage<VoteRegDelegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.StakeVoteRegDelegCert
 */
declare class StakeVoteRegDelegCert extends Message<StakeVoteRegDelegCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential stake_credential = 1;
     */
    stakeCredential?: StakeCredential;
    /**
     * @generated from field: bytes pool_keyhash = 2;
     */
    poolKeyhash: Uint8Array;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.DRep drep = 3;
     */
    drep?: DRep;
    /**
     * @generated from field: uint64 coin = 4;
     */
    coin: bigint;
    constructor(data?: PartialMessage<StakeVoteRegDelegCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.StakeVoteRegDelegCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StakeVoteRegDelegCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StakeVoteRegDelegCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StakeVoteRegDelegCert;
    static equals(a: StakeVoteRegDelegCert | PlainMessage<StakeVoteRegDelegCert> | undefined, b: StakeVoteRegDelegCert | PlainMessage<StakeVoteRegDelegCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.AuthCommitteeHotCert
 */
declare class AuthCommitteeHotCert extends Message<AuthCommitteeHotCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_cold_credential = 1;
     */
    committeeColdCredential?: StakeCredential;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_hot_credential = 2;
     */
    committeeHotCredential?: StakeCredential;
    constructor(data?: PartialMessage<AuthCommitteeHotCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.AuthCommitteeHotCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthCommitteeHotCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthCommitteeHotCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthCommitteeHotCert;
    static equals(a: AuthCommitteeHotCert | PlainMessage<AuthCommitteeHotCert> | undefined, b: AuthCommitteeHotCert | PlainMessage<AuthCommitteeHotCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.Anchor
 */
declare class Anchor extends Message<Anchor> {
    /**
     * @generated from field: string url = 1;
     */
    url: string;
    /**
     * @generated from field: bytes content_hash = 2;
     */
    contentHash: Uint8Array;
    constructor(data?: PartialMessage<Anchor>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.Anchor";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Anchor;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Anchor;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Anchor;
    static equals(a: Anchor | PlainMessage<Anchor> | undefined, b: Anchor | PlainMessage<Anchor> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.ResignCommitteeColdCert
 */
declare class ResignCommitteeColdCert extends Message<ResignCommitteeColdCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential committee_cold_credential = 1;
     */
    committeeColdCredential?: StakeCredential;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 2;
     */
    anchor?: Anchor;
    constructor(data?: PartialMessage<ResignCommitteeColdCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.ResignCommitteeColdCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResignCommitteeColdCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResignCommitteeColdCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResignCommitteeColdCert;
    static equals(a: ResignCommitteeColdCert | PlainMessage<ResignCommitteeColdCert> | undefined, b: ResignCommitteeColdCert | PlainMessage<ResignCommitteeColdCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.RegDRepCert
 */
declare class RegDRepCert extends Message<RegDRepCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential drep_credential = 1;
     */
    drepCredential?: StakeCredential;
    /**
     * @generated from field: uint64 coin = 2;
     */
    coin: bigint;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 3;
     */
    anchor?: Anchor;
    constructor(data?: PartialMessage<RegDRepCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.RegDRepCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegDRepCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegDRepCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegDRepCert;
    static equals(a: RegDRepCert | PlainMessage<RegDRepCert> | undefined, b: RegDRepCert | PlainMessage<RegDRepCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.UnRegDRepCert
 */
declare class UnRegDRepCert extends Message<UnRegDRepCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential drep_credential = 1;
     */
    drepCredential?: StakeCredential;
    /**
     * @generated from field: uint64 coin = 2;
     */
    coin: bigint;
    constructor(data?: PartialMessage<UnRegDRepCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.UnRegDRepCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnRegDRepCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnRegDRepCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnRegDRepCert;
    static equals(a: UnRegDRepCert | PlainMessage<UnRegDRepCert> | undefined, b: UnRegDRepCert | PlainMessage<UnRegDRepCert> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.UpdateDRepCert
 */
declare class UpdateDRepCert extends Message<UpdateDRepCert> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.StakeCredential drep_credential = 1;
     */
    drepCredential?: StakeCredential;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.Anchor anchor = 2;
     */
    anchor?: Anchor;
    constructor(data?: PartialMessage<UpdateDRepCert>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.UpdateDRepCert";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateDRepCert;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateDRepCert;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateDRepCert;
    static equals(a: UpdateDRepCert | PlainMessage<UpdateDRepCert> | undefined, b: UpdateDRepCert | PlainMessage<UpdateDRepCert> | undefined): boolean;
}
/**
 * Pattern of an address that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.AddressPattern
 */
declare class AddressPattern extends Message<AddressPattern> {
    /**
     * The address should match this exact address value.
     *
     * @generated from field: bytes exact_address = 1;
     */
    exactAddress: Uint8Array;
    /**
     * The payment part of the address should match this value.
     *
     * @generated from field: bytes payment_part = 2;
     */
    paymentPart: Uint8Array;
    /**
     * The delegation part of the address should match this value.
     *
     * @generated from field: bytes delegation_part = 3;
     */
    delegationPart: Uint8Array;
    constructor(data?: PartialMessage<AddressPattern>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.AddressPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressPattern;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressPattern;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressPattern;
    static equals(a: AddressPattern | PlainMessage<AddressPattern> | undefined, b: AddressPattern | PlainMessage<AddressPattern> | undefined): boolean;
}
/**
 * Pattern of a native asset that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.AssetPattern
 */
declare class AssetPattern extends Message<AssetPattern> {
    /**
     * The asset should belong to this policy id
     *
     * @generated from field: bytes policy_id = 1;
     */
    policyId: Uint8Array;
    /**
     * The asset should present this name
     *
     * @generated from field: bytes asset_name = 2;
     */
    assetName: Uint8Array;
    constructor(data?: PartialMessage<AssetPattern>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.AssetPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetPattern;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetPattern;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetPattern;
    static equals(a: AssetPattern | PlainMessage<AssetPattern> | undefined, b: AssetPattern | PlainMessage<AssetPattern> | undefined): boolean;
}
/**
 * Pattern of a tx output that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxOutputPattern
 */
declare class TxOutputPattern extends Message<TxOutputPattern> {
    /**
     * Match any address in the output that exhibits this pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.AddressPattern address = 1;
     */
    address?: AddressPattern;
    /**
     * Match any asset in the output that exhibits this pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.AssetPattern asset = 2;
     */
    asset?: AssetPattern;
    constructor(data?: PartialMessage<TxOutputPattern>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.TxOutputPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxOutputPattern;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxOutputPattern;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxOutputPattern;
    static equals(a: TxOutputPattern | PlainMessage<TxOutputPattern> | undefined, b: TxOutputPattern | PlainMessage<TxOutputPattern> | undefined): boolean;
}
/**
 * Pattern of a Tx that can be used to evaluate matching predicates.
 *
 * @generated from message utxorpc.v1alpha.cardano.TxPattern
 */
declare class TxPattern extends Message<TxPattern> {
    /**
     * Match any input that exhibits this pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.TxOutputPattern consumes = 1;
     */
    consumes?: TxOutputPattern;
    /**
     * Match any output that exhibits this pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.TxOutputPattern produces = 2;
     */
    produces?: TxOutputPattern;
    /**
     * Match any address (inputs, outputs, collateral, etc) that exhibits this pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.AddressPattern has_address = 3;
     */
    hasAddress?: AddressPattern;
    /**
     * Match any asset that exhibits this pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.AssetPattern moves_asset = 4;
     */
    movesAsset?: AssetPattern;
    /**
     * Match any tx that either mint or burn the the asset pattern.
     *
     * @generated from field: utxorpc.v1alpha.cardano.AssetPattern mints_asset = 5;
     */
    mintsAsset?: AssetPattern;
    constructor(data?: PartialMessage<TxPattern>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.TxPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxPattern;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxPattern;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxPattern;
    static equals(a: TxPattern | PlainMessage<TxPattern> | undefined, b: TxPattern | PlainMessage<TxPattern> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.ExUnits
 */
declare class ExUnits extends Message<ExUnits> {
    /**
     * @generated from field: uint64 steps = 1;
     */
    steps: bigint;
    /**
     * @generated from field: uint64 memory = 2;
     */
    memory: bigint;
    constructor(data?: PartialMessage<ExUnits>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.ExUnits";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExUnits;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExUnits;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExUnits;
    static equals(a: ExUnits | PlainMessage<ExUnits> | undefined, b: ExUnits | PlainMessage<ExUnits> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.ExPrices
 */
declare class ExPrices extends Message<ExPrices> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.RationalNumber steps = 1;
     */
    steps?: RationalNumber;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.RationalNumber memory = 2;
     */
    memory?: RationalNumber;
    constructor(data?: PartialMessage<ExPrices>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.ExPrices";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExPrices;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExPrices;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExPrices;
    static equals(a: ExPrices | PlainMessage<ExPrices> | undefined, b: ExPrices | PlainMessage<ExPrices> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.ProtocolVersion
 */
declare class ProtocolVersion extends Message<ProtocolVersion> {
    /**
     * @generated from field: uint32 major = 1;
     */
    major: number;
    /**
     * @generated from field: uint32 minor = 2;
     */
    minor: number;
    constructor(data?: PartialMessage<ProtocolVersion>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.ProtocolVersion";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtocolVersion;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtocolVersion;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtocolVersion;
    static equals(a: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined, b: ProtocolVersion | PlainMessage<ProtocolVersion> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.CostModel
 */
declare class CostModel extends Message<CostModel> {
    /**
     * @generated from field: repeated int64 values = 1;
     */
    values: bigint[];
    constructor(data?: PartialMessage<CostModel>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.CostModel";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CostModel;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CostModel;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CostModel;
    static equals(a: CostModel | PlainMessage<CostModel> | undefined, b: CostModel | PlainMessage<CostModel> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.CostModels
 */
declare class CostModels extends Message<CostModels> {
    /**
     * @generated from field: utxorpc.v1alpha.cardano.CostModel plutus_v1 = 1;
     */
    plutusV1?: CostModel;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.CostModel plutus_v2 = 2;
     */
    plutusV2?: CostModel;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.CostModel plutus_v3 = 3;
     */
    plutusV3?: CostModel;
    constructor(data?: PartialMessage<CostModels>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.CostModels";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CostModels;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CostModels;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CostModels;
    static equals(a: CostModels | PlainMessage<CostModels> | undefined, b: CostModels | PlainMessage<CostModels> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.PParams
 */
declare class PParams extends Message<PParams> {
    /**
     * The number of coins per UTXO byte.
     *
     * @generated from field: uint64 coins_per_utxo_byte = 1;
     */
    coinsPerUtxoByte: bigint;
    /**
     * The maximum transaction size.
     *
     * @generated from field: uint64 max_tx_size = 2;
     */
    maxTxSize: bigint;
    /**
     * The minimum fee coefficient.
     *
     * @generated from field: uint64 min_fee_coefficient = 3;
     */
    minFeeCoefficient: bigint;
    /**
     * The minimum fee constant.
     *
     * @generated from field: uint64 min_fee_constant = 4;
     */
    minFeeConstant: bigint;
    /**
     * The maximum block body size.
     *
     * @generated from field: uint64 max_block_body_size = 5;
     */
    maxBlockBodySize: bigint;
    /**
     * The maximum block header size.
     *
     * @generated from field: uint64 max_block_header_size = 6;
     */
    maxBlockHeaderSize: bigint;
    /**
     * The stake key deposit.
     *
     * @generated from field: uint64 stake_key_deposit = 7;
     */
    stakeKeyDeposit: bigint;
    /**
     * The pool deposit.
     *
     * @generated from field: uint64 pool_deposit = 8;
     */
    poolDeposit: bigint;
    /**
     * The pool retirement epoch bound.
     *
     * @generated from field: uint64 pool_retirement_epoch_bound = 9;
     */
    poolRetirementEpochBound: bigint;
    /**
     * The desired number of pools.
     *
     * @generated from field: uint64 desired_number_of_pools = 10;
     */
    desiredNumberOfPools: bigint;
    /**
     * The pool influence.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RationalNumber pool_influence = 11;
     */
    poolInfluence?: RationalNumber;
    /**
     * The monetary expansion.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RationalNumber monetary_expansion = 12;
     */
    monetaryExpansion?: RationalNumber;
    /**
     * The treasury expansion.
     *
     * @generated from field: utxorpc.v1alpha.cardano.RationalNumber treasury_expansion = 13;
     */
    treasuryExpansion?: RationalNumber;
    /**
     * The minimum pool cost.
     *
     * @generated from field: uint64 min_pool_cost = 14;
     */
    minPoolCost: bigint;
    /**
     * The protocol version.
     *
     * @generated from field: utxorpc.v1alpha.cardano.ProtocolVersion protocol_version = 15;
     */
    protocolVersion?: ProtocolVersion;
    /**
     * The maximum value size.
     *
     * @generated from field: uint64 max_value_size = 16;
     */
    maxValueSize: bigint;
    /**
     * The collateral percentage.
     *
     * @generated from field: uint64 collateral_percentage = 17;
     */
    collateralPercentage: bigint;
    /**
     * The maximum collateral inputs.
     *
     * @generated from field: uint64 max_collateral_inputs = 18;
     */
    maxCollateralInputs: bigint;
    /**
     * The cost models.
     *
     * @generated from field: utxorpc.v1alpha.cardano.CostModels cost_models = 19;
     */
    costModels?: CostModels;
    /**
     * The prices.
     *
     * @generated from field: utxorpc.v1alpha.cardano.ExPrices prices = 20;
     */
    prices?: ExPrices;
    /**
     * The maximum execution units per transaction.
     *
     * @generated from field: utxorpc.v1alpha.cardano.ExUnits max_execution_units_per_transaction = 21;
     */
    maxExecutionUnitsPerTransaction?: ExUnits;
    /**
     * The maximum execution units per block.
     *
     * @generated from field: utxorpc.v1alpha.cardano.ExUnits max_execution_units_per_block = 22;
     */
    maxExecutionUnitsPerBlock?: ExUnits;
    constructor(data?: PartialMessage<PParams>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.PParams";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PParams;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PParams;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PParams;
    static equals(a: PParams | PlainMessage<PParams> | undefined, b: PParams | PlainMessage<PParams> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.EvalError
 */
declare class EvalError extends Message<EvalError> {
    /**
     * @generated from field: string msg = 1;
     */
    msg: string;
    constructor(data?: PartialMessage<EvalError>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.EvalError";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalError;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalError;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalError;
    static equals(a: EvalError | PlainMessage<EvalError> | undefined, b: EvalError | PlainMessage<EvalError> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.EvalTrace
 */
declare class EvalTrace extends Message<EvalTrace> {
    /**
     * @generated from field: string msg = 1;
     */
    msg: string;
    constructor(data?: PartialMessage<EvalTrace>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.EvalTrace";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalTrace;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalTrace;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalTrace;
    static equals(a: EvalTrace | PlainMessage<EvalTrace> | undefined, b: EvalTrace | PlainMessage<EvalTrace> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.cardano.TxEval
 */
declare class TxEval extends Message<TxEval> {
    /**
     * @generated from field: uint64 fee = 1;
     */
    fee: bigint;
    /**
     * @generated from field: utxorpc.v1alpha.cardano.ExUnits ex_units = 2;
     */
    exUnits?: ExUnits;
    /**
     * @generated from field: repeated utxorpc.v1alpha.cardano.EvalError errors = 3;
     */
    errors: EvalError[];
    /**
     * @generated from field: repeated utxorpc.v1alpha.cardano.EvalTrace traces = 4;
     */
    traces: EvalTrace[];
    constructor(data?: PartialMessage<TxEval>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.cardano.TxEval";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxEval;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxEval;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxEval;
    static equals(a: TxEval | PlainMessage<TxEval> | undefined, b: TxEval | PlainMessage<TxEval> | undefined): boolean;
}

type cardano_pb_AddressPattern = AddressPattern;
declare const cardano_pb_AddressPattern: typeof AddressPattern;
type cardano_pb_Anchor = Anchor;
declare const cardano_pb_Anchor: typeof Anchor;
type cardano_pb_Asset = Asset;
declare const cardano_pb_Asset: typeof Asset;
type cardano_pb_AssetPattern = AssetPattern;
declare const cardano_pb_AssetPattern: typeof AssetPattern;
type cardano_pb_AuthCommitteeHotCert = AuthCommitteeHotCert;
declare const cardano_pb_AuthCommitteeHotCert: typeof AuthCommitteeHotCert;
type cardano_pb_AuxData = AuxData;
declare const cardano_pb_AuxData: typeof AuxData;
type cardano_pb_BigInt = BigInt;
declare const cardano_pb_BigInt: typeof BigInt;
type cardano_pb_Block = Block;
declare const cardano_pb_Block: typeof Block;
type cardano_pb_BlockBody = BlockBody;
declare const cardano_pb_BlockBody: typeof BlockBody;
type cardano_pb_BlockHeader = BlockHeader;
declare const cardano_pb_BlockHeader: typeof BlockHeader;
type cardano_pb_Certificate = Certificate;
declare const cardano_pb_Certificate: typeof Certificate;
type cardano_pb_Collateral = Collateral;
declare const cardano_pb_Collateral: typeof Collateral;
type cardano_pb_Constr = Constr;
declare const cardano_pb_Constr: typeof Constr;
type cardano_pb_CostModel = CostModel;
declare const cardano_pb_CostModel: typeof CostModel;
type cardano_pb_CostModels = CostModels;
declare const cardano_pb_CostModels: typeof CostModels;
type cardano_pb_DRep = DRep;
declare const cardano_pb_DRep: typeof DRep;
type cardano_pb_Datum = Datum;
declare const cardano_pb_Datum: typeof Datum;
type cardano_pb_EvalError = EvalError;
declare const cardano_pb_EvalError: typeof EvalError;
type cardano_pb_EvalTrace = EvalTrace;
declare const cardano_pb_EvalTrace: typeof EvalTrace;
type cardano_pb_ExPrices = ExPrices;
declare const cardano_pb_ExPrices: typeof ExPrices;
type cardano_pb_ExUnits = ExUnits;
declare const cardano_pb_ExUnits: typeof ExUnits;
type cardano_pb_GenesisKeyDelegationCert = GenesisKeyDelegationCert;
declare const cardano_pb_GenesisKeyDelegationCert: typeof GenesisKeyDelegationCert;
type cardano_pb_Metadata = Metadata;
declare const cardano_pb_Metadata: typeof Metadata;
type cardano_pb_Metadatum = Metadatum;
declare const cardano_pb_Metadatum: typeof Metadatum;
type cardano_pb_MetadatumArray = MetadatumArray;
declare const cardano_pb_MetadatumArray: typeof MetadatumArray;
type cardano_pb_MetadatumMap = MetadatumMap;
declare const cardano_pb_MetadatumMap: typeof MetadatumMap;
type cardano_pb_MetadatumPair = MetadatumPair;
declare const cardano_pb_MetadatumPair: typeof MetadatumPair;
type cardano_pb_MirCert = MirCert;
declare const cardano_pb_MirCert: typeof MirCert;
type cardano_pb_MirSource = MirSource;
declare const cardano_pb_MirSource: typeof MirSource;
type cardano_pb_MirTarget = MirTarget;
declare const cardano_pb_MirTarget: typeof MirTarget;
type cardano_pb_Multiasset = Multiasset;
declare const cardano_pb_Multiasset: typeof Multiasset;
type cardano_pb_NativeScript = NativeScript;
declare const cardano_pb_NativeScript: typeof NativeScript;
type cardano_pb_NativeScriptList = NativeScriptList;
declare const cardano_pb_NativeScriptList: typeof NativeScriptList;
type cardano_pb_PParams = PParams;
declare const cardano_pb_PParams: typeof PParams;
type cardano_pb_PlutusData = PlutusData;
declare const cardano_pb_PlutusData: typeof PlutusData;
type cardano_pb_PlutusDataArray = PlutusDataArray;
declare const cardano_pb_PlutusDataArray: typeof PlutusDataArray;
type cardano_pb_PlutusDataMap = PlutusDataMap;
declare const cardano_pb_PlutusDataMap: typeof PlutusDataMap;
type cardano_pb_PlutusDataPair = PlutusDataPair;
declare const cardano_pb_PlutusDataPair: typeof PlutusDataPair;
type cardano_pb_PoolMetadata = PoolMetadata;
declare const cardano_pb_PoolMetadata: typeof PoolMetadata;
type cardano_pb_PoolRegistrationCert = PoolRegistrationCert;
declare const cardano_pb_PoolRegistrationCert: typeof PoolRegistrationCert;
type cardano_pb_PoolRetirementCert = PoolRetirementCert;
declare const cardano_pb_PoolRetirementCert: typeof PoolRetirementCert;
type cardano_pb_ProtocolVersion = ProtocolVersion;
declare const cardano_pb_ProtocolVersion: typeof ProtocolVersion;
type cardano_pb_RationalNumber = RationalNumber;
declare const cardano_pb_RationalNumber: typeof RationalNumber;
type cardano_pb_Redeemer = Redeemer;
declare const cardano_pb_Redeemer: typeof Redeemer;
type cardano_pb_RedeemerPurpose = RedeemerPurpose;
declare const cardano_pb_RedeemerPurpose: typeof RedeemerPurpose;
type cardano_pb_RegCert = RegCert;
declare const cardano_pb_RegCert: typeof RegCert;
type cardano_pb_RegDRepCert = RegDRepCert;
declare const cardano_pb_RegDRepCert: typeof RegDRepCert;
type cardano_pb_Relay = Relay;
declare const cardano_pb_Relay: typeof Relay;
type cardano_pb_ResignCommitteeColdCert = ResignCommitteeColdCert;
declare const cardano_pb_ResignCommitteeColdCert: typeof ResignCommitteeColdCert;
type cardano_pb_Script = Script;
declare const cardano_pb_Script: typeof Script;
type cardano_pb_ScriptNOfK = ScriptNOfK;
declare const cardano_pb_ScriptNOfK: typeof ScriptNOfK;
type cardano_pb_StakeCredential = StakeCredential;
declare const cardano_pb_StakeCredential: typeof StakeCredential;
type cardano_pb_StakeDelegationCert = StakeDelegationCert;
declare const cardano_pb_StakeDelegationCert: typeof StakeDelegationCert;
type cardano_pb_StakeRegDelegCert = StakeRegDelegCert;
declare const cardano_pb_StakeRegDelegCert: typeof StakeRegDelegCert;
type cardano_pb_StakeVoteDelegCert = StakeVoteDelegCert;
declare const cardano_pb_StakeVoteDelegCert: typeof StakeVoteDelegCert;
type cardano_pb_StakeVoteRegDelegCert = StakeVoteRegDelegCert;
declare const cardano_pb_StakeVoteRegDelegCert: typeof StakeVoteRegDelegCert;
type cardano_pb_Tx = Tx;
declare const cardano_pb_Tx: typeof Tx;
type cardano_pb_TxEval = TxEval;
declare const cardano_pb_TxEval: typeof TxEval;
type cardano_pb_TxInput = TxInput;
declare const cardano_pb_TxInput: typeof TxInput;
type cardano_pb_TxOutput = TxOutput;
declare const cardano_pb_TxOutput: typeof TxOutput;
type cardano_pb_TxOutputPattern = TxOutputPattern;
declare const cardano_pb_TxOutputPattern: typeof TxOutputPattern;
type cardano_pb_TxPattern = TxPattern;
declare const cardano_pb_TxPattern: typeof TxPattern;
type cardano_pb_TxValidity = TxValidity;
declare const cardano_pb_TxValidity: typeof TxValidity;
type cardano_pb_UnRegCert = UnRegCert;
declare const cardano_pb_UnRegCert: typeof UnRegCert;
type cardano_pb_UnRegDRepCert = UnRegDRepCert;
declare const cardano_pb_UnRegDRepCert: typeof UnRegDRepCert;
type cardano_pb_UpdateDRepCert = UpdateDRepCert;
declare const cardano_pb_UpdateDRepCert: typeof UpdateDRepCert;
type cardano_pb_VKeyWitness = VKeyWitness;
declare const cardano_pb_VKeyWitness: typeof VKeyWitness;
type cardano_pb_VoteDelegCert = VoteDelegCert;
declare const cardano_pb_VoteDelegCert: typeof VoteDelegCert;
type cardano_pb_VoteRegDelegCert = VoteRegDelegCert;
declare const cardano_pb_VoteRegDelegCert: typeof VoteRegDelegCert;
type cardano_pb_Withdrawal = Withdrawal;
declare const cardano_pb_Withdrawal: typeof Withdrawal;
type cardano_pb_WitnessSet = WitnessSet;
declare const cardano_pb_WitnessSet: typeof WitnessSet;
declare namespace cardano_pb {
  export { cardano_pb_AddressPattern as AddressPattern, cardano_pb_Anchor as Anchor, cardano_pb_Asset as Asset, cardano_pb_AssetPattern as AssetPattern, cardano_pb_AuthCommitteeHotCert as AuthCommitteeHotCert, cardano_pb_AuxData as AuxData, cardano_pb_BigInt as BigInt, cardano_pb_Block as Block, cardano_pb_BlockBody as BlockBody, cardano_pb_BlockHeader as BlockHeader, cardano_pb_Certificate as Certificate, cardano_pb_Collateral as Collateral, cardano_pb_Constr as Constr, cardano_pb_CostModel as CostModel, cardano_pb_CostModels as CostModels, cardano_pb_DRep as DRep, cardano_pb_Datum as Datum, cardano_pb_EvalError as EvalError, cardano_pb_EvalTrace as EvalTrace, cardano_pb_ExPrices as ExPrices, cardano_pb_ExUnits as ExUnits, cardano_pb_GenesisKeyDelegationCert as GenesisKeyDelegationCert, cardano_pb_Metadata as Metadata, cardano_pb_Metadatum as Metadatum, cardano_pb_MetadatumArray as MetadatumArray, cardano_pb_MetadatumMap as MetadatumMap, cardano_pb_MetadatumPair as MetadatumPair, cardano_pb_MirCert as MirCert, cardano_pb_MirSource as MirSource, cardano_pb_MirTarget as MirTarget, cardano_pb_Multiasset as Multiasset, cardano_pb_NativeScript as NativeScript, cardano_pb_NativeScriptList as NativeScriptList, cardano_pb_PParams as PParams, cardano_pb_PlutusData as PlutusData, cardano_pb_PlutusDataArray as PlutusDataArray, cardano_pb_PlutusDataMap as PlutusDataMap, cardano_pb_PlutusDataPair as PlutusDataPair, cardano_pb_PoolMetadata as PoolMetadata, cardano_pb_PoolRegistrationCert as PoolRegistrationCert, cardano_pb_PoolRetirementCert as PoolRetirementCert, cardano_pb_ProtocolVersion as ProtocolVersion, cardano_pb_RationalNumber as RationalNumber, cardano_pb_Redeemer as Redeemer, cardano_pb_RedeemerPurpose as RedeemerPurpose, cardano_pb_RegCert as RegCert, cardano_pb_RegDRepCert as RegDRepCert, cardano_pb_Relay as Relay, cardano_pb_ResignCommitteeColdCert as ResignCommitteeColdCert, cardano_pb_Script as Script, cardano_pb_ScriptNOfK as ScriptNOfK, cardano_pb_StakeCredential as StakeCredential, cardano_pb_StakeDelegationCert as StakeDelegationCert, cardano_pb_StakeRegDelegCert as StakeRegDelegCert, cardano_pb_StakeVoteDelegCert as StakeVoteDelegCert, cardano_pb_StakeVoteRegDelegCert as StakeVoteRegDelegCert, cardano_pb_Tx as Tx, cardano_pb_TxEval as TxEval, cardano_pb_TxInput as TxInput, cardano_pb_TxOutput as TxOutput, cardano_pb_TxOutputPattern as TxOutputPattern, cardano_pb_TxPattern as TxPattern, cardano_pb_TxValidity as TxValidity, cardano_pb_UnRegCert as UnRegCert, cardano_pb_UnRegDRepCert as UnRegDRepCert, cardano_pb_UpdateDRepCert as UpdateDRepCert, cardano_pb_VKeyWitness as VKeyWitness, cardano_pb_VoteDelegCert as VoteDelegCert, cardano_pb_VoteRegDelegCert as VoteRegDelegCert, cardano_pb_Withdrawal as Withdrawal, cardano_pb_WitnessSet as WitnessSet };
}

/**
 * Represents a specific point in the blockchain.
 *
 * @generated from message utxorpc.v1alpha.query.ChainPoint
 */
declare class ChainPoint extends Message<ChainPoint> {
    /**
     * Slot number.
     *
     * @generated from field: uint64 slot = 1;
     */
    slot: bigint;
    /**
     * Block hash.
     *
     * @generated from field: bytes hash = 2;
     */
    hash: Uint8Array;
    constructor(data?: PartialMessage<ChainPoint>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ChainPoint";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainPoint;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainPoint;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainPoint;
    static equals(a: ChainPoint | PlainMessage<ChainPoint> | undefined, b: ChainPoint | PlainMessage<ChainPoint> | undefined): boolean;
}
/**
 * Represents a reference to a transaction output
 *
 * @generated from message utxorpc.v1alpha.query.TxoRef
 */
declare class TxoRef extends Message<TxoRef> {
    /**
     * Tx hash.
     *
     * @generated from field: bytes hash = 1;
     */
    hash: Uint8Array;
    /**
     * Output index.
     *
     * @generated from field: uint32 index = 2;
     */
    index: number;
    constructor(data?: PartialMessage<TxoRef>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.TxoRef";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxoRef;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxoRef;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxoRef;
    static equals(a: TxoRef | PlainMessage<TxoRef> | undefined, b: TxoRef | PlainMessage<TxoRef> | undefined): boolean;
}
/**
 * Request to get the chain parameters
 *
 * @generated from message utxorpc.v1alpha.query.ReadParamsRequest
 */
declare class ReadParamsRequest extends Message<ReadParamsRequest> {
    /**
     * Field mask to selectively return fields in the parsed response.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 1;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<ReadParamsRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ReadParamsRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadParamsRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadParamsRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadParamsRequest;
    static equals(a: ReadParamsRequest | PlainMessage<ReadParamsRequest> | undefined, b: ReadParamsRequest | PlainMessage<ReadParamsRequest> | undefined): boolean;
}
/**
 * An evenlope that holds parameter data from any of the compatible chains
 *
 * @generated from message utxorpc.v1alpha.query.AnyChainParams
 */
declare class AnyChainParams extends Message<AnyChainParams> {
    /**
     * @generated from oneof utxorpc.v1alpha.query.AnyChainParams.params
     */
    params: {
        /**
         * Cardano parameters
         *
         * @generated from field: utxorpc.v1alpha.cardano.PParams cardano = 1;
         */
        value: PParams;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainParams>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.AnyChainParams";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainParams;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainParams;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainParams;
    static equals(a: AnyChainParams | PlainMessage<AnyChainParams> | undefined, b: AnyChainParams | PlainMessage<AnyChainParams> | undefined): boolean;
}
/**
 * Response containing the chain parameters
 *
 * @generated from message utxorpc.v1alpha.query.ReadParamsResponse
 */
declare class ReadParamsResponse extends Message<ReadParamsResponse> {
    /**
     * The value of the parameters.
     *
     * @generated from field: utxorpc.v1alpha.query.AnyChainParams values = 1;
     */
    values?: AnyChainParams;
    /**
     * The chain point that represent the ledger current position.
     *
     * @generated from field: utxorpc.v1alpha.query.ChainPoint ledger_tip = 2;
     */
    ledgerTip?: ChainPoint;
    constructor(data?: PartialMessage<ReadParamsResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ReadParamsResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadParamsResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadParamsResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadParamsResponse;
    static equals(a: ReadParamsResponse | PlainMessage<ReadParamsResponse> | undefined, b: ReadParamsResponse | PlainMessage<ReadParamsResponse> | undefined): boolean;
}
/**
 * An evenlope that holds an UTxO patterns from any of compatible chains
 *
 * @generated from message utxorpc.v1alpha.query.AnyUtxoPattern
 */
declare class AnyUtxoPattern extends Message<AnyUtxoPattern> {
    /**
     * @generated from oneof utxorpc.v1alpha.query.AnyUtxoPattern.utxo_pattern
     */
    utxoPattern: {
        /**
         * @generated from field: utxorpc.v1alpha.cardano.TxOutputPattern cardano = 1;
         */
        value: TxOutputPattern;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyUtxoPattern>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.AnyUtxoPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyUtxoPattern;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyUtxoPattern;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyUtxoPattern;
    static equals(a: AnyUtxoPattern | PlainMessage<AnyUtxoPattern> | undefined, b: AnyUtxoPattern | PlainMessage<AnyUtxoPattern> | undefined): boolean;
}
/**
 * Represents a simple utxo predicate that can composed to create more complex ones
 *
 * @generated from message utxorpc.v1alpha.query.UtxoPredicate
 */
declare class UtxoPredicate extends Message<UtxoPredicate> {
    /**
     * Predicate is true if tx exhibits pattern.
     *
     * @generated from field: utxorpc.v1alpha.query.AnyUtxoPattern match = 1;
     */
    match?: AnyUtxoPattern;
    /**
     * Predicate is true if tx doesn't exhibit pattern.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.UtxoPredicate not = 2;
     */
    not: UtxoPredicate[];
    /**
     * Predicate is true if utxo exhibits all of the patterns.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.UtxoPredicate all_of = 3;
     */
    allOf: UtxoPredicate[];
    /**
     * Predicate is true if utxo exhibits any of the patterns.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.UtxoPredicate any_of = 4;
     */
    anyOf: UtxoPredicate[];
    constructor(data?: PartialMessage<UtxoPredicate>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.UtxoPredicate";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UtxoPredicate;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UtxoPredicate;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UtxoPredicate;
    static equals(a: UtxoPredicate | PlainMessage<UtxoPredicate> | undefined, b: UtxoPredicate | PlainMessage<UtxoPredicate> | undefined): boolean;
}
/**
 * An evenlope that holds an UTxO from any of compatible chains
 *
 * @generated from message utxorpc.v1alpha.query.AnyUtxoData
 */
declare class AnyUtxoData extends Message<AnyUtxoData> {
    /**
     * Original bytes as defined by the chain
     *
     * @generated from field: bytes native_bytes = 1;
     */
    nativeBytes: Uint8Array;
    /**
     * Hash of the previous transaction.
     *
     * @generated from field: utxorpc.v1alpha.query.TxoRef txo_ref = 2;
     */
    txoRef?: TxoRef;
    /**
     * @generated from oneof utxorpc.v1alpha.query.AnyUtxoData.parsed_state
     */
    parsedState: {
        /**
         * A cardano UTxO
         *
         * @generated from field: utxorpc.v1alpha.cardano.TxOutput cardano = 3;
         */
        value: TxOutput;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyUtxoData>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.AnyUtxoData";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyUtxoData;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyUtxoData;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyUtxoData;
    static equals(a: AnyUtxoData | PlainMessage<AnyUtxoData> | undefined, b: AnyUtxoData | PlainMessage<AnyUtxoData> | undefined): boolean;
}
/**
 * Request to get specific UTxOs
 *
 * @generated from message utxorpc.v1alpha.query.ReadUtxosRequest
 */
declare class ReadUtxosRequest extends Message<ReadUtxosRequest> {
    /**
     * List of keys UTxOs.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.TxoRef keys = 1;
     */
    keys: TxoRef[];
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<ReadUtxosRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ReadUtxosRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadUtxosRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadUtxosRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadUtxosRequest;
    static equals(a: ReadUtxosRequest | PlainMessage<ReadUtxosRequest> | undefined, b: ReadUtxosRequest | PlainMessage<ReadUtxosRequest> | undefined): boolean;
}
/**
 * Response containing the UTxOs associated with the requested addresses.
 *
 * @generated from message utxorpc.v1alpha.query.ReadUtxosResponse
 */
declare class ReadUtxosResponse extends Message<ReadUtxosResponse> {
    /**
     * List of UTxOs.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.AnyUtxoData items = 1;
     */
    items: AnyUtxoData[];
    /**
     * The chain point that represent the ledger current position.
     *
     * @generated from field: utxorpc.v1alpha.query.ChainPoint ledger_tip = 2;
     */
    ledgerTip?: ChainPoint;
    constructor(data?: PartialMessage<ReadUtxosResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ReadUtxosResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadUtxosResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadUtxosResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadUtxosResponse;
    static equals(a: ReadUtxosResponse | PlainMessage<ReadUtxosResponse> | undefined, b: ReadUtxosResponse | PlainMessage<ReadUtxosResponse> | undefined): boolean;
}
/**
 * Request to search for UTxO based on a pattern.
 *
 * @generated from message utxorpc.v1alpha.query.SearchUtxosRequest
 */
declare class SearchUtxosRequest extends Message<SearchUtxosRequest> {
    /**
     * Pattern to match UTxOs by.
     *
     * @generated from field: utxorpc.v1alpha.query.UtxoPredicate predicate = 1;
     */
    predicate?: UtxoPredicate;
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    /**
     * The maximum number of items to return.
     *
     * @generated from field: int32 max_items = 3;
     */
    maxItems: number;
    /**
     * The next_page_token value returned from a previous request, if any.
     *
     * @generated from field: string start_token = 4;
     */
    startToken: string;
    constructor(data?: PartialMessage<SearchUtxosRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.SearchUtxosRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUtxosRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUtxosRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUtxosRequest;
    static equals(a: SearchUtxosRequest | PlainMessage<SearchUtxosRequest> | undefined, b: SearchUtxosRequest | PlainMessage<SearchUtxosRequest> | undefined): boolean;
}
/**
 * Response containing the UTxOs that match the requested addresses.
 *
 * @generated from message utxorpc.v1alpha.query.SearchUtxosResponse
 */
declare class SearchUtxosResponse extends Message<SearchUtxosResponse> {
    /**
     * List of UTxOs.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.AnyUtxoData items = 1;
     */
    items: AnyUtxoData[];
    /**
     * The chain point that represent the ledger current position.
     *
     * @generated from field: utxorpc.v1alpha.query.ChainPoint ledger_tip = 2;
     */
    ledgerTip?: ChainPoint;
    /**
     * Token to retrieve the next page of results, or empty if there are no more results.
     *
     * @generated from field: string next_token = 3;
     */
    nextToken: string;
    constructor(data?: PartialMessage<SearchUtxosResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.SearchUtxosResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUtxosResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUtxosResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUtxosResponse;
    static equals(a: SearchUtxosResponse | PlainMessage<SearchUtxosResponse> | undefined, b: SearchUtxosResponse | PlainMessage<SearchUtxosResponse> | undefined): boolean;
}
/**
 * Request to get data (as in plural of datum)
 *
 * @generated from message utxorpc.v1alpha.query.ReadDataRequest
 */
declare class ReadDataRequest extends Message<ReadDataRequest> {
    /**
     * @generated from field: repeated bytes keys = 1;
     */
    keys: Uint8Array[];
    /**
     * Field mask to selectively return fields in the response.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<ReadDataRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ReadDataRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadDataRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadDataRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadDataRequest;
    static equals(a: ReadDataRequest | PlainMessage<ReadDataRequest> | undefined, b: ReadDataRequest | PlainMessage<ReadDataRequest> | undefined): boolean;
}
/**
 * An evenlope that holds a datum for any of the compatible chains
 *
 * @generated from message utxorpc.v1alpha.query.AnyChainDatum
 */
declare class AnyChainDatum extends Message<AnyChainDatum> {
    /**
     * Original bytes as defined by the chain
     *
     * @generated from field: bytes native_bytes = 1;
     */
    nativeBytes: Uint8Array;
    /**
     * @generated from field: bytes key = 2;
     */
    key: Uint8Array;
    /**
     * @generated from oneof utxorpc.v1alpha.query.AnyChainDatum.parsed_state
     */
    parsedState: {
        /**
         * A cardano UTxO
         *
         * @generated from field: utxorpc.v1alpha.cardano.PlutusData cardano = 3;
         */
        value: PlutusData;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainDatum>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.AnyChainDatum";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainDatum;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainDatum;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainDatum;
    static equals(a: AnyChainDatum | PlainMessage<AnyChainDatum> | undefined, b: AnyChainDatum | PlainMessage<AnyChainDatum> | undefined): boolean;
}
/**
 * Response containing data (as in plural of datum)
 *
 * @generated from message utxorpc.v1alpha.query.ReadDataResponse
 */
declare class ReadDataResponse extends Message<ReadDataResponse> {
    /**
     * The value of each datum.
     *
     * @generated from field: repeated utxorpc.v1alpha.query.AnyChainDatum values = 1;
     */
    values: AnyChainDatum[];
    /**
     * The chain point that represent the ledger current position.
     *
     * @generated from field: utxorpc.v1alpha.query.ChainPoint ledger_tip = 2;
     */
    ledgerTip?: ChainPoint;
    constructor(data?: PartialMessage<ReadDataResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.query.ReadDataResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadDataResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadDataResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadDataResponse;
    static equals(a: ReadDataResponse | PlainMessage<ReadDataResponse> | undefined, b: ReadDataResponse | PlainMessage<ReadDataResponse> | undefined): boolean;
}

type query_pb_AnyChainDatum = AnyChainDatum;
declare const query_pb_AnyChainDatum: typeof AnyChainDatum;
type query_pb_AnyChainParams = AnyChainParams;
declare const query_pb_AnyChainParams: typeof AnyChainParams;
type query_pb_AnyUtxoData = AnyUtxoData;
declare const query_pb_AnyUtxoData: typeof AnyUtxoData;
type query_pb_AnyUtxoPattern = AnyUtxoPattern;
declare const query_pb_AnyUtxoPattern: typeof AnyUtxoPattern;
type query_pb_ChainPoint = ChainPoint;
declare const query_pb_ChainPoint: typeof ChainPoint;
type query_pb_ReadDataRequest = ReadDataRequest;
declare const query_pb_ReadDataRequest: typeof ReadDataRequest;
type query_pb_ReadDataResponse = ReadDataResponse;
declare const query_pb_ReadDataResponse: typeof ReadDataResponse;
type query_pb_ReadParamsRequest = ReadParamsRequest;
declare const query_pb_ReadParamsRequest: typeof ReadParamsRequest;
type query_pb_ReadParamsResponse = ReadParamsResponse;
declare const query_pb_ReadParamsResponse: typeof ReadParamsResponse;
type query_pb_ReadUtxosRequest = ReadUtxosRequest;
declare const query_pb_ReadUtxosRequest: typeof ReadUtxosRequest;
type query_pb_ReadUtxosResponse = ReadUtxosResponse;
declare const query_pb_ReadUtxosResponse: typeof ReadUtxosResponse;
type query_pb_SearchUtxosRequest = SearchUtxosRequest;
declare const query_pb_SearchUtxosRequest: typeof SearchUtxosRequest;
type query_pb_SearchUtxosResponse = SearchUtxosResponse;
declare const query_pb_SearchUtxosResponse: typeof SearchUtxosResponse;
type query_pb_TxoRef = TxoRef;
declare const query_pb_TxoRef: typeof TxoRef;
type query_pb_UtxoPredicate = UtxoPredicate;
declare const query_pb_UtxoPredicate: typeof UtxoPredicate;
declare namespace query_pb {
  export { query_pb_AnyChainDatum as AnyChainDatum, query_pb_AnyChainParams as AnyChainParams, query_pb_AnyUtxoData as AnyUtxoData, query_pb_AnyUtxoPattern as AnyUtxoPattern, query_pb_ChainPoint as ChainPoint, query_pb_ReadDataRequest as ReadDataRequest, query_pb_ReadDataResponse as ReadDataResponse, query_pb_ReadParamsRequest as ReadParamsRequest, query_pb_ReadParamsResponse as ReadParamsResponse, query_pb_ReadUtxosRequest as ReadUtxosRequest, query_pb_ReadUtxosResponse as ReadUtxosResponse, query_pb_SearchUtxosRequest as SearchUtxosRequest, query_pb_SearchUtxosResponse as SearchUtxosResponse, query_pb_TxoRef as TxoRef, query_pb_UtxoPredicate as UtxoPredicate };
}

/**
 * Service definition for querying the state of the chain.
 *
 * @generated from service utxorpc.v1alpha.query.QueryService
 */
declare const QueryService: {
    readonly typeName: "utxorpc.v1alpha.query.QueryService";
    readonly methods: {
        /**
         * Get overall chain state.
         *
         * @generated from rpc utxorpc.v1alpha.query.QueryService.ReadParams
         */
        readonly readParams: {
            readonly name: "ReadParams";
            readonly I: typeof ReadParamsRequest;
            readonly O: typeof ReadParamsResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Read specific UTxOs by reference.
         *
         * @generated from rpc utxorpc.v1alpha.query.QueryService.ReadUtxos
         */
        readonly readUtxos: {
            readonly name: "ReadUtxos";
            readonly I: typeof ReadUtxosRequest;
            readonly O: typeof ReadUtxosResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Search for UTxO based on a pattern.
         *
         * @generated from rpc utxorpc.v1alpha.query.QueryService.SearchUtxos
         */
        readonly searchUtxos: {
            readonly name: "SearchUtxos";
            readonly I: typeof SearchUtxosRequest;
            readonly O: typeof SearchUtxosResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Read specific datum by hash
         *
         * @generated from rpc utxorpc.v1alpha.query.QueryService.ReadData
         */
        readonly readData: {
            readonly name: "ReadData";
            readonly I: typeof ReadDataRequest;
            readonly O: typeof ReadDataResponse;
            readonly kind: MethodKind.Unary;
        };
    };
};

declare const query_connect_QueryService: typeof QueryService;
declare namespace query_connect {
  export { query_connect_QueryService as QueryService };
}

/**
 * Enum representing the various stages of a transaction's lifecycle.
 *
 * @generated from enum utxorpc.v1alpha.submit.Stage
 */
declare enum Stage {
    /**
     * Unspecified stage.
     *
     * @generated from enum value: STAGE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Transaction has been acknowledged by the node.
     *
     * @generated from enum value: STAGE_ACKNOWLEDGED = 1;
     */
    ACKNOWLEDGED = 1,
    /**
     * Transaction is in the mempool.
     *
     * @generated from enum value: STAGE_MEMPOOL = 2;
     */
    MEMPOOL = 2,
    /**
     * Transaction has been propagated across the network.
     *
     * @generated from enum value: STAGE_NETWORK = 3;
     */
    NETWORK = 3,
    /**
     * Transaction has been confirmed on the blockchain.
     *
     * @generated from enum value: STAGE_CONFIRMED = 4;
     */
    CONFIRMED = 4
}
/**
 * Represents a transaction from any supported blockchain.
 *
 * @generated from message utxorpc.v1alpha.submit.AnyChainTx
 */
declare class AnyChainTx$1 extends Message<AnyChainTx$1> {
    /**
     * @generated from oneof utxorpc.v1alpha.submit.AnyChainTx.type
     */
    type: {
        /**
         * Raw transaction data.
         *
         * @generated from field: bytes raw = 1;
         */
        value: Uint8Array;
        case: "raw";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainTx$1>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.AnyChainTx";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainTx$1;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainTx$1;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainTx$1;
    static equals(a: AnyChainTx$1 | PlainMessage<AnyChainTx$1> | undefined, b: AnyChainTx$1 | PlainMessage<AnyChainTx$1> | undefined): boolean;
}
/**
 * Request to evaluate transactions without submitting.
 *
 * @generated from message utxorpc.v1alpha.submit.EvalTxRequest
 */
declare class EvalTxRequest extends Message<EvalTxRequest> {
    /**
     * List of transactions to evaluate.
     *
     * @generated from field: repeated utxorpc.v1alpha.submit.AnyChainTx tx = 1;
     */
    tx: AnyChainTx$1[];
    constructor(data?: PartialMessage<EvalTxRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.EvalTxRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalTxRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalTxRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalTxRequest;
    static equals(a: EvalTxRequest | PlainMessage<EvalTxRequest> | undefined, b: EvalTxRequest | PlainMessage<EvalTxRequest> | undefined): boolean;
}
/**
 * Report containing the result of evaluating a particular transaction
 *
 * @generated from message utxorpc.v1alpha.submit.AnyChainEval
 */
declare class AnyChainEval extends Message<AnyChainEval> {
    /**
     * @generated from oneof utxorpc.v1alpha.submit.AnyChainEval.chain
     */
    chain: {
        /**
         * A Cardano tx evaluation report.
         *
         * @generated from field: utxorpc.v1alpha.cardano.TxEval cardano = 1;
         */
        value: TxEval;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainEval>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.AnyChainEval";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainEval;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainEval;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainEval;
    static equals(a: AnyChainEval | PlainMessage<AnyChainEval> | undefined, b: AnyChainEval | PlainMessage<AnyChainEval> | undefined): boolean;
}
/**
 * Response containing the reports form the transaction evaluation.
 *
 * @generated from message utxorpc.v1alpha.submit.EvalTxResponse
 */
declare class EvalTxResponse extends Message<EvalTxResponse> {
    /**
     * @generated from field: repeated utxorpc.v1alpha.submit.AnyChainEval report = 1;
     */
    report: AnyChainEval[];
    constructor(data?: PartialMessage<EvalTxResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.EvalTxResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalTxResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalTxResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalTxResponse;
    static equals(a: EvalTxResponse | PlainMessage<EvalTxResponse> | undefined, b: EvalTxResponse | PlainMessage<EvalTxResponse> | undefined): boolean;
}
/**
 * Request to submit transactions to the blockchain.
 *
 * @generated from message utxorpc.v1alpha.submit.SubmitTxRequest
 */
declare class SubmitTxRequest extends Message<SubmitTxRequest> {
    /**
     * List of transactions to submit.
     *
     * @generated from field: repeated utxorpc.v1alpha.submit.AnyChainTx tx = 1;
     */
    tx: AnyChainTx$1[];
    constructor(data?: PartialMessage<SubmitTxRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.SubmitTxRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitTxRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitTxRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitTxRequest;
    static equals(a: SubmitTxRequest | PlainMessage<SubmitTxRequest> | undefined, b: SubmitTxRequest | PlainMessage<SubmitTxRequest> | undefined): boolean;
}
/**
 * Response containing references to the submitted transactions.
 *
 * @generated from message utxorpc.v1alpha.submit.SubmitTxResponse
 */
declare class SubmitTxResponse extends Message<SubmitTxResponse> {
    /**
     * List of transaction references.
     *
     * @generated from field: repeated bytes ref = 1;
     */
    ref: Uint8Array[];
    constructor(data?: PartialMessage<SubmitTxResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.SubmitTxResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitTxResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitTxResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitTxResponse;
    static equals(a: SubmitTxResponse | PlainMessage<SubmitTxResponse> | undefined, b: SubmitTxResponse | PlainMessage<SubmitTxResponse> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.submit.TxInMempool
 */
declare class TxInMempool extends Message<TxInMempool> {
    /**
     * The transaction reference.
     *
     * @generated from field: bytes ref = 1;
     */
    ref: Uint8Array;
    /**
     * Original bytes as defined by the chain
     *
     * @generated from field: bytes native_bytes = 2;
     */
    nativeBytes: Uint8Array;
    /**
     * The current stage of the tx
     *
     * @generated from field: utxorpc.v1alpha.submit.Stage stage = 3;
     */
    stage: Stage;
    /**
     * @generated from oneof utxorpc.v1alpha.submit.TxInMempool.parsed_state
     */
    parsedState: {
        /**
         * A Cardano transaction.
         *
         * @generated from field: utxorpc.v1alpha.cardano.Tx cardano = 4;
         */
        value: Tx;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<TxInMempool>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.TxInMempool";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxInMempool;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxInMempool;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxInMempool;
    static equals(a: TxInMempool | PlainMessage<TxInMempool> | undefined, b: TxInMempool | PlainMessage<TxInMempool> | undefined): boolean;
}
/**
 * Request to check the status of submitted transactions.
 *
 * @generated from message utxorpc.v1alpha.submit.ReadMempoolRequest
 */
declare class ReadMempoolRequest extends Message<ReadMempoolRequest> {
    constructor(data?: PartialMessage<ReadMempoolRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.ReadMempoolRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMempoolRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMempoolRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMempoolRequest;
    static equals(a: ReadMempoolRequest | PlainMessage<ReadMempoolRequest> | undefined, b: ReadMempoolRequest | PlainMessage<ReadMempoolRequest> | undefined): boolean;
}
/**
 * Response containing the stage of the submitted transactions.
 *
 * @generated from message utxorpc.v1alpha.submit.ReadMempoolResponse
 */
declare class ReadMempoolResponse extends Message<ReadMempoolResponse> {
    /**
     * List of transaction currently on the mempool.
     *
     * @generated from field: repeated utxorpc.v1alpha.submit.TxInMempool items = 1;
     */
    items: TxInMempool[];
    constructor(data?: PartialMessage<ReadMempoolResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.ReadMempoolResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMempoolResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMempoolResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMempoolResponse;
    static equals(a: ReadMempoolResponse | PlainMessage<ReadMempoolResponse> | undefined, b: ReadMempoolResponse | PlainMessage<ReadMempoolResponse> | undefined): boolean;
}
/**
 * Request to wait for transactions to reach a certain stage.
 *
 * @generated from message utxorpc.v1alpha.submit.WaitForTxRequest
 */
declare class WaitForTxRequest extends Message<WaitForTxRequest> {
    /**
     * List of transaction references to wait for.
     *
     * @generated from field: repeated bytes ref = 1;
     */
    ref: Uint8Array[];
    constructor(data?: PartialMessage<WaitForTxRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.WaitForTxRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForTxRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForTxRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForTxRequest;
    static equals(a: WaitForTxRequest | PlainMessage<WaitForTxRequest> | undefined, b: WaitForTxRequest | PlainMessage<WaitForTxRequest> | undefined): boolean;
}
/**
 * Response containing the transaction reference and stage once it has been reached.
 *
 * @generated from message utxorpc.v1alpha.submit.WaitForTxResponse
 */
declare class WaitForTxResponse extends Message<WaitForTxResponse> {
    /**
     * Transaction reference.
     *
     * @generated from field: bytes ref = 1;
     */
    ref: Uint8Array;
    /**
     * Stage reached by the transaction.
     *
     * @generated from field: utxorpc.v1alpha.submit.Stage stage = 2;
     */
    stage: Stage;
    constructor(data?: PartialMessage<WaitForTxResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.WaitForTxResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WaitForTxResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WaitForTxResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WaitForTxResponse;
    static equals(a: WaitForTxResponse | PlainMessage<WaitForTxResponse> | undefined, b: WaitForTxResponse | PlainMessage<WaitForTxResponse> | undefined): boolean;
}
/**
 * Represents a tx pattern from any supported blockchain.
 *
 * @generated from message utxorpc.v1alpha.submit.AnyChainTxPattern
 */
declare class AnyChainTxPattern$1 extends Message<AnyChainTxPattern$1> {
    /**
     * @generated from oneof utxorpc.v1alpha.submit.AnyChainTxPattern.chain
     */
    chain: {
        /**
         * A Cardano tx pattern.
         *
         * @generated from field: utxorpc.v1alpha.cardano.TxPattern cardano = 1;
         */
        value: TxPattern;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainTxPattern$1>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.AnyChainTxPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainTxPattern$1;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainTxPattern$1;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainTxPattern$1;
    static equals(a: AnyChainTxPattern$1 | PlainMessage<AnyChainTxPattern$1> | undefined, b: AnyChainTxPattern$1 | PlainMessage<AnyChainTxPattern$1> | undefined): boolean;
}
/**
 * Represents a simple tx predicate that can composed to create more complex ones
 *
 * @generated from message utxorpc.v1alpha.submit.TxPredicate
 */
declare class TxPredicate$1 extends Message<TxPredicate$1> {
    /**
     * Predicate is true if tx exhibits pattern.
     *
     * @generated from field: utxorpc.v1alpha.submit.AnyChainTxPattern match = 1;
     */
    match?: AnyChainTxPattern$1;
    /**
     * Predicate is true if tx doesn't exhibit pattern.
     *
     * @generated from field: repeated utxorpc.v1alpha.submit.TxPredicate not = 2;
     */
    not: TxPredicate$1[];
    /**
     * Predicate is true if tx exhibits all of the patterns.
     *
     * @generated from field: repeated utxorpc.v1alpha.submit.TxPredicate all_of = 3;
     */
    allOf: TxPredicate$1[];
    /**
     * Predicate is true if tx exhibits any of the patterns.
     *
     * @generated from field: repeated utxorpc.v1alpha.submit.TxPredicate any_of = 4;
     */
    anyOf: TxPredicate$1[];
    constructor(data?: PartialMessage<TxPredicate$1>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.TxPredicate";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxPredicate$1;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxPredicate$1;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxPredicate$1;
    static equals(a: TxPredicate$1 | PlainMessage<TxPredicate$1> | undefined, b: TxPredicate$1 | PlainMessage<TxPredicate$1> | undefined): boolean;
}
/**
 * Request to watch changes of specific mempool txs.
 *
 * @generated from message utxorpc.v1alpha.submit.WatchMempoolRequest
 */
declare class WatchMempoolRequest extends Message<WatchMempoolRequest> {
    /**
     * A predicate to filter transactions by.
     *
     * @generated from field: utxorpc.v1alpha.submit.TxPredicate predicate = 1;
     */
    predicate?: TxPredicate$1;
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<WatchMempoolRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.WatchMempoolRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchMempoolRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchMempoolRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchMempoolRequest;
    static equals(a: WatchMempoolRequest | PlainMessage<WatchMempoolRequest> | undefined, b: WatchMempoolRequest | PlainMessage<WatchMempoolRequest> | undefined): boolean;
}
/**
 * Response that represents a change in a mempool tx.
 *
 * @generated from message utxorpc.v1alpha.submit.WatchMempoolResponse
 */
declare class WatchMempoolResponse extends Message<WatchMempoolResponse> {
    /**
     * The content and stage of the tx that has changed
     *
     * @generated from field: utxorpc.v1alpha.submit.TxInMempool tx = 1;
     */
    tx?: TxInMempool;
    constructor(data?: PartialMessage<WatchMempoolResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.submit.WatchMempoolResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchMempoolResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchMempoolResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchMempoolResponse;
    static equals(a: WatchMempoolResponse | PlainMessage<WatchMempoolResponse> | undefined, b: WatchMempoolResponse | PlainMessage<WatchMempoolResponse> | undefined): boolean;
}

type submit_pb_AnyChainEval = AnyChainEval;
declare const submit_pb_AnyChainEval: typeof AnyChainEval;
type submit_pb_EvalTxRequest = EvalTxRequest;
declare const submit_pb_EvalTxRequest: typeof EvalTxRequest;
type submit_pb_EvalTxResponse = EvalTxResponse;
declare const submit_pb_EvalTxResponse: typeof EvalTxResponse;
type submit_pb_ReadMempoolRequest = ReadMempoolRequest;
declare const submit_pb_ReadMempoolRequest: typeof ReadMempoolRequest;
type submit_pb_ReadMempoolResponse = ReadMempoolResponse;
declare const submit_pb_ReadMempoolResponse: typeof ReadMempoolResponse;
type submit_pb_Stage = Stage;
declare const submit_pb_Stage: typeof Stage;
type submit_pb_SubmitTxRequest = SubmitTxRequest;
declare const submit_pb_SubmitTxRequest: typeof SubmitTxRequest;
type submit_pb_SubmitTxResponse = SubmitTxResponse;
declare const submit_pb_SubmitTxResponse: typeof SubmitTxResponse;
type submit_pb_TxInMempool = TxInMempool;
declare const submit_pb_TxInMempool: typeof TxInMempool;
type submit_pb_WaitForTxRequest = WaitForTxRequest;
declare const submit_pb_WaitForTxRequest: typeof WaitForTxRequest;
type submit_pb_WaitForTxResponse = WaitForTxResponse;
declare const submit_pb_WaitForTxResponse: typeof WaitForTxResponse;
type submit_pb_WatchMempoolRequest = WatchMempoolRequest;
declare const submit_pb_WatchMempoolRequest: typeof WatchMempoolRequest;
type submit_pb_WatchMempoolResponse = WatchMempoolResponse;
declare const submit_pb_WatchMempoolResponse: typeof WatchMempoolResponse;
declare namespace submit_pb {
  export { submit_pb_AnyChainEval as AnyChainEval, AnyChainTx$1 as AnyChainTx, AnyChainTxPattern$1 as AnyChainTxPattern, submit_pb_EvalTxRequest as EvalTxRequest, submit_pb_EvalTxResponse as EvalTxResponse, submit_pb_ReadMempoolRequest as ReadMempoolRequest, submit_pb_ReadMempoolResponse as ReadMempoolResponse, submit_pb_Stage as Stage, submit_pb_SubmitTxRequest as SubmitTxRequest, submit_pb_SubmitTxResponse as SubmitTxResponse, submit_pb_TxInMempool as TxInMempool, TxPredicate$1 as TxPredicate, submit_pb_WaitForTxRequest as WaitForTxRequest, submit_pb_WaitForTxResponse as WaitForTxResponse, submit_pb_WatchMempoolRequest as WatchMempoolRequest, submit_pb_WatchMempoolResponse as WatchMempoolResponse };
}

/**
 * Service definition for submitting transactions and checking their status.
 *
 * @generated from service utxorpc.v1alpha.submit.SubmitService
 */
declare const SubmitService: {
    readonly typeName: "utxorpc.v1alpha.submit.SubmitService";
    readonly methods: {
        /**
         * Evaluates a transaction without submitting it.
         *
         * @generated from rpc utxorpc.v1alpha.submit.SubmitService.EvalTx
         */
        readonly evalTx: {
            readonly name: "EvalTx";
            readonly I: typeof EvalTxRequest;
            readonly O: typeof EvalTxResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Submit transactions to the blockchain.
         *
         * @generated from rpc utxorpc.v1alpha.submit.SubmitService.SubmitTx
         */
        readonly submitTx: {
            readonly name: "SubmitTx";
            readonly I: typeof SubmitTxRequest;
            readonly O: typeof SubmitTxResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Wait for transactions to reach a certain stage and stream the updates.
         *
         * @generated from rpc utxorpc.v1alpha.submit.SubmitService.WaitForTx
         */
        readonly waitForTx: {
            readonly name: "WaitForTx";
            readonly I: typeof WaitForTxRequest;
            readonly O: typeof WaitForTxResponse;
            readonly kind: MethodKind.ServerStreaming;
        };
        /**
         * Returns a point-in-time snapshot of the mempool.
         *
         * @generated from rpc utxorpc.v1alpha.submit.SubmitService.ReadMempool
         */
        readonly readMempool: {
            readonly name: "ReadMempool";
            readonly I: typeof ReadMempoolRequest;
            readonly O: typeof ReadMempoolResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Stream transactions from the mempool matching the specified predicates.
         *
         * @generated from rpc utxorpc.v1alpha.submit.SubmitService.WatchMempool
         */
        readonly watchMempool: {
            readonly name: "WatchMempool";
            readonly I: typeof WatchMempoolRequest;
            readonly O: typeof WatchMempoolResponse;
            readonly kind: MethodKind.ServerStreaming;
        };
    };
};

declare const submit_connect_SubmitService: typeof SubmitService;
declare namespace submit_connect {
  export { submit_connect_SubmitService as SubmitService };
}

/**
 * Represents a reference to a specific block
 *
 * @generated from message utxorpc.v1alpha.sync.BlockRef
 */
declare class BlockRef$1 extends Message<BlockRef$1> {
    /**
     * Height or slot number (depending on the blockchain)
     *
     * @generated from field: uint64 index = 1;
     */
    index: bigint;
    /**
     * Hash of the content of the block
     *
     * @generated from field: bytes hash = 2;
     */
    hash: Uint8Array;
    constructor(data?: PartialMessage<BlockRef$1>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.BlockRef";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockRef$1;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockRef$1;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockRef$1;
    static equals(a: BlockRef$1 | PlainMessage<BlockRef$1> | undefined, b: BlockRef$1 | PlainMessage<BlockRef$1> | undefined): boolean;
}
/**
 * @generated from message utxorpc.v1alpha.sync.AnyChainBlock
 */
declare class AnyChainBlock extends Message<AnyChainBlock> {
    /**
     * Original bytes as defined by the chain
     *
     * @generated from field: bytes native_bytes = 1;
     */
    nativeBytes: Uint8Array;
    /**
     * @generated from oneof utxorpc.v1alpha.sync.AnyChainBlock.chain
     */
    chain: {
        /**
         * A parsed Cardano block.
         *
         * @generated from field: utxorpc.v1alpha.cardano.Block cardano = 2;
         */
        value: Block;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainBlock>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.AnyChainBlock";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainBlock;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainBlock;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainBlock;
    static equals(a: AnyChainBlock | PlainMessage<AnyChainBlock> | undefined, b: AnyChainBlock | PlainMessage<AnyChainBlock> | undefined): boolean;
}
/**
 * Request to fetch a block by its reference.
 *
 * @generated from message utxorpc.v1alpha.sync.FetchBlockRequest
 */
declare class FetchBlockRequest extends Message<FetchBlockRequest> {
    /**
     * List of block references.
     *
     * @generated from field: repeated utxorpc.v1alpha.sync.BlockRef ref = 1;
     */
    ref: BlockRef$1[];
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<FetchBlockRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.FetchBlockRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchBlockRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchBlockRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchBlockRequest;
    static equals(a: FetchBlockRequest | PlainMessage<FetchBlockRequest> | undefined, b: FetchBlockRequest | PlainMessage<FetchBlockRequest> | undefined): boolean;
}
/**
 * Response containing the fetched blocks.
 *
 * @generated from message utxorpc.v1alpha.sync.FetchBlockResponse
 */
declare class FetchBlockResponse extends Message<FetchBlockResponse> {
    /**
     * List of fetched blocks.
     *
     * @generated from field: repeated utxorpc.v1alpha.sync.AnyChainBlock block = 1;
     */
    block: AnyChainBlock[];
    constructor(data?: PartialMessage<FetchBlockResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.FetchBlockResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchBlockResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchBlockResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchBlockResponse;
    static equals(a: FetchBlockResponse | PlainMessage<FetchBlockResponse> | undefined, b: FetchBlockResponse | PlainMessage<FetchBlockResponse> | undefined): boolean;
}
/**
 * Request to dump the block history.
 *
 * @generated from message utxorpc.v1alpha.sync.DumpHistoryRequest
 */
declare class DumpHistoryRequest extends Message<DumpHistoryRequest> {
    /**
     * Starting point for the block history dump.
     *
     * @generated from field: utxorpc.v1alpha.sync.BlockRef start_token = 2;
     */
    startToken?: BlockRef$1;
    /**
     * Maximum number of items to return.
     *
     * @generated from field: uint32 max_items = 3;
     */
    maxItems: number;
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 4;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<DumpHistoryRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.DumpHistoryRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DumpHistoryRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DumpHistoryRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DumpHistoryRequest;
    static equals(a: DumpHistoryRequest | PlainMessage<DumpHistoryRequest> | undefined, b: DumpHistoryRequest | PlainMessage<DumpHistoryRequest> | undefined): boolean;
}
/**
 * Response containing the dumped block history.
 *
 * @generated from message utxorpc.v1alpha.sync.DumpHistoryResponse
 */
declare class DumpHistoryResponse extends Message<DumpHistoryResponse> {
    /**
     * List of blocks in the history.
     *
     * @generated from field: repeated utxorpc.v1alpha.sync.AnyChainBlock block = 1;
     */
    block: AnyChainBlock[];
    /**
     * Next token for pagination.
     *
     * @generated from field: utxorpc.v1alpha.sync.BlockRef next_token = 2;
     */
    nextToken?: BlockRef$1;
    constructor(data?: PartialMessage<DumpHistoryResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.DumpHistoryResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DumpHistoryResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DumpHistoryResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DumpHistoryResponse;
    static equals(a: DumpHistoryResponse | PlainMessage<DumpHistoryResponse> | undefined, b: DumpHistoryResponse | PlainMessage<DumpHistoryResponse> | undefined): boolean;
}
/**
 * Request to follow the tip of the blockchain.
 *
 * @generated from message utxorpc.v1alpha.sync.FollowTipRequest
 */
declare class FollowTipRequest extends Message<FollowTipRequest> {
    /**
     * List of block references to find the intersection.
     *
     * @generated from field: repeated utxorpc.v1alpha.sync.BlockRef intersect = 1;
     */
    intersect: BlockRef$1[];
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    constructor(data?: PartialMessage<FollowTipRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.FollowTipRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FollowTipRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FollowTipRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FollowTipRequest;
    static equals(a: FollowTipRequest | PlainMessage<FollowTipRequest> | undefined, b: FollowTipRequest | PlainMessage<FollowTipRequest> | undefined): boolean;
}
/**
 * Response containing the action to perform while following the tip.
 *
 * @generated from message utxorpc.v1alpha.sync.FollowTipResponse
 */
declare class FollowTipResponse extends Message<FollowTipResponse> {
    /**
     * @generated from oneof utxorpc.v1alpha.sync.FollowTipResponse.action
     */
    action: {
        /**
         * Apply this block.
         *
         * @generated from field: utxorpc.v1alpha.sync.AnyChainBlock apply = 1;
         */
        value: AnyChainBlock;
        case: "apply";
    } | {
        /**
         * Undo this block.
         *
         * @generated from field: utxorpc.v1alpha.sync.AnyChainBlock undo = 2;
         */
        value: AnyChainBlock;
        case: "undo";
    } | {
        /**
         * Reset to this block reference.
         *
         * @generated from field: utxorpc.v1alpha.sync.BlockRef reset = 3;
         */
        value: BlockRef$1;
        case: "reset";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<FollowTipResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.sync.FollowTipResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FollowTipResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FollowTipResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FollowTipResponse;
    static equals(a: FollowTipResponse | PlainMessage<FollowTipResponse> | undefined, b: FollowTipResponse | PlainMessage<FollowTipResponse> | undefined): boolean;
}

type sync_pb_AnyChainBlock = AnyChainBlock;
declare const sync_pb_AnyChainBlock: typeof AnyChainBlock;
type sync_pb_DumpHistoryRequest = DumpHistoryRequest;
declare const sync_pb_DumpHistoryRequest: typeof DumpHistoryRequest;
type sync_pb_DumpHistoryResponse = DumpHistoryResponse;
declare const sync_pb_DumpHistoryResponse: typeof DumpHistoryResponse;
type sync_pb_FetchBlockRequest = FetchBlockRequest;
declare const sync_pb_FetchBlockRequest: typeof FetchBlockRequest;
type sync_pb_FetchBlockResponse = FetchBlockResponse;
declare const sync_pb_FetchBlockResponse: typeof FetchBlockResponse;
type sync_pb_FollowTipRequest = FollowTipRequest;
declare const sync_pb_FollowTipRequest: typeof FollowTipRequest;
type sync_pb_FollowTipResponse = FollowTipResponse;
declare const sync_pb_FollowTipResponse: typeof FollowTipResponse;
declare namespace sync_pb {
  export { sync_pb_AnyChainBlock as AnyChainBlock, BlockRef$1 as BlockRef, sync_pb_DumpHistoryRequest as DumpHistoryRequest, sync_pb_DumpHistoryResponse as DumpHistoryResponse, sync_pb_FetchBlockRequest as FetchBlockRequest, sync_pb_FetchBlockResponse as FetchBlockResponse, sync_pb_FollowTipRequest as FollowTipRequest, sync_pb_FollowTipResponse as FollowTipResponse };
}

/**
 * Service definition for syncing chain data.
 *
 * @generated from service utxorpc.v1alpha.sync.SyncService
 */
declare const SyncService: {
    readonly typeName: "utxorpc.v1alpha.sync.SyncService";
    readonly methods: {
        /**
         * Fetch a block by its reference.
         *
         * @generated from rpc utxorpc.v1alpha.sync.SyncService.FetchBlock
         */
        readonly fetchBlock: {
            readonly name: "FetchBlock";
            readonly I: typeof FetchBlockRequest;
            readonly O: typeof FetchBlockResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Dump the block history.
         *
         * @generated from rpc utxorpc.v1alpha.sync.SyncService.DumpHistory
         */
        readonly dumpHistory: {
            readonly name: "DumpHistory";
            readonly I: typeof DumpHistoryRequest;
            readonly O: typeof DumpHistoryResponse;
            readonly kind: MethodKind.Unary;
        };
        /**
         * Follow the tip of the blockchain.
         *
         * @generated from rpc utxorpc.v1alpha.sync.SyncService.FollowTip
         */
        readonly followTip: {
            readonly name: "FollowTip";
            readonly I: typeof FollowTipRequest;
            readonly O: typeof FollowTipResponse;
            readonly kind: MethodKind.ServerStreaming;
        };
    };
};

declare const sync_connect_SyncService: typeof SyncService;
declare namespace sync_connect {
  export { sync_connect_SyncService as SyncService };
}

/**
 * Represents a reference to a specific block
 *
 * @generated from message utxorpc.v1alpha.watch.BlockRef
 */
declare class BlockRef extends Message<BlockRef> {
    /**
     * Height or slot number (depending on the blockchain)
     *
     * @generated from field: uint64 index = 1;
     */
    index: bigint;
    /**
     * Hash of the content of the block
     *
     * @generated from field: bytes hash = 2;
     */
    hash: Uint8Array;
    constructor(data?: PartialMessage<BlockRef>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.watch.BlockRef";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockRef;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockRef;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockRef;
    static equals(a: BlockRef | PlainMessage<BlockRef> | undefined, b: BlockRef | PlainMessage<BlockRef> | undefined): boolean;
}
/**
 * Represents a tx pattern from any supported blockchain.
 *
 * @generated from message utxorpc.v1alpha.watch.AnyChainTxPattern
 */
declare class AnyChainTxPattern extends Message<AnyChainTxPattern> {
    /**
     * @generated from oneof utxorpc.v1alpha.watch.AnyChainTxPattern.chain
     */
    chain: {
        /**
         * A Cardano tx pattern.
         *
         * @generated from field: utxorpc.v1alpha.cardano.TxPattern cardano = 1;
         */
        value: TxPattern;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainTxPattern>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.watch.AnyChainTxPattern";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainTxPattern;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainTxPattern;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainTxPattern;
    static equals(a: AnyChainTxPattern | PlainMessage<AnyChainTxPattern> | undefined, b: AnyChainTxPattern | PlainMessage<AnyChainTxPattern> | undefined): boolean;
}
/**
 * Represents a simple tx predicate that can composed to create more complex ones
 *
 * @generated from message utxorpc.v1alpha.watch.TxPredicate
 */
declare class TxPredicate extends Message<TxPredicate> {
    /**
     * Predicate is true if tx exhibits pattern.
     *
     * @generated from field: utxorpc.v1alpha.watch.AnyChainTxPattern match = 1;
     */
    match?: AnyChainTxPattern;
    /**
     * Predicate is true if tx doesn't exhibit pattern.
     *
     * @generated from field: repeated utxorpc.v1alpha.watch.TxPredicate not = 2;
     */
    not: TxPredicate[];
    /**
     * Predicate is true if tx exhibits all of the patterns.
     *
     * @generated from field: repeated utxorpc.v1alpha.watch.TxPredicate all_of = 3;
     */
    allOf: TxPredicate[];
    /**
     * Predicate is true if tx exhibits any of the patterns.
     *
     * @generated from field: repeated utxorpc.v1alpha.watch.TxPredicate any_of = 4;
     */
    anyOf: TxPredicate[];
    constructor(data?: PartialMessage<TxPredicate>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.watch.TxPredicate";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxPredicate;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxPredicate;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxPredicate;
    static equals(a: TxPredicate | PlainMessage<TxPredicate> | undefined, b: TxPredicate | PlainMessage<TxPredicate> | undefined): boolean;
}
/**
 * Request to watch transactions from the chain based on a set of predicates.
 *
 * @generated from message utxorpc.v1alpha.watch.WatchTxRequest
 */
declare class WatchTxRequest extends Message<WatchTxRequest> {
    /**
     * Predicate to filter transactions by.
     *
     * @generated from field: utxorpc.v1alpha.watch.TxPredicate predicate = 1;
     */
    predicate?: TxPredicate;
    /**
     * Field mask to selectively return fields.
     *
     * @generated from field: google.protobuf.FieldMask field_mask = 2;
     */
    fieldMask?: FieldMask;
    /**
     * List of block references to find the intersection.
     *
     * @generated from field: repeated utxorpc.v1alpha.watch.BlockRef intersect = 3;
     */
    intersect: BlockRef[];
    constructor(data?: PartialMessage<WatchTxRequest>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.watch.WatchTxRequest";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchTxRequest;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchTxRequest;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchTxRequest;
    static equals(a: WatchTxRequest | PlainMessage<WatchTxRequest> | undefined, b: WatchTxRequest | PlainMessage<WatchTxRequest> | undefined): boolean;
}
/**
 * Represents a transaction from any supported blockchain.
 *
 * @generated from message utxorpc.v1alpha.watch.AnyChainTx
 */
declare class AnyChainTx extends Message<AnyChainTx> {
    /**
     * @generated from oneof utxorpc.v1alpha.watch.AnyChainTx.chain
     */
    chain: {
        /**
         * A Cardano transaction.
         *
         * @generated from field: utxorpc.v1alpha.cardano.Tx cardano = 1;
         */
        value: Tx;
        case: "cardano";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<AnyChainTx>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.watch.AnyChainTx";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyChainTx;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyChainTx;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyChainTx;
    static equals(a: AnyChainTx | PlainMessage<AnyChainTx> | undefined, b: AnyChainTx | PlainMessage<AnyChainTx> | undefined): boolean;
}
/**
 * Response containing the matching chain transactions.
 *
 * @generated from message utxorpc.v1alpha.watch.WatchTxResponse
 */
declare class WatchTxResponse extends Message<WatchTxResponse> {
    /**
     * @generated from oneof utxorpc.v1alpha.watch.WatchTxResponse.action
     */
    action: {
        /**
         * Apply this transaction.
         *
         * @generated from field: utxorpc.v1alpha.watch.AnyChainTx apply = 1;
         */
        value: AnyChainTx;
        case: "apply";
    } | {
        /**
         * Undo this transaction.
         *
         * @generated from field: utxorpc.v1alpha.watch.AnyChainTx undo = 2;
         */
        value: AnyChainTx;
        case: "undo";
    } | {
        case: undefined;
        value?: undefined;
    };
    constructor(data?: PartialMessage<WatchTxResponse>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "utxorpc.v1alpha.watch.WatchTxResponse";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchTxResponse;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchTxResponse;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchTxResponse;
    static equals(a: WatchTxResponse | PlainMessage<WatchTxResponse> | undefined, b: WatchTxResponse | PlainMessage<WatchTxResponse> | undefined): boolean;
}

type watch_pb_AnyChainTx = AnyChainTx;
declare const watch_pb_AnyChainTx: typeof AnyChainTx;
type watch_pb_AnyChainTxPattern = AnyChainTxPattern;
declare const watch_pb_AnyChainTxPattern: typeof AnyChainTxPattern;
type watch_pb_BlockRef = BlockRef;
declare const watch_pb_BlockRef: typeof BlockRef;
type watch_pb_TxPredicate = TxPredicate;
declare const watch_pb_TxPredicate: typeof TxPredicate;
type watch_pb_WatchTxRequest = WatchTxRequest;
declare const watch_pb_WatchTxRequest: typeof WatchTxRequest;
type watch_pb_WatchTxResponse = WatchTxResponse;
declare const watch_pb_WatchTxResponse: typeof WatchTxResponse;
declare namespace watch_pb {
  export { watch_pb_AnyChainTx as AnyChainTx, watch_pb_AnyChainTxPattern as AnyChainTxPattern, watch_pb_BlockRef as BlockRef, watch_pb_TxPredicate as TxPredicate, watch_pb_WatchTxRequest as WatchTxRequest, watch_pb_WatchTxResponse as WatchTxResponse };
}

/**
 * Service definition for watching transactions based on predicates.
 *
 * @generated from service utxorpc.v1alpha.watch.WatchService
 */
declare const WatchService: {
    readonly typeName: "utxorpc.v1alpha.watch.WatchService";
    readonly methods: {
        /**
         * Stream transactions from the chain matching the specified predicates.
         *
         * @generated from rpc utxorpc.v1alpha.watch.WatchService.WatchTx
         */
        readonly watchTx: {
            readonly name: "WatchTx";
            readonly I: typeof WatchTxRequest;
            readonly O: typeof WatchTxResponse;
            readonly kind: MethodKind.ServerStreaming;
        };
    };
};

declare const watch_connect_WatchService: typeof WatchService;
declare namespace watch_connect {
  export { watch_connect_WatchService as WatchService };
}

export { cardano_pb as cardano, query_pb as query, query_connect as queryConnect, submit_pb as submit, submit_connect as submitConnect, sync_pb as sync, sync_connect as syncConnect, watch_pb as watch, watch_connect as watchConnect };
