import type { DAppPeerConnectParameters, IDAppInfos, IWalletInfo } from './types';
import { Logger, LogLevel } from './lib/Logger';
export default class DAppPeerConnect {
    private meerkat;
    private walletDiscoveryMeerkat;
    private connectedWallet;
    protected enableLogging: boolean;
    protected logger: Logger;
    protected logLevel: LogLevel;
    protected readonly dAppInfo: IDAppInfos;
    protected identicon: string | null;
    protected onConnect?: (address: string, walletInfo?: IWalletInfo) => void;
    protected onDisconnect?: (address: string) => void;
    protected onApiEject?: (name: string, address: string) => void;
    protected onApiInject?: (name: string, address: string) => void;
    protected setUpDiscoveryMeerkcat: (announce: Array<string>, address?: string) => void;
    setLogLevel: (level: LogLevel, meerkat?: boolean) => void;
    constructor({ dAppInfo, seed, discoverySeed, announce, loggingEnabled, verifyConnection, onConnect, onDisconnect, onApiEject, onApiInject, useWalletDiscovery, }: DAppPeerConnectParameters);
    private leftServer;
    shutdownServer: () => void;
    private getInjectedApis;
    /**
     * Checks if wallet with name is already injected into global cardano namespace.
     * @param name
     */
    private isWalletNameInjected;
    /**
     * Checks if wallet name contains the string p2p to distinguish from other injection.
     * @param name
     */
    private isP2pWalletCompliantName;
    generateQRCode(canvas: HTMLElement): void;
    getConnectedWallet(): string | null;
    getAddress(): string;
    getSeed(): string;
    generateIdenticon: () => void;
    getIdenticon: () => string | null;
}
