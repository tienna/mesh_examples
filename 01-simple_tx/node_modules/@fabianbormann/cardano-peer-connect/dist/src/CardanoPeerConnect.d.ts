import Meerkat from '@fabianbormann/meerkat';
import type { Cip30Function, Cbor, Paginate, Bytes, Cip30DataSignature, IConnectMessage, IWalletInfo } from './types';
import { Value, ExperimentalContainer } from './lib/ExperimentalContainer';
import { LogLevel } from '@fabianbormann/meerkat/dist/types';
export default abstract class CardanoPeerConnect {
    protected meerkats: Map<string, Meerkat>;
    protected walletInfo: IWalletInfo;
    protected onConnect: (connectMessage: IConnectMessage) => void;
    protected onDisconnect: (connectMessage: IConnectMessage) => void;
    protected onServerShutdown: (connectMessage: IConnectMessage) => void;
    protected onApiInject: (connectMessage: IConnectMessage) => void;
    protected identicon: string | null;
    protected meerkat: Meerkat | null;
    protected logLevel: LogLevel;
    protected DAppDiscoveryMeerkat: Meerkat | null;
    protected cip30Functions: Array<Cip30Function>;
    protected _cip30ExperimentalApi?: ExperimentalContainer<any>;
    protected _cip30EnableExperimentalApi?: ExperimentalContainer<any>;
    protected seed: string | null;
    protected discoverySeed: string | null;
    protected announceEndpoints: string[];
    constructor(walletInfo: IWalletInfo, args?: {
        seed?: string | null;
        announce?: string[];
        discoverySeed?: string | null;
        logLevel?: LogLevel;
    });
    protected setLogLevel: (level: LogLevel) => void;
    protected setUpDiscoveryMeerkat: () => void;
    getDiscoveryMeerkatSeed: () => string | null;
    getDiscoveryMeerkatAddress: () => string | null;
    setOnConnect: (onConnectCallback: (connectMessage: IConnectMessage) => void) => void;
    setOnDisconnect: (onDisconnectCallback: (connectMessage: IConnectMessage) => void) => void;
    setOnServerShutdown: (onServerShutdown: (connectMessage: IConnectMessage) => void) => void;
    setOnApiInject: (onApiInject: (connectMessage: IConnectMessage) => void) => void;
    setExperimentalApi<T extends Record<keyof T, Value>>(dynamicObj: ExperimentalContainer<T>): void;
    setEnableExperimentalApi<T extends Record<keyof T, Value>>(dynamicObj: ExperimentalContainer<T>): void;
    getMeercat(identifier: string): Meerkat | undefined;
    clearSeen: () => void;
    injectApi: (identifier: string, overwrite?: boolean) => void;
    connect(identifier: string): string;
    protected addMeerkat: (identifier: string, meerkat: Meerkat) => void;
    protected getMeerkat: (identifier: string) => Meerkat | null;
    generateIdenticon: () => void;
    disconnect(address: string): void;
    getIdenticon: () => string | null;
    protected abstract getNetworkId(): Promise<number>;
    protected abstract getUtxos(amount?: Cbor, paginate?: Paginate): Promise<Cbor[] | null>;
    protected abstract getCollateral(params?: {
        amount?: Cbor;
    }): Promise<Cbor[] | null>;
    protected abstract getBalance(): Promise<Cbor>;
    protected abstract getUsedAddresses(): Promise<Cbor[]>;
    protected abstract getUnusedAddresses(): Promise<Cbor[]>;
    protected abstract getChangeAddress(): Promise<Cbor>;
    protected abstract getRewardAddresses(): Promise<Cbor[]>;
    protected abstract signTx(tx: Cbor, partialSign: boolean): Promise<Cbor>;
    protected abstract signData(addr: string, payload: Bytes): Promise<Cip30DataSignature>;
    protected abstract submitTx(tx: Cbor): Promise<string>;
}
