import { Buffer } from 'buffer';
import type { Packet } from '../types';
export declare function encode(data: Buffer | Array<any> | String | Object | Number | Boolean, buffer?: Buffer, offset?: number): Buffer<ArrayBufferLike>;
export declare namespace encode {
    var bytes: number;
    var _floatConversionDetected: boolean;
    var _encode: (buffers: Array<Buffer>, data: any) => void;
    var buffer: (buffers: Buffer[], data: Buffer) => void;
    var string: (buffers: Buffer[], data: string) => void;
    var number: (buffers: Buffer[], data: number) => void;
    var dict: (buffers: Buffer[], data: any) => void;
    var dictMap: (buffers: Buffer[], data: Map<any, any>) => void;
    var list: (buffers: Buffer[], data: Array<any>) => void;
    var listSet: (buffers: Buffer[], data: any) => void;
}
export declare function decode(rawData: Buffer | Uint8Array): Packet;
