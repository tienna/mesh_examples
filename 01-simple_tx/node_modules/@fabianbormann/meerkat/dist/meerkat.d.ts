import type { SignKeyPair, BoxKeyPair } from 'tweetnacl';
import { Buffer } from 'buffer';
import type { Wire, ExtensionConstructor } from 'bittorrent-protocol';
import type { LogLevel, MeerkatParameters, Peer } from './types';
import EventEmitter from 'events';
import Logger from './logger';
export default class Meerkat extends EventEmitter {
    announce: Array<String>;
    webTorrent: any;
    seed: string;
    torrent: any;
    torrentCreated: boolean;
    keyPair: SignKeyPair;
    keyPairEncrypt: BoxKeyPair;
    publicKey: string;
    encryptedPublicKey: string;
    identifier: string;
    peers: {
        [key: string]: Peer;
    };
    seen: {
        [key: string]: number;
    };
    lastwirecount: any;
    api: {
        [key: string]: Function;
    };
    callbacks: {
        [key: string]: Function;
    };
    serveraddress: any;
    heartbeattimer: any;
    logLevel: number;
    logger: Logger;
    constructor(parameters?: MeerkatParameters);
    private dynamicImportWebTorrent;
    private configureTorrent;
    disableLogging(): void;
    enableLogging(): void;
    setLogLevel(logLevel: LogLevel): void;
    attach(wire: Wire): void;
    detach(wire: Wire): void;
    extension(wire: Wire): ExtensionConstructor;
    onMessage(message: Buffer): void;
    onExtendedHandshake(wire: Wire, handshake: {
        [key: string]: any;
    }): void;
    register(name: string, callback: Function): void;
    rpc(address: string, call: string, args?: {
        [key: string]: any;
    }, callback?: Function): void;
    rpcCall(publicKey: string, call: string, args: {
        [key: string]: any;
    } | null, nonce: Uint8Array): void;
    makeEncryptSendPacket(publicKey: string, packetObject: Object): void;
    encryptPacket(publicKey: string, packet: Buffer): Buffer<ArrayBufferLike>;
    sawPeer(publicKey: string, encryptedPublicKey: string): void;
    connections(): any;
    close(): void;
    private sendRaw;
    private static toHex;
    private makePacket;
    encodeAddress(address: Uint8Array): string;
    address(publicKey?: string): string;
    heartbeat(heartbeat: any): void;
    encodeseed(randomBytes: Uint8Array): string;
}
